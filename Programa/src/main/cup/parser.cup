/* 
 * Analizador Sintáctico con Análisis Semántico Integrado + Código Intermedio
 * --------------------------------------------------------------------------
 * 
 * OBJETIVO: Verificar la estructura del programa según las reglas gramaticales
 * del lenguaje y realizar análisis semántico con manejo de alcances.
 * 
 * CAMBIOS PARA PROYECTO 2:
 * - Manejo de scopes y tabla de símbolos semántica
 * - Verificación de tipos y compatibilidad
 * - Detección de errores semánticos
 * - NUEVO: Generación de código intermedio (opcional, no invasiva)
 * 
 * ESTRATEGIA: Acciones semánticas al final de producciones para evitar conflictos
 * El código intermedio se genera SOLO si pasa el análisis semántico.
 */

/* Imports y paquetes */
import java_cup.runtime.*;
import java.util.*;
import main.java.symbol.SymbolTable;
import main.java.symbol.SemanticSymbolTable;
import main.java.intermedio.IntermediateCodeGenerator;

/* Código de usuario */
parser code {:
    /* 
     * NUEVO: Tabla de símbolos semántica
     */
    private SemanticSymbolTable semanticTable;
    
    /* 
     * Tabla de símbolos original (para compatibilidad)
     */
    private SymbolTable symbolTable;
    
    /* Contador de errores */
    private int errorCount = 0;
    
    /* 
     * NUEVO: Stack para contexto de scopes (evita acciones intermedias)
     */
    private Stack<String> scopeContext = new Stack<>();
    
    /* 
     * NUEVO: Nombre de función actual para verificar returns
     */
    private String currentFunctionName = null;
    

    // === NUEVO: GENERADOR DE CÓDIGO INTERMEDIO (OPCIONAL) ===
    private IntermediateCodeGenerator codeGenerator;
    private boolean codeGenerationEnabled = false;
    
    // Método para habilitar generación de código
    public void enableCodeGeneration(String outputFile) {
        this.codeGenerator = new IntermediateCodeGenerator(outputFile);
        this.codeGenerationEnabled = true;
        System.out.println("Generación de código intermedio habilitada");
    }
    
    public void disableCodeGeneration() {
        this.codeGenerationEnabled = false;
        this.codeGenerator = null;
    }
    
    public IntermediateCodeGenerator getCodeGenerator() {
        return codeGenerator;
    }

    /* 
     * NUEVO: Inicializar tablas semánticas
     */
    public void initTables() {
        semanticTable = new SemanticSymbolTable();
        symbolTable = semanticTable.getOriginalTable();
        System.out.println("Iniciando analisis semantico...");
        
        // Inicializar contexto global
        scopeContext.push("GLOBAL");
    }
    
    public void setSymbolTable(SymbolTable symbolTable) {
        this.symbolTable = symbolTable;
        if (semanticTable == null) {
            initTables();
        }
    }
    
    public SemanticSymbolTable getSemanticTable() {
        if (semanticTable == null) {
            initTables();
        }
        return semanticTable;
    }
    
    /* 
     * NUEVO: Métodos para manejar función actual
     */
    public String getCurrentFunctionName() {
        return currentFunctionName;
    }
    
    public void setCurrentFunctionName(String functionName) {
        this.currentFunctionName = functionName;
    }
    
    /* 
     * NUEVO: Métodos para manejo de scopes sin acciones intermedias
     */
    public void enterFunctionScope(String functionName, String returnType, List<String> params, int line, int column) {
        if (semanticTable != null) {
            semanticTable.enterScope("FUNCTION", functionName);
            scopeContext.push("FUNCTION:" + functionName);
            setCurrentFunctionName(functionName); // Establecer función actual
            System.out.println("Entrando a función: " + functionName);
        }
    }
    
    public void exitFunctionScope() {
        if (semanticTable != null && !scopeContext.isEmpty()) {
            String context = scopeContext.pop();
            semanticTable.exitScope();
            setCurrentFunctionName(null); // Limpiar función actual
            System.out.println("Saliendo de scope: " + context);
        }
    }
    
    public void enterBlockScope() {
        if (semanticTable != null) {
            semanticTable.enterScope("BLOCK", "block");
            scopeContext.push("BLOCK");
            System.out.println("Entrando a bloque...");
        }
    }
    
    public void exitBlockScope() {
        if (semanticTable != null && !scopeContext.isEmpty()) {
            String context = scopeContext.pop();
            semanticTable.exitScope();
            System.out.println("Saliendo de bloque...");
        }
    }
    
    public void enterControlScope(String controlType) {
        if (semanticTable != null) {
            semanticTable.enterScope(controlType.toUpperCase(), controlType.toLowerCase() + "_block");
            scopeContext.push(controlType.toUpperCase());
            System.out.println("Entrando a " + controlType + "...");
        }
    }
    
    public void exitControlScope() {
        if (semanticTable != null && !scopeContext.isEmpty()) {
            String context = scopeContext.pop();
            semanticTable.exitScope();
            System.out.println("Saliendo de control: " + context);
        }
    }
    
    /* 
     * NUEVO: Método para finalizar análisis semántico
     */
    public void finalizeSemantic() {
        if (semanticTable != null) {
            // Verificar función main
            boolean hasMain = semanticTable.checkMainFunction();
            if (!hasMain) {
                errorCount++;
            }
            
            // Imprimir resumen
            semanticTable.printSummary();
            
            // Escribir archivo de resultados semánticos
            try {
                semanticTable.escribirTablas("semantic_analysis.txt");
                System.out.println("Analisis semantico completado. Ver: semantic_analysis.txt");
            } catch (Exception e) {
                System.err.println("Error escribiendo archivo semantico: " + e.getMessage());
            }
        }
        
        // NUEVO: Finalizar código intermedio si está habilitado
        if (codeGenerationEnabled && codeGenerator != null) {
            codeGenerator.printCode();
            codeGenerator.printStatistics();
            codeGenerator.writeToFile();
        }
    }
    
    /* Métodos de manejo de errores existentes */
    public void syntax_error(Symbol s) {
        errorCount++;
        System.err.println("Error sintactico #" + errorCount + " en linea " + (s.left + 1) + 
                          ", columna " + (s.right + 1) + ": Token inesperado '" + s.value + "'");
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception {
        errorCount++;
        System.err.println("Error sintactico fatal #" + errorCount + " en linea " + (s.left + 1) + 
                          ", columna " + (s.right + 1) + ": No se pudo recuperar del error");
        
        System.err.println("Total de errores encontrados: " + errorCount);
        
        // NUEVO: Finalizar análisis semántico
        finalizeSemantic();
    }
    
    public void report_error(String message, Object info) {
        errorCount++;
        if (info instanceof Symbol) {
            Symbol s = (Symbol) info;
            System.err.println("Error de recuperacion #" + errorCount + " en linea " + (s.left + 1) + 
                              ", columna " + (s.right + 1) + ": " + message);
        } else {
            System.err.println("Error de recuperacion #" + errorCount + ": " + message);
        }
    }
    
    public int getErrorCount() {
        return errorCount + (semanticTable != null ? semanticTable.getErrorCount() : 0);
    }
    
    /* Métodos de compatibilidad existentes */
    public void updateVariableType(String id, String type) {
        if (symbolTable != null) {
            symbolTable.actualizarTipoVariable(id, type);
        }
    }
    
    public void markAsFunction(String id, String returnType) {
        if (symbolTable != null) {
            symbolTable.marcarComoFuncion(id, returnType);
        }
    }
:}

/* 
 * Simbolos no terminales con tipos para análisis semántico
 * Los que retornan tipos se marcan con String
 */
non terminal program;
non terminal block;
non terminal decl_var, decl_fun, decl_arr;
non terminal stmt;
non terminal assign;
non terminal String exp;              
non terminal String exp_arit, term_arit, factor_arit, power_arit, atom_arit;
non terminal String exp_rel;          
non terminal String exp_log, term_log, factor_log;
non terminal String unary_exp;        
non terminal ctrl, if_stmt, do_while, for_stmt;
non terminal break_stmt, return_stmt;
non terminal read_stmt, write_stmt;
non terminal String tipo, tipo_r;     
non terminal String arr_access;      
non terminal exp_list, exp_matrix, matrix_row;
non terminal param, param_list, arg_list;
non terminal String literal;         
non terminal String llamada_fun;     
non terminal switch_stmt, case_list, case_stmt, default_stmt;

terminal IF, ELIF, ELSE, DO, WHILE, FOR, BREAK, RETURN;
terminal INT, FLOAT, BOOL, CHAR, STRING, VOID;
terminal READ, WRITE, MAIN, TRUE, FALSE;
terminal PLUS, MINUS, TIMES, DIVIDE, MOD, POW;
terminal INCREMENT, DECREMENT;
terminal LT, LTE, GT, GTE, EQ, NEQ;
terminal AND, OR, NOT;
terminal LPAREN, RPAREN, LBLOCK, RBLOCK;
terminal QUESTION, COMMA, ASSIGN;
terminal LBRACKET, RBRACKET;
terminal UMINUS;
terminal ID, LIT_INT, LIT_FLOAT, LIT_BOOL, LIT_CHAR, LIT_STRING;
terminal SWITCH, CASE, DEFAULT, COLON;

precedence left OR;
precedence left AND;
precedence right NOT;
precedence nonassoc LT, LTE, GT, GTE, EQ, NEQ;
precedence left PLUS, MINUS;
precedence left TIMES, DIVIDE, MOD;
precedence right POW;
precedence right UMINUS, INCREMENT, DECREMENT;
precedence left LPAREN, RPAREN, LBRACKET, RBRACKET;

/* 
 * Gramática con recuperación de errores y análisis semántico
 */
start with program;

/* 
 * Estructura del programa con manejo correcto de main
 */
program ::= VOID MAIN:m LPAREN RPAREN LBLOCK 
          {: 
             // Declarar función main en alcance global
             List<String> noParams = new ArrayList<String>();
             parser.getSemanticTable().declareFunction("main", "VOID", noParams, mleft, mright);
             
             // Entrar al scope de main ANTES de procesar el bloque
             parser.getSemanticTable().enterScope("FUNCTION", "main");
             parser.setCurrentFunctionName("main");
             System.out.println("Entrando a función main");
             
             // NUEVO: Código intermedio para función main
             if (parser.codeGenerationEnabled) {
                 parser.getCodeGenerator().startFunction("main", "VOID");
             }
          :}
          block RBLOCK
          {: 
             // Salir del scope de main DESPUÉS de procesar el bloque
             parser.getSemanticTable().exitScope();
             parser.setCurrentFunctionName(null);
             System.out.println("Saliendo de función main");
             
             // NUEVO: Finalizar función main en código intermedio
             if (parser.codeGenerationEnabled) {
                 parser.getCodeGenerator().endFunction("main");
             }
             
             // Finalizar análisis
             parser.finalizeSemantic();
          :}
          | decl_fun:f program
          {: 
             // La función ya fue procesada semánticamente en decl_fun
             if (f != null) {
                 System.out.println("Función declarada: " + f.toString());
             }
          :}
          | error program  
          {: 
             System.err.println("Error en la estructura del programa. Continuando análisis..."); 
          :}
          | /* programa vacío */
          ;

/* 
 * Declaración de funciones con análisis semántico y scope correcto
 */
decl_fun ::= tipo_r:t ID:id LPAREN param_list RPAREN LBLOCK 
           {: 
              // PRIMERO: Declarar función en alcance global
              List<String> params = new ArrayList<String>(); // TODO: extraer de param_list
              parser.getSemanticTable().declareFunction(id.toString(), t.toString(), params, idleft, idright);
              
              // SEGUNDO: Entrar al scope de función ANTES de procesar el bloque
              parser.getSemanticTable().enterScope("FUNCTION", id.toString());
              parser.setCurrentFunctionName(id.toString());
              System.out.println("Entrando a función: " + id.toString() + " tipo: " + t.toString());
              
              // NUEVO: Código intermedio para función
              if (parser.codeGenerationEnabled) {
                  parser.getCodeGenerator().startFunction(id.toString(), t.toString());
              }
           :}
           block RBLOCK
           {: 
              RESULT = id; 
              
              // TERCERO: Salir del scope de función DESPUÉS de procesar el bloque
              parser.getSemanticTable().exitScope();
              parser.setCurrentFunctionName(null);
              System.out.println("Saliendo de función: " + id.toString());
              
              // NUEVO: Finalizar función en código intermedio
              if (parser.codeGenerationEnabled) {
                  parser.getCodeGenerator().endFunction(id.toString());
              }
              
              // Compatibilidad con Proyecto 1
              parser.markAsFunction(id.toString(), t.toString());
           :}
           | tipo_r:t ID:id LPAREN RPAREN LBLOCK 
           {: 
              // Función sin parámetros
              List<String> noParams = new ArrayList<String>();
              parser.getSemanticTable().declareFunction(id.toString(), t.toString(), noParams, idleft, idright);
              
              parser.getSemanticTable().enterScope("FUNCTION", id.toString());
              parser.setCurrentFunctionName(id.toString());
              System.out.println("Entrando a función sin parámetros: " + id.toString() + " tipo: " + t.toString());
              
              // NUEVO: Código intermedio para función sin parámetros
              if (parser.codeGenerationEnabled) {
                  parser.getCodeGenerator().startFunction(id.toString(), t.toString());
              }
           :}
           block RBLOCK
           {: 
              RESULT = id; 
              
              parser.getSemanticTable().exitScope();
              parser.setCurrentFunctionName(null);
              System.out.println("Saliendo de función: " + id.toString());
              
              // NUEVO: Finalizar función en código intermedio
              if (parser.codeGenerationEnabled) {
                  parser.getCodeGenerator().endFunction(id.toString());
              }
              
              parser.markAsFunction(id.toString(), t.toString()); 
           :}
           ;

/* 
 * Tipos de retorno para funciones
 */
tipo_r ::= INT {: RESULT = "INT"; :}
         | FLOAT {: RESULT = "FLOAT"; :}
         | CHAR {: RESULT = "CHAR"; :}
         | BOOL {: RESULT = "BOOL"; :}
         | VOID {: RESULT = "VOID"; :}
         ;

/* 
 * Lista de parámetros de función
 */
param_list ::= param
             | param_list COMMA param
             ;

/* 
 * Parámetro individual con análisis semántico
 */
param ::= tipo:t ID:id 
        {: 
           // Análisis semántico: declarar parámetro en scope actual
           if (parser.getSemanticTable() != null) {
               parser.getSemanticTable().declareVariable(id.toString(), t.toString(), idleft, idright);
           }
           
           // NUEVO: Código intermedio para parámetro
           if (parser.codeGenerationEnabled) {
               parser.getCodeGenerator().declareVariable(id.toString(), t.toString());
           }
           
           // Compatibilidad con Proyecto 1
           parser.updateVariableType(id.toString(), t.toString());
        :}
        ;

/* 
 * Bloque de código
 */
block ::= stmt block
        | error block  {: System.err.println("Error en bloque de código. Continuando..."); :}
        | /* bloque vacío */
        ;

/* 
 * Tipos de datos
 */
tipo ::= INT {: RESULT = "INT"; :}
       | FLOAT {: RESULT = "FLOAT"; :}
       | BOOL {: RESULT = "BOOL"; :}
       | CHAR {: RESULT = "CHAR"; :}
       | STRING {: RESULT = "STRING"; :}
       ;

/* 
 * Declaración de arreglos con análisis semántico
 */
decl_arr ::= tipo:t ID:id LBRACKET exp:e1 RBRACKET LBRACKET exp:e2 RBRACKET QUESTION
           {: 
              String arrayType = t.toString() + "[][]";
              
              // Análisis semántico: verificar que e1 y e2 sean enteros
              if (parser.getSemanticTable() != null) {
                  parser.getSemanticTable().declareVariable(id.toString(), arrayType, idleft, idright);
                  // TODO: verificar que e1 y e2 sean expresiones enteras válidas
              }
              
              // NUEVO: Código intermedio para declaración de array
              if (parser.codeGenerationEnabled) {
                  parser.getCodeGenerator().declareVariable(id.toString(), arrayType);
              }
              
              // Compatibilidad con Proyecto 1
              parser.updateVariableType(id.toString(), arrayType);
           :}
           | tipo:t ID:id LBRACKET exp:e1 RBRACKET LBRACKET exp:e2 RBRACKET ASSIGN exp_matrix QUESTION
           {: 
              String arrayType = t.toString() + "[][]";
              
              // Análisis semántico: declarar e inicializar
              if (parser.getSemanticTable() != null) {
                  parser.getSemanticTable().declareVariable(id.toString(), arrayType, idleft, idright);
                  // TODO: verificar compatibilidad de tipos con exp_matrix
              }
              
              // NUEVO: Código intermedio para array con inicialización
              if (parser.codeGenerationEnabled) {
                  parser.getCodeGenerator().declareVariable(id.toString(), arrayType);
                  parser.getCodeGenerator().addComment("Array inicializado con matriz");
              }
              
              // Compatibilidad con Proyecto 1
              parser.updateVariableType(id.toString(), arrayType);
           :}
           ;

/* Estructura de matriz */
exp_matrix ::= LBRACKET matrix_row RBRACKET
             | LBRACKET matrix_row COMMA matrix_row RBRACKET
             ;

/* Fila de matriz */
matrix_row ::= LBRACKET exp_list RBRACKET;

/* Lista de expresiones */
exp_list ::= exp
           | exp COMMA exp_list
           ;

/* Acceso a arreglos con verificación semántica */
arr_access ::= ID:id LBRACKET exp:e1 RBRACKET LBRACKET exp:e2 RBRACKET
             {: 
                // Análisis semántico: verificar que id sea un arreglo y e1,e2 sean enteros
                if (parser.getSemanticTable() != null) {
                    // TODO: verificar que id existe y es un arreglo
                    // TODO: verificar que e1 y e2 son expresiones enteras
                }
                
                // NUEVO: Código intermedio para acceso a array
                if (parser.codeGenerationEnabled) {
                    RESULT = parser.getCodeGenerator().generateArrayAccess(id.toString(), e1, e2);
                } else {
                    RESULT = "ARRAY_ACCESS"; // Tipo resultante depende del tipo del arreglo
                }
             :}
             ;

/* 
 * Sentencias con manejo semántico de bloques
 */
stmt ::= exp:e QUESTION
       {: 
          // Análisis semántico: evaluar expresión
          if (parser.getSemanticTable() != null && e != null) {
              // TODO: verificar que la expresión es válida en este contexto
          }
       :}
       | assign
       | decl_var
       | decl_arr
       | ctrl
       | break_stmt
       | return_stmt
       | read_stmt
       | write_stmt
       | LBLOCK block RBLOCK
       {: 
          // Análisis semántico: manejar scope de bloque
          parser.enterBlockScope();
          parser.exitBlockScope();
       :}
       | error QUESTION  {: System.err.println("Error en sentencia. Recuperando en ';'..."); :}
       ;

/* 
 * Asignación con verificación de tipos MEJORADA
 */
assign ::= ID:id ASSIGN exp:e QUESTION
         {:
            // === TU ANÁLISIS SEMÁNTICO EXISTENTE (NO TOCAR) ===
            boolean valid = parser.getSemanticTable().checkAssignment(id.toString(), e, idleft);
            
            if (valid) {
                System.out.println("Asignacion valida: " + id + " = " + e);
            } else {
                System.err.println("Error en asignacion a variable: " + id);
            }
            
            // === NUEVO: GENERACIÓN DE CÓDIGO (SOLO SI ES VÁLIDO) ===
            if (parser.codeGenerationEnabled && valid) {
                parser.getCodeGenerator().generateAssignment(id.toString(), e);
            }
         :}
         | arr_access:arr ASSIGN exp:e QUESTION
         {: 
            // NUEVO: Verificar asignación a array
            if (parser.getSemanticTable() != null) {
                // El arr_access ya verificó si el array existe
                System.out.println("Asignacion a array: " + arr + " = " + e);
                
                // NUEVO: Código intermedio para asignación a array
                if (parser.codeGenerationEnabled) {
                    parser.getCodeGenerator().addComment("Asignación a elemento de array");
                    // Nota: arr ya contiene el acceso completo generado
                }
            }
         :}
         | ID ASSIGN error QUESTION  {: System.err.println("Error en expresión de asignación. Continuando..."); :}
         ;

/* 
 * Declaración de variables con verificación semántica completa
 */
decl_var ::= tipo:t ID:id ASSIGN exp:e QUESTION
           {: 
              // === TU VERIFICACIÓN SEMÁNTICA EXISTENTE (NO TOCAR) ===
              // 1. Declarar variable con inicialización
              boolean declared = parser.getSemanticTable().declareVariable(id.toString(), t, idleft, idright, true);
              
              if (declared) {
                  // 2. Verificar compatibilidad de tipos
                  if (e != null) {
                      boolean compatible = parser.getSemanticTable().checkTypeCompatibility(t, e, idleft);
                      if (compatible) {
                          System.out.println("Variable '" + id + "' declarada e inicializada correctamente como " + t);
                      } else {
                          System.err.println("Error: tipos incompatibles en inicializacion de " + id);
                      }
                  }
              }
              
              // Compatibilidad con tabla original
              parser.updateVariableType(id.toString(), t.toString());
              
              // === NUEVO: GENERACIÓN DE CÓDIGO (SOLO SI ES VÁLIDO) ===
              if (parser.codeGenerationEnabled && declared) {
                  parser.getCodeGenerator().declareVariable(id.toString(), t.toString());
                  if (e != null) {
                      parser.getCodeGenerator().generateAssignment(id.toString(), e);
                  }
              }
           :}
           | tipo:t ID:id QUESTION
           {: 
              // === TU ANÁLISIS SEMÁNTICO EXISTENTE ===
              // Variable sin inicialización
              boolean declared = parser.getSemanticTable().declareVariable(id.toString(), t, idleft, idright, false);
              
              if (declared) {
                  System.out.println("Variable '" + id + "' declarada como " + t + " (sin inicializar)");
              }
              
              parser.updateVariableType(id.toString(), t.toString());
              
              // === NUEVO: CÓDIGO INTERMEDIO ===
              if (parser.codeGenerationEnabled && declared) {
                  parser.getCodeGenerator().declareVariable(id.toString(), t.toString());
              }
           :}
           ;

/* Valores literales con tipos semánticos */
literal ::= LIT_INT:val
          {: 
             RESULT = "INT"; 
             System.out.println("Literal entero detectado");
             
             // NUEVO: En código intermedio, los literales se usan directamente
             if (parser.codeGenerationEnabled) {
                 RESULT = val.toString(); // Usar el valor literal directamente
             }
          :}
         | LIT_FLOAT:val
          {: 
             RESULT = "FLOAT"; 
             System.out.println("Literal flotante detectado");
             
             if (parser.codeGenerationEnabled) {
                 RESULT = val.toString();
             }
          :}
         | LIT_BOOL:val
          {: 
             RESULT = "BOOL"; 
             System.out.println("Literal booleano detectado");
             
             if (parser.codeGenerationEnabled) {
                 RESULT = val.toString();
             }
          :}
         | LIT_CHAR:val
          {: 
             RESULT = "CHAR"; 
             System.out.println("Literal caracter detectado");
             
             if (parser.codeGenerationEnabled) {
                 RESULT = val.toString();
             }
          :}
         | LIT_STRING:val
          {: 
             RESULT = "STRING"; 
             System.out.println("Literal cadena detectado");
             
             if (parser.codeGenerationEnabled) {
                 RESULT = val.toString();
             }
          :}
         | TRUE 
          {: 
             RESULT = "BOOL"; 
             System.out.println("Literal booleano 'true' detectado");
             
             if (parser.codeGenerationEnabled) {
                 RESULT = "true";
             }
          :}
         | FALSE 
          {: 
             RESULT = "BOOL"; 
             System.out.println("Literal booleano 'false' detectado");
             
             if (parser.codeGenerationEnabled) {
                 RESULT = "false";
             }
          :}
         ;

/* Llamadas a funciones con verificación semántica */
llamada_fun ::= ID:id LPAREN arg_list RPAREN
              {: 
                 // === TU ANÁLISIS SEMÁNTICO EXISTENTE ===
                 if (parser.getSemanticTable() != null) {
                     // TODO: verificar función y argumentos
                     RESULT = "FUNCTION_CALL"; // El tipo real debe venir de la tabla de símbolos
                 }
                 
                 // === NUEVO: CÓDIGO INTERMEDIO ===
                 if (parser.codeGenerationEnabled) {
                     List<String> args = new ArrayList<String>(); // TODO: extraer argumentos reales
                     RESULT = parser.getCodeGenerator().generateFunctionCall(id.toString(), args);
                 }
              :}
              | ID:id LPAREN RPAREN
              {: 
                 // === TU ANÁLISIS SEMÁNTICO EXISTENTE ===
                 if (parser.getSemanticTable() != null) {
                     // TODO: verificar función sin argumentos
                     RESULT = "FUNCTION_CALL";
                 }
                 
                 // === NUEVO: CÓDIGO INTERMEDIO ===
                 if (parser.codeGenerationEnabled) {
                     List<String> noArgs = new ArrayList<String>();
                     RESULT = parser.getCodeGenerator().generateFunctionCall(id.toString(), noArgs);
                 }
              :}
              ;

/* Punto de entrada para expresiones con propagación de tipos */
exp ::= exp_log:e {: RESULT = e; :}
      ;

/* Expresiones lógicas con verificación de tipos */
exp_log ::= exp_log:e1 OR term_log:e2
          {: 
             // === TU ANÁLISIS SEMÁNTICO EXISTENTE ===
             if (parser.getSemanticTable() != null) {
                 // TODO: verificar tipos booleanos
             }
             RESULT = "BOOL"; 
             
             // === NUEVO: CÓDIGO INTERMEDIO ===
             if (parser.codeGenerationEnabled) {
                 RESULT = parser.getCodeGenerator().generateBinaryOp(e1, "||", e2);
             }
          :}
          | term_log:e {: RESULT = e; :}
          ;

term_log ::= term_log:e1 AND factor_log:e2
           {: 
              // === TU ANÁLISIS SEMÁNTICO EXISTENTE ===
              if (parser.getSemanticTable() != null) {
                  // TODO: verificar tipos booleanos
              }
              RESULT = "BOOL"; 
              
              // === NUEVO: CÓDIGO INTERMEDIO ===
              if (parser.codeGenerationEnabled) {
                  RESULT = parser.getCodeGenerator().generateBinaryOp(e1, "&&", e2);
              }
           :}
           | factor_log:e {: RESULT = e; :}
           ;

factor_log ::= NOT atom_arit:e
             {: 
                // === TU ANÁLISIS SEMÁNTICO EXISTENTE ===
                if (parser.getSemanticTable() != null) {
                    // TODO: verificar tipo booleano
                }
                RESULT = "BOOL"; 
                
                // === NUEVO: CÓDIGO INTERMEDIO ===
                if (parser.codeGenerationEnabled) {
                    RESULT = parser.getCodeGenerator().generateUnaryOp("!", e);
                }
             :}
             | exp_rel:e {: RESULT = e; :}
             | LPAREN exp_log:e RPAREN {: RESULT = e; :}
             ;

/* Expresiones relacionales con verificación de tipos */
exp_rel ::= exp_arit:e1 LT exp_arit:e2 
          {: 
             RESULT = "BOOL"; 
             
             // === NUEVO: CÓDIGO INTERMEDIO ===
             if (parser.codeGenerationEnabled) {
                 RESULT = parser.getCodeGenerator().generateComparison(e1, "<", e2);
             }
          :}
          | exp_arit:e1 LTE exp_arit:e2 
          {: 
             RESULT = "BOOL"; 
             
             if (parser.codeGenerationEnabled) {
                 RESULT = parser.getCodeGenerator().generateComparison(e1, "<=", e2);
             }
          :}
          | exp_arit:e1 GT exp_arit:e2 
          {: 
             RESULT = "BOOL"; 
             
             if (parser.codeGenerationEnabled) {
                 RESULT = parser.getCodeGenerator().generateComparison(e1, ">", e2);
             }
          :}
          | exp_arit:e1 GTE exp_arit:e2 
          {: 
             RESULT = "BOOL"; 
             
             if (parser.codeGenerationEnabled) {
                 RESULT = parser.getCodeGenerator().generateComparison(e1, ">=", e2);
             }
          :}
          | exp_arit:e1 EQ exp_arit:e2 
          {: 
             RESULT = "BOOL"; 
             
             if (parser.codeGenerationEnabled) {
                 RESULT = parser.getCodeGenerator().generateComparison(e1, "==", e2);
             }
          :}
          | exp_arit:e1 NEQ exp_arit:e2 
          {: 
             RESULT = "BOOL"; 
             
             if (parser.codeGenerationEnabled) {
                 RESULT = parser.getCodeGenerator().generateComparison(e1, "!=", e2);
             }
          :}
          | exp_arit:e {: RESULT = e; :}
          ;

/* Expresiones aritméticas con propagación de tipos */
exp_arit ::= exp_arit:e1 PLUS term_arit:e2
           {: 
              // === TU ANÁLISIS SEMÁNTICO EXISTENTE ===
              // TODO: determinar tipo resultante (INT + INT = INT, FLOAT + cualquiera = FLOAT)
              RESULT = "NUMERIC"; 
              
              // === NUEVO: CÓDIGO INTERMEDIO ===
              if (parser.codeGenerationEnabled) {
                  RESULT = parser.getCodeGenerator().generateBinaryOp(e1, "+", e2);
              }
           :}
           | exp_arit:e1 MINUS term_arit:e2 
           {: 
              RESULT = "NUMERIC"; 
              
              if (parser.codeGenerationEnabled) {
                  RESULT = parser.getCodeGenerator().generateBinaryOp(e1, "-", e2);
              }
           :}
           | term_arit:e {: RESULT = e; :}
           ;

term_arit ::= term_arit:e1 TIMES factor_arit:e2 
            {: 
               RESULT = "NUMERIC"; 
               
               if (parser.codeGenerationEnabled) {
                   RESULT = parser.getCodeGenerator().generateBinaryOp(e1, "*", e2);
               }
            :}
            | term_arit:e1 DIVIDE factor_arit:e2 
            {: 
               RESULT = "NUMERIC"; 
               
               if (parser.codeGenerationEnabled) {
                   RESULT = parser.getCodeGenerator().generateBinaryOp(e1, "/", e2);
               }
            :}
            | term_arit:e1 MOD factor_arit:e2 
            {: 
               RESULT = "INT"; 
               
               if (parser.codeGenerationEnabled) {
                   RESULT = parser.getCodeGenerator().generateBinaryOp(e1, "%", e2);
               }
            :}
            | factor_arit:e {: RESULT = e; :}
            ;

factor_arit ::= factor_arit:e1 POW power_arit:e2 
              {: 
                 RESULT = "NUMERIC"; 
                 
                 if (parser.codeGenerationEnabled) {
                     RESULT = parser.getCodeGenerator().generateBinaryOp(e1, "**", e2);
                 }
              :}
              | power_arit:e {: RESULT = e; :}
              ;

power_arit ::= unary_exp:e {: RESULT = e; :}
             | atom_arit:e {: RESULT = e; :}
             ;

/* Operadores unarios con verificación de tipos */
unary_exp ::= MINUS atom_arit %prec UMINUS
            | INCREMENT ID
            | DECREMENT ID
            ;

/* Términos atómicos con tipos semánticos */
atom_arit ::= ID:id
            {: 
               // === TU ANÁLISIS SEMÁNTICO EXISTENTE ===
               if (parser.getSemanticTable() != null) {
                   parser.getSemanticTable().useVariable(id.toString(), idleft, idright);
                   // TODO: obtener tipo real de la tabla de símbolos
               }
               
               // === NUEVO: CÓDIGO INTERMEDIO ===
               if (parser.codeGenerationEnabled) {
                   RESULT = id.toString(); // Las variables se usan directamente por su nombre
               } else {
                   RESULT = "VARIABLE"; 
               }
            :}
            | literal:l {: RESULT = l; :}
            | arr_access:a {: RESULT = a; :}
            | llamada_fun:f {: RESULT = f; :}
            | LPAREN exp:e RPAREN {: RESULT = e; :}
            ;

/* Lista de argumentos */
arg_list ::= exp
           | exp COMMA arg_list
           ;

/* Estructuras de control */
ctrl ::= if_stmt
       | do_while
       | for_stmt
       | switch_stmt
       ;

/* SOLUCION: Estructuras de control SIN acciones intermedias */
/* Estructura if-elif-else con scopes semánticos - VERSION CORREGIDA */
if_stmt ::= IF LPAREN exp:e RPAREN LBLOCK block RBLOCK
          {: 
             // === TU ANÁLISIS SEMÁNTICO EXISTENTE (MOVIDO AL FINAL) ===
             parser.enterControlScope("IF");
             parser.exitControlScope();
             
             // === NUEVO: CÓDIGO INTERMEDIO SIMPLIFICADO ===
             if (parser.codeGenerationEnabled) {
                 parser.getCodeGenerator().addComment("Estructura IF procesada");
                 parser.getCodeGenerator().addComment("Condicion: " + e);
             }
          :}
          | IF LPAREN exp RPAREN LBLOCK block RBLOCK ELIF LPAREN exp RPAREN LBLOCK block RBLOCK
          {: 
             parser.enterControlScope("IF");
             parser.exitControlScope();
             
             if (parser.codeGenerationEnabled) {
                 parser.getCodeGenerator().addComment("Estructura IF-ELIF procesada");
             }
          :}
          | IF LPAREN exp RPAREN LBLOCK block RBLOCK ELSE LBLOCK block RBLOCK
          {: 
             parser.enterControlScope("IF");
             parser.exitControlScope();
             
             if (parser.codeGenerationEnabled) {
                 parser.getCodeGenerator().addComment("Estructura IF-ELSE procesada");
             }
          :}
          | IF LPAREN exp RPAREN LBLOCK block RBLOCK ELIF LPAREN exp RPAREN LBLOCK block RBLOCK ELSE LBLOCK block RBLOCK
          {: 
             parser.enterControlScope("IF");
             parser.exitControlScope();
             
             if (parser.codeGenerationEnabled) {
                 parser.getCodeGenerator().addComment("Estructura IF-ELIF-ELSE procesada");
             }
          :}
          | IF LPAREN error RPAREN LBLOCK block RBLOCK  {: System.err.println("Error en condición IF. Continuando..."); :}
          ;

/* Estructura do-while con scope semántico - VERSION CORREGIDA */
do_while ::= DO LBLOCK block RBLOCK WHILE LPAREN exp:e RPAREN QUESTION
           {: 
              // === TU ANÁLISIS SEMÁNTICO EXISTENTE (MOVIDO AL FINAL) ===
              parser.enterControlScope("WHILE");
              parser.exitControlScope();
              
              // === NUEVO: CÓDIGO INTERMEDIO SIMPLIFICADO ===
              if (parser.codeGenerationEnabled) {
                  parser.getCodeGenerator().addComment("Estructura DO-WHILE procesada");
                  parser.getCodeGenerator().addComment("Condicion: " + e);
              }
           :}
           | DO LBLOCK block RBLOCK WHILE LPAREN error RPAREN QUESTION  {: System.err.println("Error en condición WHILE. Continuando..."); :}
           ;

/* Estructura for con scope semántico - VERSION CORREGIDA */
for_stmt ::= FOR LPAREN decl_var exp QUESTION exp RPAREN LBLOCK block RBLOCK
           {: 
              // === TU ANÁLISIS SEMÁNTICO EXISTENTE (MOVIDO AL FINAL) ===
              parser.enterControlScope("FOR");
              parser.exitControlScope();
              
              // === NUEVO: CÓDIGO INTERMEDIO SIMPLIFICADO ===
              if (parser.codeGenerationEnabled) {
                  parser.getCodeGenerator().addComment("Estructura FOR procesada con declaracion");
              }
           :}
           | FOR LPAREN assign exp QUESTION exp RPAREN LBLOCK block RBLOCK
           {: 
              parser.enterControlScope("FOR");
              parser.exitControlScope();
              
              if (parser.codeGenerationEnabled) {
                  parser.getCodeGenerator().addComment("Estructura FOR procesada con asignacion");
              }
           :}
           | FOR LPAREN QUESTION exp QUESTION exp RPAREN LBLOCK block RBLOCK
           {: 
              parser.enterControlScope("FOR");
              parser.exitControlScope();
              
              if (parser.codeGenerationEnabled) {
                  parser.getCodeGenerator().addComment("Estructura FOR procesada sin inicializacion");
              }
           :}
           | FOR LPAREN error RPAREN LBLOCK block RBLOCK  {: System.err.println("Error en estructura FOR. Continuando..."); :}
           ;

/* Estructura switch */
switch_stmt ::= SWITCH LPAREN exp RPAREN LBLOCK case_list RBLOCK
              {: 
                 if (parser.codeGenerationEnabled) {
                     parser.getCodeGenerator().addComment("Estructura SWITCH procesada");
                 }
              :}
              | SWITCH LPAREN error RPAREN LBLOCK case_list RBLOCK  {: System.err.println("Error en expresión SWITCH. Continuando..."); :}
              ;

/* Lista de casos */
case_list ::= case_stmt case_list
           | default_stmt
           | /* vacío */
           ;

/* Caso individual */
case_stmt ::= CASE exp COLON block;

/* Caso por defecto */
default_stmt ::= DEFAULT COLON block;

/* Sentencia break */
break_stmt ::= BREAK QUESTION
             {: 
                // === NUEVO: CÓDIGO INTERMEDIO PARA BREAK ===
                if (parser.codeGenerationEnabled) {
                    parser.getCodeGenerator().generateBreak();
                }
             :}
             ;

/* Sentencia return con verificación de tipos MEJORADA */
return_stmt ::= RETURN exp:e QUESTION
              {: 
                 // === TU ANÁLISIS SEMÁNTICO EXISTENTE (NO TOCAR) ===
                 System.out.println("DEBUG: Return con expresión, función actual: " + parser.getCurrentFunctionName());
                 
                 if (parser.getSemanticTable() != null && parser.getCurrentFunctionName() != null) {
                     parser.getSemanticTable().checkReturnStatement(parser.getCurrentFunctionName(), e, eleft);
                 } else {
                     System.err.println("ERROR: No se puede verificar return - función actual: " + parser.getCurrentFunctionName());
                 }
                 
                 // === NUEVO: CÓDIGO INTERMEDIO PARA RETURN ===
                 if (parser.codeGenerationEnabled) {
                     parser.getCodeGenerator().generateReturn(e);
                 }
              :}
              | RETURN:r QUESTION
              {: 
                 // === TU ANÁLISIS SEMÁNTICO EXISTENTE (NO TOCAR) ===
                 System.out.println("DEBUG: Return sin expresión, función actual: " + parser.getCurrentFunctionName());
                 
                 if (parser.getSemanticTable() != null && parser.getCurrentFunctionName() != null) {
                     parser.getSemanticTable().checkReturnStatement(parser.getCurrentFunctionName(), null, rleft);
                 } else {
                     System.err.println("ERROR: No se puede verificar return - función actual: " + parser.getCurrentFunctionName());
                 }
                 
                 // === NUEVO: CÓDIGO INTERMEDIO PARA RETURN VOID ===
                 if (parser.codeGenerationEnabled) {
                     parser.getCodeGenerator().generateReturn(null);
                 }
              :}
              | RETURN error QUESTION  {: System.err.println("Error en expresión RETURN. Continuando..."); :}
              ;

/* Funciones de entrada/salida */
read_stmt ::= READ LPAREN ID:id RPAREN QUESTION
            {: 
               // === TU ANÁLISIS SEMÁNTICO EXISTENTE ===
               if (parser.getSemanticTable() != null) {
                   parser.getSemanticTable().useVariable(id.toString(), idleft, idright);
               }
               
               // === NUEVO: CÓDIGO INTERMEDIO PARA READ ===
               if (parser.codeGenerationEnabled) {
                   parser.getCodeGenerator().generateRead(id.toString());
               }
            :}
            | READ LPAREN error RPAREN QUESTION  {: System.err.println("Error en función READ. Continuando..."); :}
            ;

write_stmt ::= WRITE LPAREN exp:e RPAREN QUESTION
             {: 
                // === TU ANÁLISIS SEMÁNTICO EXISTENTE ===
                // Cualquier tipo es válido para write
                
                // === NUEVO: CÓDIGO INTERMEDIO PARA WRITE ===
                if (parser.codeGenerationEnabled) {
                    parser.getCodeGenerator().generateWrite(e);
                }
             :}
             | WRITE LPAREN error RPAREN QUESTION  {: System.err.println("Error en función WRITE. Continuando..."); :}
             ;