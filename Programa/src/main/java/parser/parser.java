
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package main.java.parser;

import java_cup.runtime.*;
import java.util.*;
import main.java.symbol.SymbolTable;
import main.java.symbol.SemanticSymbolTable;
import main.java.symbol.SymbolInfo;
import main.java.intermedio.IntermediateCodeGenerator;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\173\000\002\002\004\000\002\055\002\000\002\002" +
    "\012\000\002\002\004\000\002\002\004\000\002\002\002" +
    "\000\002\056\002\000\002\057\002\000\002\005\014\000" +
    "\002\060\002\000\002\005\012\000\002\037\003\000\002" +
    "\037\003\000\002\037\003\000\002\037\003\000\002\037" +
    "\003\000\002\045\003\000\002\045\005\000\002\044\004" +
    "\000\002\003\004\000\002\003\004\000\002\003\002\000" +
    "\002\036\003\000\002\036\003\000\002\036\003\000\002" +
    "\036\003\000\002\036\003\000\002\006\013\000\002\006" +
    "\015\000\002\042\005\000\002\042\007\000\002\043\005" +
    "\000\002\041\003\000\002\041\005\000\002\040\011\000" +
    "\002\007\004\000\002\007\003\000\002\007\003\000\002" +
    "\007\003\000\002\007\003\000\002\007\003\000\002\007" +
    "\003\000\002\007\003\000\002\007\003\000\002\007\003" +
    "\000\002\007\003\000\002\007\005\000\002\007\004\000" +
    "\002\011\014\000\002\010\006\000\002\004\007\000\002" +
    "\004\005\000\002\047\003\000\002\047\003\000\002\047" +
    "\003\000\002\047\003\000\002\047\003\000\002\047\003" +
    "\000\002\047\003\000\002\050\006\000\002\050\005\000" +
    "\002\012\003\000\002\021\005\000\002\021\003\000\002" +
    "\022\005\000\002\022\003\000\002\023\004\000\002\023" +
    "\003\000\002\023\005\000\002\020\005\000\002\020\005" +
    "\000\002\020\005\000\002\020\005\000\002\020\005\000" +
    "\002\020\005\000\002\020\003\000\002\013\005\000\002" +
    "\013\005\000\002\013\003\000\002\014\005\000\002\014" +
    "\005\000\002\014\005\000\002\014\003\000\002\015\005" +
    "\000\002\015\003\000\002\016\003\000\002\024\004\000" +
    "\002\024\004\000\002\024\004\000\002\024\003\000\002" +
    "\017\003\000\002\017\003\000\002\017\003\000\002\017" +
    "\003\000\002\017\005\000\002\046\003\000\002\046\005" +
    "\000\002\025\003\000\002\025\003\000\002\025\003\000" +
    "\002\025\003\000\002\026\011\000\002\026\015\000\002" +
    "\061\002\000\002\027\014\000\002\062\002\000\002\030" +
    "\015\000\002\063\002\000\002\051\012\000\002\052\004" +
    "\000\002\052\003\000\002\052\002\000\002\053\006\000" +
    "\002\054\005\000\002\031\004\000\002\032\004\000\002" +
    "\033\005\000\002\033\004\000\002\033\005\000\002\034" +
    "\007\000\002\034\007\000\002\035\007\000\002\035\007" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0107\000\020\002\ufffc\003\011\015\004\016\014\017" +
    "\005\020\013\022\007\001\002\000\004\062\ufff6\001\002" +
    "\000\004\062\ufff3\001\002\000\004\062\367\001\002\000" +
    "\006\025\020\062\ufff2\001\002\000\004\002\017\001\002" +
    "\000\020\002\ufffc\003\011\015\004\016\014\017\005\020" +
    "\013\022\007\001\002\000\020\002\ufffc\003\011\015\004" +
    "\016\014\017\005\020\013\022\007\001\002\000\004\062" +
    "\ufff4\001\002\000\004\062\ufff5\001\002\000\004\002\ufffe" +
    "\001\002\000\004\002\ufffd\001\002\000\004\002\001\001" +
    "\002\000\004\051\021\001\002\000\004\052\022\001\002" +
    "\000\004\053\023\001\002\000\076\003\000\004\000\007" +
    "\000\011\000\012\000\013\000\014\000\015\000\016\000" +
    "\017\000\020\000\021\000\023\000\024\000\026\000\027" +
    "\000\031\000\036\000\037\000\050\000\051\000\053\000" +
    "\054\000\062\000\063\000\064\000\065\000\066\000\067" +
    "\000\070\000\001\002\000\076\003\066\004\061\007\115" +
    "\011\050\012\072\013\041\014\063\015\043\016\102\017" +
    "\056\020\032\021\105\023\100\024\052\026\064\027\113" +
    "\031\047\036\031\037\051\050\054\051\040\053\070\054" +
    "\uffec\062\062\063\027\064\036\065\106\066\071\067\067" +
    "\070\076\001\002\000\050\030\uffa5\031\uffa5\032\uffa5\033" +
    "\uffa5\034\uffa5\035\uffa5\040\uffa5\041\uffa5\042\uffa5\043\uffa5" +
    "\044\uffa5\045\uffa5\046\uffa5\047\uffa5\052\uffa5\055\uffa5\056" +
    "\uffa5\061\uffa5\073\uffa5\001\002\000\050\030\uffa8\031\uffa8" +
    "\032\uffa8\033\uffa8\034\uffa8\035\uffa8\040\uffa8\041\uffa8\042" +
    "\uffa8\043\uffa8\044\uffa8\045\uffa8\046\uffa8\047\uffa8\052\uffa8" +
    "\055\uffa8\056\uffa8\061\uffa8\073\uffa8\001\002\000\050\030" +
    "\uffcd\031\uffcd\032\uffcd\033\uffcd\034\uffcd\035\uffcd\040\uffcd" +
    "\041\uffcd\042\uffcd\043\uffcd\044\uffcd\045\uffcd\046\uffcd\047" +
    "\uffcd\052\uffcd\055\uffcd\056\uffcd\061\uffcd\073\uffcd\001\002" +
    "\000\102\003\uffd7\004\uffd7\007\uffd7\011\uffd7\012\uffd7\013" +
    "\uffd7\014\uffd7\015\uffd7\016\uffd7\017\uffd7\020\uffd7\021\uffd7" +
    "\023\uffd7\024\uffd7\026\uffd7\027\uffd7\031\uffd7\036\uffd7\037" +
    "\uffd7\050\uffd7\051\uffd7\053\uffd7\054\uffd7\062\uffd7\063\uffd7" +
    "\064\uffd7\065\uffd7\066\uffd7\067\uffd7\070\uffd7\071\uffd7\072" +
    "\uffd7\001\002\000\004\062\366\001\002\000\004\062\uffe8" +
    "\001\002\000\050\030\uffad\031\uffad\032\uffad\033\uffad\034" +
    "\uffad\035\uffad\040\uffad\041\uffad\042\uffad\043\uffad\044\uffad" +
    "\045\uffad\046\uffad\047\uffad\052\uffad\055\uffad\056\uffad\061" +
    "\uffad\073\uffad\001\002\000\102\003\uff9e\004\uff9e\007\uff9e" +
    "\011\uff9e\012\uff9e\013\uff9e\014\uff9e\015\uff9e\016\uff9e\017" +
    "\uff9e\020\uff9e\021\uff9e\023\uff9e\024\uff9e\026\uff9e\027\uff9e" +
    "\031\uff9e\036\uff9e\037\uff9e\050\uff9e\051\uff9e\053\uff9e\054" +
    "\uff9e\062\uff9e\063\uff9e\064\uff9e\065\uff9e\066\uff9e\067\uff9e" +
    "\070\uff9e\071\uff9e\072\uff9e\001\002\000\102\003\uffdb\004" +
    "\uffdb\007\uffdb\011\uffdb\012\uffdb\013\uffdb\014\uffdb\015\uffdb" +
    "\016\uffdb\017\uffdb\020\uffdb\021\uffdb\023\uffdb\024\uffdb\026" +
    "\uffdb\027\uffdb\031\uffdb\036\uffdb\037\uffdb\050\uffdb\051\uffdb" +
    "\053\uffdb\054\uffdb\062\uffdb\063\uffdb\064\uffdb\065\uffdb\066" +
    "\uffdb\067\uffdb\070\uffdb\071\uffdb\072\uffdb\001\002\000\050" +
    "\030\uffcc\031\uffcc\032\uffcc\033\uffcc\034\uffcc\035\uffcc\040" +
    "\uffcc\041\uffcc\042\uffcc\043\uffcc\044\uffcc\045\uffcc\046\uffcc" +
    "\047\uffcc\052\uffcc\055\uffcc\056\uffcc\061\uffcc\073\uffcc\001" +
    "\002\000\040\030\353\031\354\040\346\041\352\042\351" +
    "\043\347\044\350\045\355\046\uffb6\047\uffb6\052\uffb6\055" +
    "\uffb6\056\uffb6\061\uffb6\073\uffb6\001\002\000\034\026\064" +
    "\027\113\031\047\036\031\037\051\050\054\051\040\062" +
    "\126\063\027\064\036\065\106\066\071\067\067\001\002" +
    "\000\004\055\343\001\002\000\050\030\uffa6\031\uffa6\032" +
    "\uffa6\033\uffa6\034\uffa6\035\uffa6\040\uffa6\041\uffa6\042\uffa6" +
    "\043\uffa6\044\uffa6\045\uffa6\046\uffa6\047\uffa6\052\uffa6\055" +
    "\uffa6\056\uffa6\061\uffa6\073\uffa6\001\002\000\004\062\uffeb" +
    "\001\002\000\050\030\uffaf\031\uffaf\032\uffaf\033\uffaf\034" +
    "\uffaf\035\146\040\uffaf\041\uffaf\042\uffaf\043\uffaf\044\uffaf" +
    "\045\uffaf\046\uffaf\047\uffaf\052\uffaf\055\uffaf\056\uffaf\061" +
    "\uffaf\073\uffaf\001\002\000\004\054\342\001\002\000\020" +
    "\046\uffbe\047\uffbe\052\uffbe\055\uffbe\056\uffbe\061\uffbe\073" +
    "\uffbe\001\002\000\024\026\064\027\113\051\125\062\126" +
    "\063\027\064\036\065\106\066\071\067\067\001\002\000" +
    "\004\051\325\001\002\000\004\062\324\001\002\000\004" +
    "\051\315\001\002\000\102\003\uffd8\004\uffd8\007\uffd8\011" +
    "\uffd8\012\uffd8\013\uffd8\014\uffd8\015\uffd8\016\uffd8\017\uffd8" +
    "\020\uffd8\021\uffd8\023\uffd8\024\uffd8\026\uffd8\027\uffd8\031" +
    "\uffd8\036\uffd8\037\uffd8\050\uffd8\051\uffd8\053\uffd8\054\uffd8" +
    "\062\uffd8\063\uffd8\064\uffd8\065\uffd8\066\uffd8\067\uffd8\070" +
    "\uffd8\071\uffd8\072\uffd8\001\002\000\024\026\064\027\113" +
    "\051\125\062\126\063\027\064\036\065\106\066\071\067" +
    "\067\001\002\000\102\003\uffd5\004\uffd5\007\uffd5\011\uffd5" +
    "\012\uffd5\013\uffd5\014\uffd5\015\uffd5\016\uffd5\017\uffd5\020" +
    "\uffd5\021\uffd5\023\uffd5\024\uffd5\026\uffd5\027\uffd5\031\uffd5" +
    "\036\uffd5\037\uffd5\050\uffd5\051\uffd5\053\uffd5\054\uffd5\062" +
    "\uffd5\063\uffd5\064\uffd5\065\uffd5\066\uffd5\067\uffd5\070\uffd5" +
    "\071\uffd5\072\uffd5\001\002\000\004\062\uffe9\001\002\000" +
    "\102\003\uffd6\004\uffd6\007\uffd6\011\uffd6\012\uffd6\013\uffd6" +
    "\014\uffd6\015\uffd6\016\uffd6\017\uffd6\020\uffd6\021\uffd6\023" +
    "\uffd6\024\uffd6\026\uffd6\027\uffd6\031\uffd6\036\uffd6\037\uffd6" +
    "\050\uffd6\051\uffd6\053\uffd6\054\uffd6\062\uffd6\063\uffd6\064" +
    "\uffd6\065\uffd6\066\uffd6\067\uffd6\070\uffd6\071\uffd6\072\uffd6" +
    "\001\002\000\050\030\uffac\031\uffac\032\uffac\033\uffac\034" +
    "\uffac\035\uffac\040\uffac\041\uffac\042\uffac\043\uffac\044\uffac" +
    "\045\uffac\046\uffac\047\uffac\052\uffac\055\uffac\056\uffac\061" +
    "\uffac\073\uffac\001\002\000\004\051\302\001\002\000\046" +
    "\030\uffa7\031\uffa7\032\uffa7\033\uffa7\034\uffa7\035\uffa7\040" +
    "\uffa7\041\uffa7\042\uffa7\043\uffa7\044\uffa7\045\uffa7\046\uffa7" +
    "\047\uffa7\051\127\055\uffa7\057\267\060\266\001\002\000" +
    "\040\003\263\026\064\027\113\031\047\036\031\037\051" +
    "\050\054\051\040\055\261\062\126\063\027\064\036\065" +
    "\106\066\071\067\067\001\002\000\050\030\uffc8\031\uffc8" +
    "\032\uffc8\033\uffc8\034\uffc8\035\uffc8\040\uffc8\041\uffc8\042" +
    "\uffc8\043\uffc8\044\uffc8\045\uffc8\046\uffc8\047\uffc8\052\uffc8" +
    "\055\uffc8\056\uffc8\061\uffc8\073\uffc8\001\002\000\020\046" +
    "\231\047\uffc2\052\uffc2\055\uffc2\056\uffc2\061\uffc2\073\uffc2" +
    "\001\002\000\104\003\066\004\061\007\115\011\050\012" +
    "\072\013\041\014\063\015\043\016\102\017\056\020\032" +
    "\021\105\023\100\024\052\026\064\027\113\031\047\036" +
    "\031\037\051\050\054\051\040\053\070\054\uffec\055\260" +
    "\062\062\063\027\064\036\065\106\066\071\067\067\070" +
    "\076\071\uffec\072\uffec\001\002\000\050\030\uffc9\031\uffc9" +
    "\032\uffc9\033\uffc9\034\uffc9\035\uffc9\040\uffc9\041\uffc9\042" +
    "\uffc9\043\uffc9\044\uffc9\045\uffc9\046\uffc9\047\uffc9\052\uffc9" +
    "\055\uffc9\056\uffc9\061\uffc9\073\uffc9\001\002\000\076\003" +
    "\066\004\061\007\115\011\050\012\072\013\041\014\063" +
    "\015\043\016\102\017\056\020\032\021\105\023\100\024" +
    "\052\026\064\027\113\031\047\036\031\037\051\050\054" +
    "\051\040\053\070\054\uffec\062\062\063\027\064\036\065" +
    "\106\066\071\067\067\070\076\001\002\000\050\030\uffca" +
    "\031\uffca\032\uffca\033\uffca\034\uffca\035\uffca\040\uffca\041" +
    "\uffca\042\uffca\043\uffca\044\uffca\045\uffca\046\uffca\047\uffca" +
    "\052\uffca\055\uffca\056\uffca\061\uffca\073\uffca\001\002\000" +
    "\004\055\254\001\002\000\050\030\uffa4\031\uffa4\032\uffa4" +
    "\033\uffa4\034\uffa4\035\uffa4\040\uffa4\041\uffa4\042\uffa4\043" +
    "\uffa4\044\uffa4\045\uffa4\046\uffa4\047\uffa4\052\uffa4\055\uffa4" +
    "\056\uffa4\061\uffa4\073\uffa4\001\002\000\102\003\uffdc\004" +
    "\uffdc\007\uffdc\011\uffdc\012\uffdc\013\uffdc\014\uffdc\015\uffdc" +
    "\016\uffdc\017\uffdc\020\uffdc\021\uffdc\023\uffdc\024\uffdc\026" +
    "\uffdc\027\uffdc\031\uffdc\036\uffdc\037\uffdc\050\uffdc\051\uffdc" +
    "\053\uffdc\054\uffdc\062\uffdc\063\uffdc\064\uffdc\065\uffdc\066" +
    "\uffdc\067\uffdc\070\uffdc\071\uffdc\072\uffdc\001\002\000\102" +
    "\003\uff9d\004\uff9d\007\uff9d\011\uff9d\012\uff9d\013\uff9d\014" +
    "\uff9d\015\uff9d\016\uff9d\017\uff9d\020\uff9d\021\uff9d\023\uff9d" +
    "\024\uff9d\026\uff9d\027\uff9d\031\uff9d\036\uff9d\037\uff9d\050" +
    "\uff9d\051\uff9d\053\uff9d\054\uff9d\062\uff9d\063\uff9d\064\uff9d" +
    "\065\uff9d\066\uff9d\067\uff9d\070\uff9d\071\uff9d\072\uff9d\001" +
    "\002\000\004\051\uff96\001\002\000\016\047\227\052\uffc4" +
    "\055\uffc4\056\uffc4\061\uffc4\073\uffc4\001\002\000\004\051" +
    "\220\001\002\000\004\062\165\001\002\000\004\062\uffea" +
    "\001\002\000\102\003\uff9f\004\uff9f\007\uff9f\011\uff9f\012" +
    "\uff9f\013\uff9f\014\uff9f\015\uff9f\016\uff9f\017\uff9f\020\uff9f" +
    "\021\uff9f\023\uff9f\024\uff9f\026\uff9f\027\uff9f\031\uff9f\036" +
    "\uff9f\037\uff9f\050\uff9f\051\uff9f\053\uff9f\054\uff9f\062\uff9f" +
    "\063\uff9f\064\uff9f\065\uff9f\066\uff9f\067\uff9f\070\uff9f\071" +
    "\uff9f\072\uff9f\001\002\000\020\046\uffc0\047\uffc0\052\uffc0" +
    "\055\uffc0\056\uffc0\061\uffc0\073\uffc0\001\002\000\004\062" +
    "\uffe7\001\002\000\050\030\uffcb\031\uffcb\032\uffcb\033\uffcb" +
    "\034\uffcb\035\uffcb\040\uffcb\041\uffcb\042\uffcb\043\uffcb\044" +
    "\uffcb\045\uffcb\046\uffcb\047\uffcb\052\uffcb\055\uffcb\056\uffcb" +
    "\061\uffcb\073\uffcb\001\002\000\102\003\uffd9\004\uffd9\007" +
    "\uffd9\011\uffd9\012\uffd9\013\uffd9\014\uffd9\015\uffd9\016\uffd9" +
    "\017\uffd9\020\uffd9\021\uffd9\023\uffd9\024\uffd9\026\uffd9\027" +
    "\uffd9\031\uffd9\036\uffd9\037\uffd9\050\uffd9\051\uffd9\053\uffd9" +
    "\054\uffd9\062\uffd9\063\uffd9\064\uffd9\065\uffd9\066\uffd9\067" +
    "\uffd9\070\uffd9\071\uffd9\072\uffd9\001\002\000\102\003\uffdd" +
    "\004\uffdd\007\uffdd\011\uffdd\012\uffdd\013\uffdd\014\uffdd\015" +
    "\uffdd\016\uffdd\017\uffdd\020\uffdd\021\uffdd\023\uffdd\024\uffdd" +
    "\026\uffdd\027\uffdd\031\uffdd\036\uffdd\037\uffdd\050\uffdd\051" +
    "\uffdd\053\uffdd\054\uffdd\062\uffdd\063\uffdd\064\uffdd\065\uffdd" +
    "\066\uffdd\067\uffdd\070\uffdd\071\uffdd\072\uffdd\001\002\000" +
    "\102\003\uffa0\004\uffa0\007\uffa0\011\uffa0\012\uffa0\013\uffa0" +
    "\014\uffa0\015\uffa0\016\uffa0\017\uffa0\020\uffa0\021\uffa0\023" +
    "\uffa0\024\uffa0\026\uffa0\027\uffa0\031\uffa0\036\uffa0\037\uffa0" +
    "\050\uffa0\051\uffa0\053\uffa0\054\uffa0\062\uffa0\063\uffa0\064" +
    "\uffa0\065\uffa0\066\uffa0\067\uffa0\070\uffa0\071\uffa0\072\uffa0" +
    "\001\002\000\102\003\uffd4\004\uffd4\007\uffd4\011\uffd4\012" +
    "\uffd4\013\uffd4\014\uffd4\015\uffd4\016\uffd4\017\uffd4\020\uffd4" +
    "\021\uffd4\023\uffd4\024\uffd4\026\uffd4\027\uffd4\031\uffd4\036" +
    "\uffd4\037\uffd4\050\uffd4\051\uffd4\053\uffd4\054\uffd4\062\uffd4" +
    "\063\uffd4\064\uffd4\065\uffd4\066\uffd4\067\uffd4\070\uffd4\071" +
    "\uffd4\072\uffd4\001\002\000\050\030\uffc7\031\uffc7\032\uffc7" +
    "\033\uffc7\034\uffc7\035\uffc7\040\uffc7\041\uffc7\042\uffc7\043" +
    "\uffc7\044\uffc7\045\uffc7\046\uffc7\047\uffc7\052\uffc7\055\uffc7" +
    "\056\uffc7\061\uffc7\073\uffc7\001\002\000\004\055\164\001" +
    "\002\000\004\053\uff9a\001\002\000\102\003\uffda\004\uffda" +
    "\007\uffda\011\uffda\012\uffda\013\uffda\014\uffda\015\uffda\016" +
    "\uffda\017\uffda\020\uffda\021\uffda\023\uffda\024\uffda\026\uffda" +
    "\027\uffda\031\uffda\036\uffda\037\uffda\050\uffda\051\uffda\053" +
    "\uffda\054\uffda\062\uffda\063\uffda\064\uffda\065\uffda\066\uffda" +
    "\067\uffda\070\uffda\071\uffda\072\uffda\001\002\000\102\003" +
    "\066\004\061\007\115\011\050\012\072\013\041\014\063" +
    "\015\043\016\102\017\056\020\032\021\105\023\100\024" +
    "\052\026\064\027\113\031\047\036\031\037\051\050\054" +
    "\051\040\053\070\054\uffec\062\062\063\027\064\036\065" +
    "\106\066\071\067\067\070\076\071\uffec\072\uffec\001\002" +
    "\000\046\030\uffb3\031\uffb3\032\123\033\122\034\121\040" +
    "\uffb3\041\uffb3\042\uffb3\043\uffb3\044\uffb3\045\uffb3\046\uffb3" +
    "\047\uffb3\052\uffb3\055\uffb3\056\uffb3\061\uffb3\073\uffb3\001" +
    "\002\000\032\026\064\027\113\031\047\036\031\037\051" +
    "\051\125\062\126\063\027\064\036\065\106\066\071\067" +
    "\067\001\002\000\032\026\064\027\113\031\047\036\031" +
    "\037\051\051\125\062\126\063\027\064\036\065\106\066" +
    "\071\067\067\001\002\000\032\026\064\027\113\031\047" +
    "\036\031\037\051\051\125\062\126\063\027\064\036\065" +
    "\106\066\071\067\067\001\002\000\050\030\uffb2\031\uffb2" +
    "\032\uffb2\033\uffb2\034\uffb2\035\146\040\uffb2\041\uffb2\042" +
    "\uffb2\043\uffb2\044\uffb2\045\uffb2\046\uffb2\047\uffb2\052\uffb2" +
    "\055\uffb2\056\uffb2\061\uffb2\073\uffb2\001\002\000\034\026" +
    "\064\027\113\031\047\036\031\037\051\050\054\051\040" +
    "\062\126\063\027\064\036\065\106\066\071\067\067\001" +
    "\002\000\054\030\uffa7\031\uffa7\032\uffa7\033\uffa7\034\uffa7" +
    "\035\uffa7\040\uffa7\041\uffa7\042\uffa7\043\uffa7\044\uffa7\045" +
    "\uffa7\046\uffa7\047\uffa7\051\127\052\uffa7\055\uffa7\056\uffa7" +
    "\060\130\061\uffa7\073\uffa7\001\002\000\036\026\064\027" +
    "\113\031\047\036\031\037\051\050\054\051\040\052\136" +
    "\062\126\063\027\064\036\065\106\066\071\067\067\001" +
    "\002\000\034\026\064\027\113\031\047\036\031\037\051" +
    "\050\054\051\040\062\126\063\027\064\036\065\106\066" +
    "\071\067\067\001\002\000\004\061\132\001\002\000\004" +
    "\060\133\001\002\000\034\026\064\027\113\031\047\036" +
    "\031\037\051\050\054\051\040\062\126\063\027\064\036" +
    "\065\106\066\071\067\067\001\002\000\004\061\135\001" +
    "\002\000\050\030\uffdf\031\uffdf\032\uffdf\033\uffdf\034\uffdf" +
    "\035\uffdf\040\uffdf\041\uffdf\042\uffdf\043\uffdf\044\uffdf\045" +
    "\uffdf\046\uffdf\047\uffdf\052\uffdf\055\uffdf\056\uffdf\061\uffdf" +
    "\073\uffdf\001\002\000\050\030\uffc5\031\uffc5\032\uffc5\033" +
    "\uffc5\034\uffc5\035\uffc5\040\uffc5\041\uffc5\042\uffc5\043\uffc5" +
    "\044\uffc5\045\uffc5\046\uffc5\047\uffc5\052\uffc5\055\uffc5\056" +
    "\uffc5\061\uffc5\073\uffc5\001\002\000\006\052\uffa2\056\uffa2" +
    "\001\002\000\006\052\142\056\141\001\002\000\034\026" +
    "\064\027\113\031\047\036\031\037\051\050\054\051\040" +
    "\062\126\063\027\064\036\065\106\066\071\067\067\001" +
    "\002\000\050\030\uffc6\031\uffc6\032\uffc6\033\uffc6\034\uffc6" +
    "\035\uffc6\040\uffc6\041\uffc6\042\uffc6\043\uffc6\044\uffc6\045" +
    "\uffc6\046\uffc6\047\uffc6\052\uffc6\055\uffc6\056\uffc6\061\uffc6" +
    "\073\uffc6\001\002\000\006\052\uffa1\056\uffa1\001\002\000" +
    "\004\052\145\001\002\000\050\030\uffa3\031\uffa3\032\uffa3" +
    "\033\uffa3\034\uffa3\035\uffa3\040\uffa3\041\uffa3\042\uffa3\043" +
    "\uffa3\044\uffa3\045\uffa3\046\uffa3\047\uffa3\052\uffa3\055\uffa3" +
    "\056\uffa3\061\uffa3\073\uffa3\001\002\000\032\026\064\027" +
    "\113\031\047\036\031\037\051\051\125\062\126\063\027" +
    "\064\036\065\106\066\071\067\067\001\002\000\050\030" +
    "\uffae\031\uffae\032\uffae\033\uffae\034\uffae\035\uffae\040\uffae" +
    "\041\uffae\042\uffae\043\uffae\044\uffae\045\uffae\046\uffae\047" +
    "\uffae\052\uffae\055\uffae\056\uffae\061\uffae\073\uffae\001\002" +
    "\000\050\030\uffb1\031\uffb1\032\uffb1\033\uffb1\034\uffb1\035" +
    "\146\040\uffb1\041\uffb1\042\uffb1\043\uffb1\044\uffb1\045\uffb1" +
    "\046\uffb1\047\uffb1\052\uffb1\055\uffb1\056\uffb1\061\uffb1\073" +
    "\uffb1\001\002\000\050\030\uffb0\031\uffb0\032\uffb0\033\uffb0" +
    "\034\uffb0\035\146\040\uffb0\041\uffb0\042\uffb0\043\uffb0\044" +
    "\uffb0\045\uffb0\046\uffb0\047\uffb0\052\uffb0\055\uffb0\056\uffb0" +
    "\061\uffb0\073\uffb0\001\002\000\010\054\uffee\071\uffee\072" +
    "\uffee\001\002\000\004\053\154\001\002\000\076\003\066" +
    "\004\061\007\115\011\050\012\072\013\041\014\063\015" +
    "\043\016\102\017\056\020\032\021\105\023\100\024\052" +
    "\026\064\027\113\031\047\036\031\037\051\050\054\051" +
    "\040\053\070\054\uffec\062\062\063\027\064\036\065\106" +
    "\066\071\067\067\070\076\001\002\000\004\054\156\001" +
    "\002\000\004\010\157\001\002\000\004\051\160\001\002" +
    "\000\034\026\064\027\113\031\047\036\031\037\051\050" +
    "\054\051\040\062\126\063\027\064\036\065\106\066\071" +
    "\067\067\001\002\000\004\052\162\001\002\000\004\055" +
    "\163\001\002\000\102\003\uff99\004\uff99\007\uff99\011\uff99" +
    "\012\uff99\013\uff99\014\uff99\015\uff99\016\uff99\017\uff99\020" +
    "\uff99\021\uff99\023\uff99\024\uff99\026\uff99\027\uff99\031\uff99" +
    "\036\uff99\037\uff99\050\uff99\051\uff99\053\uff99\054\uff99\062" +
    "\uff99\063\uff99\064\uff99\065\uff99\066\uff99\067\uff99\070\uff99" +
    "\071\uff99\072\uff99\001\002\000\102\003\uffde\004\uffde\007" +
    "\uffde\011\uffde\012\uffde\013\uffde\014\uffde\015\uffde\016\uffde" +
    "\017\uffde\020\uffde\021\uffde\023\uffde\024\uffde\026\uffde\027" +
    "\uffde\031\uffde\036\uffde\037\uffde\050\uffde\051\uffde\053\uffde" +
    "\054\uffde\062\uffde\063\uffde\064\uffde\065\uffde\066\uffde\067" +
    "\uffde\070\uffde\071\uffde\072\uffde\001\002\000\010\055\167" +
    "\057\170\060\166\001\002\000\034\026\064\027\113\031" +
    "\047\036\031\037\051\050\054\051\040\062\126\063\027" +
    "\064\036\065\106\066\071\067\067\001\002\000\102\003" +
    "\uffce\004\uffce\007\uffce\011\uffce\012\uffce\013\uffce\014\uffce" +
    "\015\uffce\016\uffce\017\uffce\020\uffce\021\uffce\023\uffce\024" +
    "\uffce\026\uffce\027\uffce\031\uffce\036\uffce\037\uffce\050\uffce" +
    "\051\uffce\053\uffce\054\uffce\062\uffce\063\uffce\064\uffce\065" +
    "\uffce\066\uffce\067\uffce\070\uffce\071\uffce\072\uffce\001\002" +
    "\000\034\026\064\027\113\031\047\036\031\037\051\050" +
    "\054\051\040\062\126\063\027\064\036\065\106\066\071" +
    "\067\067\001\002\000\004\055\172\001\002\000\102\003" +
    "\uffcf\004\uffcf\007\uffcf\011\uffcf\012\uffcf\013\uffcf\014\uffcf" +
    "\015\uffcf\016\uffcf\017\uffcf\020\uffcf\021\uffcf\023\uffcf\024" +
    "\uffcf\026\uffcf\027\uffcf\031\uffcf\036\uffcf\037\uffcf\050\uffcf" +
    "\051\uffcf\053\uffcf\054\uffcf\062\uffcf\063\uffcf\064\uffcf\065" +
    "\uffcf\066\uffcf\067\uffcf\070\uffcf\071\uffcf\072\uffcf\001\002" +
    "\000\004\061\174\001\002\000\004\060\175\001\002\000" +
    "\034\026\064\027\113\031\047\036\031\037\051\050\054" +
    "\051\040\062\126\063\027\064\036\065\106\066\071\067" +
    "\067\001\002\000\004\061\177\001\002\000\006\055\200" +
    "\057\201\001\002\000\102\003\uffe6\004\uffe6\007\uffe6\011" +
    "\uffe6\012\uffe6\013\uffe6\014\uffe6\015\uffe6\016\uffe6\017\uffe6" +
    "\020\uffe6\021\uffe6\023\uffe6\024\uffe6\026\uffe6\027\uffe6\031" +
    "\uffe6\036\uffe6\037\uffe6\050\uffe6\051\uffe6\053\uffe6\054\uffe6" +
    "\062\uffe6\063\uffe6\064\uffe6\065\uffe6\066\uffe6\067\uffe6\070" +
    "\uffe6\071\uffe6\072\uffe6\001\002\000\004\060\203\001\002" +
    "\000\004\055\217\001\002\000\004\060\205\001\002\000" +
    "\006\056\213\061\214\001\002\000\034\026\064\027\113" +
    "\031\047\036\031\037\051\050\054\051\040\062\126\063" +
    "\027\064\036\065\106\066\071\067\067\001\002\000\006" +
    "\056\211\061\uffe1\001\002\000\004\061\210\001\002\000" +
    "\006\056\uffe2\061\uffe2\001\002\000\034\026\064\027\113" +
    "\031\047\036\031\037\051\050\054\051\040\062\126\063" +
    "\027\064\036\065\106\066\071\067\067\001\002\000\004" +
    "\061\uffe0\001\002\000\004\060\205\001\002\000\004\055" +
    "\uffe4\001\002\000\004\061\216\001\002\000\004\055\uffe3" +
    "\001\002\000\102\003\uffe5\004\uffe5\007\uffe5\011\uffe5\012" +
    "\uffe5\013\uffe5\014\uffe5\015\uffe5\016\uffe5\017\uffe5\020\uffe5" +
    "\021\uffe5\023\uffe5\024\uffe5\026\uffe5\027\uffe5\031\uffe5\036" +
    "\uffe5\037\uffe5\050\uffe5\051\uffe5\053\uffe5\054\uffe5\062\uffe5" +
    "\063\uffe5\064\uffe5\065\uffe5\066\uffe5\067\uffe5\070\uffe5\071" +
    "\uffe5\072\uffe5\001\002\000\006\003\222\062\221\001\002" +
    "\000\004\052\225\001\002\000\004\052\223\001\002\000" +
    "\004\055\224\001\002\000\102\003\uff89\004\uff89\007\uff89" +
    "\011\uff89\012\uff89\013\uff89\014\uff89\015\uff89\016\uff89\017" +
    "\uff89\020\uff89\021\uff89\023\uff89\024\uff89\026\uff89\027\uff89" +
    "\031\uff89\036\uff89\037\uff89\050\uff89\051\uff89\053\uff89\054" +
    "\uff89\062\uff89\063\uff89\064\uff89\065\uff89\066\uff89\067\uff89" +
    "\070\uff89\071\uff89\072\uff89\001\002\000\004\055\226\001" +
    "\002\000\102\003\uff8a\004\uff8a\007\uff8a\011\uff8a\012\uff8a" +
    "\013\uff8a\014\uff8a\015\uff8a\016\uff8a\017\uff8a\020\uff8a\021" +
    "\uff8a\023\uff8a\024\uff8a\026\uff8a\027\uff8a\031\uff8a\036\uff8a" +
    "\037\uff8a\050\uff8a\051\uff8a\053\uff8a\054\uff8a\062\uff8a\063" +
    "\uff8a\064\uff8a\065\uff8a\066\uff8a\067\uff8a\070\uff8a\071\uff8a" +
    "\072\uff8a\001\002\000\034\026\064\027\113\031\047\036" +
    "\031\037\051\050\054\051\040\062\126\063\027\064\036" +
    "\065\106\066\071\067\067\001\002\000\020\046\231\047" +
    "\uffc3\052\uffc3\055\uffc3\056\uffc3\061\uffc3\073\uffc3\001\002" +
    "\000\034\026\064\027\113\031\047\036\031\037\051\050" +
    "\054\051\040\062\126\063\027\064\036\065\106\066\071" +
    "\067\067\001\002\000\020\046\uffc1\047\uffc1\052\uffc1\055" +
    "\uffc1\056\uffc1\061\uffc1\073\uffc1\001\002\000\004\051\234" +
    "\001\002\000\034\026\064\027\113\031\047\036\031\037" +
    "\051\050\054\051\040\062\126\063\027\064\036\065\106" +
    "\066\071\067\067\001\002\000\004\052\236\001\002\000" +
    "\004\053\237\001\002\000\010\054\uff92\071\244\072\240" +
    "\001\002\000\004\073\252\001\002\000\004\054\uff93\001" +
    "\002\000\010\054\uff92\071\244\072\240\001\002\000\004" +
    "\054\250\001\002\000\034\026\064\027\113\031\047\036" +
    "\031\037\051\050\054\051\040\062\126\063\027\064\036" +
    "\065\106\066\071\067\067\001\002\000\004\073\246\001" +
    "\002\000\102\003\066\004\061\007\115\011\050\012\072" +
    "\013\041\014\063\015\043\016\102\017\056\020\032\021" +
    "\105\023\100\024\052\026\064\027\113\031\047\036\031" +
    "\037\051\050\054\051\040\053\070\054\uffec\062\062\063" +
    "\027\064\036\065\106\066\071\067\067\070\076\071\uffec" +
    "\072\uffec\001\002\000\010\054\uff91\071\uff91\072\uff91\001" +
    "\002\000\102\003\uff95\004\uff95\007\uff95\011\uff95\012\uff95" +
    "\013\uff95\014\uff95\015\uff95\016\uff95\017\uff95\020\uff95\021" +
    "\uff95\023\uff95\024\uff95\026\uff95\027\uff95\031\uff95\036\uff95" +
    "\037\uff95\050\uff95\051\uff95\053\uff95\054\uff95\062\uff95\063" +
    "\uff95\064\uff95\065\uff95\066\uff95\067\uff95\070\uff95\071\uff95" +
    "\072\uff95\001\002\000\004\054\uff94\001\002\000\076\003" +
    "\066\004\061\007\115\011\050\012\072\013\041\014\063" +
    "\015\043\016\102\017\056\020\032\021\105\023\100\024" +
    "\052\026\064\027\113\031\047\036\031\037\051\050\054" +
    "\051\040\053\070\054\uffec\062\062\063\027\064\036\065" +
    "\106\066\071\067\067\070\076\001\002\000\004\054\uff90" +
    "\001\002\000\102\003\uff8f\004\uff8f\007\uff8f\011\uff8f\012" +
    "\uff8f\013\uff8f\014\uff8f\015\uff8f\016\uff8f\017\uff8f\020\uff8f" +
    "\021\uff8f\023\uff8f\024\uff8f\026\uff8f\027\uff8f\031\uff8f\036" +
    "\uff8f\037\uff8f\050\uff8f\051\uff8f\053\uff8f\054\uff8f\062\uff8f" +
    "\063\uff8f\064\uff8f\065\uff8f\066\uff8f\067\uff8f\070\uff8f\071" +
    "\uff8f\072\uff8f\001\002\000\004\054\256\001\002\000\102" +
    "\003\uffd3\004\uffd3\007\uffd3\011\uffd3\012\uffd3\013\uffd3\014" +
    "\uffd3\015\uffd3\016\uffd3\017\uffd3\020\uffd3\021\uffd3\023\uffd3" +
    "\024\uffd3\026\uffd3\027\uffd3\031\uffd3\036\uffd3\037\uffd3\050" +
    "\uffd3\051\uffd3\053\uffd3\054\uffd3\062\uffd3\063\uffd3\064\uffd3" +
    "\065\uffd3\066\uffd3\067\uffd3\070\uffd3\071\uffd3\072\uffd3\001" +
    "\002\000\010\054\uffed\071\uffed\072\uffed\001\002\000\102" +
    "\003\uffd2\004\uffd2\007\uffd2\011\uffd2\012\uffd2\013\uffd2\014" +
    "\uffd2\015\uffd2\016\uffd2\017\uffd2\020\uffd2\021\uffd2\023\uffd2" +
    "\024\uffd2\026\uffd2\027\uffd2\031\uffd2\036\uffd2\037\uffd2\050" +
    "\uffd2\051\uffd2\053\uffd2\054\uffd2\062\uffd2\063\uffd2\064\uffd2" +
    "\065\uffd2\066\uffd2\067\uffd2\070\uffd2\071\uffd2\072\uffd2\001" +
    "\002\000\102\003\uff8c\004\uff8c\007\uff8c\011\uff8c\012\uff8c" +
    "\013\uff8c\014\uff8c\015\uff8c\016\uff8c\017\uff8c\020\uff8c\021" +
    "\uff8c\023\uff8c\024\uff8c\026\uff8c\027\uff8c\031\uff8c\036\uff8c" +
    "\037\uff8c\050\uff8c\051\uff8c\053\uff8c\054\uff8c\062\uff8c\063" +
    "\uff8c\064\uff8c\065\uff8c\066\uff8c\067\uff8c\070\uff8c\071\uff8c" +
    "\072\uff8c\001\002\000\004\055\265\001\002\000\004\055" +
    "\264\001\002\000\102\003\uff8b\004\uff8b\007\uff8b\011\uff8b" +
    "\012\uff8b\013\uff8b\014\uff8b\015\uff8b\016\uff8b\017\uff8b\020" +
    "\uff8b\021\uff8b\023\uff8b\024\uff8b\026\uff8b\027\uff8b\031\uff8b" +
    "\036\uff8b\037\uff8b\050\uff8b\051\uff8b\053\uff8b\054\uff8b\062" +
    "\uff8b\063\uff8b\064\uff8b\065\uff8b\066\uff8b\067\uff8b\070\uff8b" +
    "\071\uff8b\072\uff8b\001\002\000\102\003\uff8d\004\uff8d\007" +
    "\uff8d\011\uff8d\012\uff8d\013\uff8d\014\uff8d\015\uff8d\016\uff8d" +
    "\017\uff8d\020\uff8d\021\uff8d\023\uff8d\024\uff8d\026\uff8d\027" +
    "\uff8d\031\uff8d\036\uff8d\037\uff8d\050\uff8d\051\uff8d\053\uff8d" +
    "\054\uff8d\062\uff8d\063\uff8d\064\uff8d\065\uff8d\066\uff8d\067" +
    "\uff8d\070\uff8d\071\uff8d\072\uff8d\001\002\000\034\026\064" +
    "\027\113\031\047\036\031\037\051\050\054\051\040\062" +
    "\126\063\027\064\036\065\106\066\071\067\067\001\002" +
    "\000\034\026\064\027\113\031\047\036\031\037\051\050" +
    "\054\051\040\062\126\063\027\064\036\065\106\066\071" +
    "\067\067\001\002\000\004\055\271\001\002\000\102\003" +
    "\uffd0\004\uffd0\007\uffd0\011\uffd0\012\uffd0\013\uffd0\014\uffd0" +
    "\015\uffd0\016\uffd0\017\uffd0\020\uffd0\021\uffd0\023\uffd0\024" +
    "\uffd0\026\uffd0\027\uffd0\031\uffd0\036\uffd0\037\uffd0\050\uffd0" +
    "\051\uffd0\053\uffd0\054\uffd0\062\uffd0\063\uffd0\064\uffd0\065" +
    "\uffd0\066\uffd0\067\uffd0\070\uffd0\071\uffd0\072\uffd0\001\002" +
    "\000\004\061\273\001\002\000\004\060\274\001\002\000" +
    "\034\026\064\027\113\031\047\036\031\037\051\050\054" +
    "\051\040\062\126\063\027\064\036\065\106\066\071\067" +
    "\067\001\002\000\004\061\276\001\002\000\042\030\uffdf" +
    "\031\uffdf\032\uffdf\033\uffdf\034\uffdf\035\uffdf\040\uffdf\041" +
    "\uffdf\042\uffdf\043\uffdf\044\uffdf\045\uffdf\046\uffdf\047\uffdf" +
    "\055\uffdf\057\277\001\002\000\034\026\064\027\113\031" +
    "\047\036\031\037\051\050\054\051\040\062\126\063\027" +
    "\064\036\065\106\066\071\067\067\001\002\000\004\055" +
    "\301\001\002\000\102\003\uffd1\004\uffd1\007\uffd1\011\uffd1" +
    "\012\uffd1\013\uffd1\014\uffd1\015\uffd1\016\uffd1\017\uffd1\020" +
    "\uffd1\021\uffd1\023\uffd1\024\uffd1\026\uffd1\027\uffd1\031\uffd1" +
    "\036\uffd1\037\uffd1\050\uffd1\051\uffd1\053\uffd1\054\uffd1\062" +
    "\uffd1\063\uffd1\064\uffd1\065\uffd1\066\uffd1\067\uffd1\070\uffd1" +
    "\071\uffd1\072\uffd1\001\002\000\034\026\064\027\113\031" +
    "\047\036\031\037\051\050\054\051\040\062\126\063\027" +
    "\064\036\065\106\066\071\067\067\001\002\000\004\052" +
    "\304\001\002\000\004\053\305\001\002\000\076\003\066" +
    "\004\061\007\115\011\050\012\072\013\041\014\063\015" +
    "\043\016\102\017\056\020\032\021\105\023\100\024\052" +
    "\026\064\027\113\031\047\036\031\037\051\050\054\051" +
    "\040\053\070\054\uffec\062\062\063\027\064\036\065\106" +
    "\066\071\067\067\070\076\001\002\000\004\054\307\001" +
    "\002\000\104\003\uff9c\004\uff9c\006\310\007\uff9c\011\uff9c" +
    "\012\uff9c\013\uff9c\014\uff9c\015\uff9c\016\uff9c\017\uff9c\020" +
    "\uff9c\021\uff9c\023\uff9c\024\uff9c\026\uff9c\027\uff9c\031\uff9c" +
    "\036\uff9c\037\uff9c\050\uff9c\051\uff9c\053\uff9c\054\uff9c\062" +
    "\uff9c\063\uff9c\064\uff9c\065\uff9c\066\uff9c\067\uff9c\070\uff9c" +
    "\071\uff9c\072\uff9c\001\002\000\004\053\311\001\002\000" +
    "\076\003\066\004\061\007\115\011\050\012\072\013\041" +
    "\014\063\015\043\016\102\017\056\020\032\021\105\023" +
    "\100\024\052\026\064\027\113\031\047\036\031\037\051" +
    "\050\054\051\040\053\070\054\uffec\062\062\063\027\064" +
    "\036\065\106\066\071\067\067\070\076\001\002\000\004" +
    "\054\313\001\002\000\102\003\uff9b\004\uff9b\007\uff9b\011" +
    "\uff9b\012\uff9b\013\uff9b\014\uff9b\015\uff9b\016\uff9b\017\uff9b" +
    "\020\uff9b\021\uff9b\023\uff9b\024\uff9b\026\uff9b\027\uff9b\031" +
    "\uff9b\036\uff9b\037\uff9b\050\uff9b\051\uff9b\053\uff9b\054\uff9b" +
    "\062\uff9b\063\uff9b\064\uff9b\065\uff9b\066\uff9b\067\uff9b\070" +
    "\uff9b\071\uff9b\072\uff9b\001\002\000\020\046\uffbf\047\uffbf" +
    "\052\uffbf\055\uffbf\056\uffbf\061\uffbf\073\uffbf\001\002\000" +
    "\036\003\317\026\064\027\113\031\047\036\031\037\051" +
    "\050\054\051\040\062\126\063\027\064\036\065\106\066" +
    "\071\067\067\001\002\000\004\052\322\001\002\000\004" +
    "\052\320\001\002\000\004\055\321\001\002\000\102\003" +
    "\uff87\004\uff87\007\uff87\011\uff87\012\uff87\013\uff87\014\uff87" +
    "\015\uff87\016\uff87\017\uff87\020\uff87\021\uff87\023\uff87\024" +
    "\uff87\026\uff87\027\uff87\031\uff87\036\uff87\037\uff87\050\uff87" +
    "\051\uff87\053\uff87\054\uff87\062\uff87\063\uff87\064\uff87\065" +
    "\uff87\066\uff87\067\uff87\070\uff87\071\uff87\072\uff87\001\002" +
    "\000\004\055\323\001\002\000\102\003\uff88\004\uff88\007" +
    "\uff88\011\uff88\012\uff88\013\uff88\014\uff88\015\uff88\016\uff88" +
    "\017\uff88\020\uff88\021\uff88\023\uff88\024\uff88\026\uff88\027" +
    "\uff88\031\uff88\036\uff88\037\uff88\050\uff88\051\uff88\053\uff88" +
    "\054\uff88\062\uff88\063\uff88\064\uff88\065\uff88\066\uff88\067" +
    "\uff88\070\uff88\071\uff88\072\uff88\001\002\000\050\030\uffa9" +
    "\031\uffa9\032\uffa9\033\uffa9\034\uffa9\035\uffa9\040\uffa9\041" +
    "\uffa9\042\uffa9\043\uffa9\044\uffa9\045\uffa9\046\uffa9\047\uffa9" +
    "\052\uffa9\055\uffa9\056\uffa9\061\uffa9\073\uffa9\001\002\000" +
    "\014\015\043\016\102\017\056\020\032\021\105\001\002" +
    "\000\034\026\064\027\113\031\047\036\031\037\051\050" +
    "\054\051\040\062\126\063\027\064\036\065\106\066\071" +
    "\067\067\001\002\000\004\062\330\001\002\000\006\055" +
    "\167\057\170\001\002\000\004\055\332\001\002\000\034" +
    "\026\064\027\113\031\047\036\031\037\051\050\054\051" +
    "\040\062\126\063\027\064\036\065\106\066\071\067\067" +
    "\001\002\000\004\052\334\001\002\000\004\053\335\001" +
    "\002\000\076\003\uff98\004\uff98\007\uff98\011\uff98\012\uff98" +
    "\013\uff98\014\uff98\015\uff98\016\uff98\017\uff98\020\uff98\021" +
    "\uff98\023\uff98\024\uff98\026\uff98\027\uff98\031\uff98\036\uff98" +
    "\037\uff98\050\uff98\051\uff98\053\uff98\054\uff98\062\uff98\063" +
    "\uff98\064\uff98\065\uff98\066\uff98\067\uff98\070\uff98\001\002" +
    "\000\076\003\066\004\061\007\115\011\050\012\072\013" +
    "\041\014\063\015\043\016\102\017\056\020\032\021\105" +
    "\023\100\024\052\026\064\027\113\031\047\036\031\037" +
    "\051\050\054\051\040\053\070\054\uffec\062\062\063\027" +
    "\064\036\065\106\066\071\067\067\070\076\001\002\000" +
    "\004\054\340\001\002\000\102\003\uff97\004\uff97\007\uff97" +
    "\011\uff97\012\uff97\013\uff97\014\uff97\015\uff97\016\uff97\017" +
    "\uff97\020\uff97\021\uff97\023\uff97\024\uff97\026\uff97\027\uff97" +
    "\031\uff97\036\uff97\037\uff97\050\uff97\051\uff97\053\uff97\054" +
    "\uff97\062\uff97\063\uff97\064\uff97\065\uff97\066\uff97\067\uff97" +
    "\070\uff97\071\uff97\072\uff97\001\002\000\050\030\uffab\031" +
    "\uffab\032\uffab\033\uffab\034\uffab\035\uffab\040\uffab\041\uffab" +
    "\042\uffab\043\uffab\044\uffab\045\uffab\046\uffab\047\uffab\052" +
    "\uffab\055\uffab\056\uffab\061\uffab\073\uffab\001\002\000\004" +
    "\002\uffff\001\002\000\102\003\uff8e\004\uff8e\007\uff8e\011" +
    "\uff8e\012\uff8e\013\uff8e\014\uff8e\015\uff8e\016\uff8e\017\uff8e" +
    "\020\uff8e\021\uff8e\023\uff8e\024\uff8e\026\uff8e\027\uff8e\031" +
    "\uff8e\036\uff8e\037\uff8e\050\uff8e\051\uff8e\053\uff8e\054\uff8e" +
    "\062\uff8e\063\uff8e\064\uff8e\065\uff8e\066\uff8e\067\uff8e\070" +
    "\uff8e\071\uff8e\072\uff8e\001\002\000\006\047\227\052\345" +
    "\001\002\000\020\046\uffbd\047\uffbd\052\uffbd\055\uffbd\056" +
    "\uffbd\061\uffbd\073\uffbd\001\002\000\032\026\064\027\113" +
    "\031\047\036\031\037\051\051\125\062\126\063\027\064" +
    "\036\065\106\066\071\067\067\001\002\000\032\026\064" +
    "\027\113\031\047\036\031\037\051\051\125\062\126\063" +
    "\027\064\036\065\106\066\071\067\067\001\002\000\032" +
    "\026\064\027\113\031\047\036\031\037\051\051\125\062" +
    "\126\063\027\064\036\065\106\066\071\067\067\001\002" +
    "\000\032\026\064\027\113\031\047\036\031\037\051\051" +
    "\125\062\126\063\027\064\036\065\106\066\071\067\067" +
    "\001\002\000\032\026\064\027\113\031\047\036\031\037" +
    "\051\051\125\062\126\063\027\064\036\065\106\066\071" +
    "\067\067\001\002\000\032\026\064\027\113\031\047\036" +
    "\031\037\051\051\125\062\126\063\027\064\036\065\106" +
    "\066\071\067\067\001\002\000\032\026\064\027\113\031" +
    "\047\036\031\037\051\051\125\062\126\063\027\064\036" +
    "\065\106\066\071\067\067\001\002\000\032\026\064\027" +
    "\113\031\047\036\031\037\051\051\125\062\126\063\027" +
    "\064\036\065\106\066\071\067\067\001\002\000\024\030" +
    "\353\031\354\046\uffb7\047\uffb7\052\uffb7\055\uffb7\056\uffb7" +
    "\061\uffb7\073\uffb7\001\002\000\046\030\uffb4\031\uffb4\032" +
    "\123\033\122\034\121\040\uffb4\041\uffb4\042\uffb4\043\uffb4" +
    "\044\uffb4\045\uffb4\046\uffb4\047\uffb4\052\uffb4\055\uffb4\056" +
    "\uffb4\061\uffb4\073\uffb4\001\002\000\046\030\uffb5\031\uffb5" +
    "\032\123\033\122\034\121\040\uffb5\041\uffb5\042\uffb5\043" +
    "\uffb5\044\uffb5\045\uffb5\046\uffb5\047\uffb5\052\uffb5\055\uffb5" +
    "\056\uffb5\061\uffb5\073\uffb5\001\002\000\024\030\353\031" +
    "\354\046\uffbb\047\uffbb\052\uffbb\055\uffbb\056\uffbb\061\uffbb" +
    "\073\uffbb\001\002\000\024\030\353\031\354\046\uffba\047" +
    "\uffba\052\uffba\055\uffba\056\uffba\061\uffba\073\uffba\001\002" +
    "\000\024\030\353\031\354\046\uffb8\047\uffb8\052\uffb8\055" +
    "\uffb8\056\uffb8\061\uffb8\073\uffb8\001\002\000\024\030\353" +
    "\031\354\046\uffb9\047\uffb9\052\uffb9\055\uffb9\056\uffb9\061" +
    "\uffb9\073\uffb9\001\002\000\024\030\353\031\354\046\uffbc" +
    "\047\uffbc\052\uffbc\055\uffbc\056\uffbc\061\uffbc\073\uffbc\001" +
    "\002\000\050\030\uffaa\031\uffaa\032\uffaa\033\uffaa\034\uffaa" +
    "\035\uffaa\040\uffaa\041\uffaa\042\uffaa\043\uffaa\044\uffaa\045" +
    "\uffaa\046\uffaa\047\uffaa\052\uffaa\055\uffaa\056\uffaa\061\uffaa" +
    "\073\uffaa\001\002\000\004\051\370\001\002\000\016\015" +
    "\ufffb\016\ufffb\017\ufffb\020\ufffb\021\ufffb\052\372\001\002" +
    "\000\014\015\043\016\102\017\056\020\032\021\105\001" +
    "\002\000\004\053\ufff8\001\002\000\004\053\374\001\002" +
    "\000\076\003\066\004\061\007\115\011\050\012\072\013" +
    "\041\014\063\015\043\016\102\017\056\020\032\021\105" +
    "\023\100\024\052\026\064\027\113\031\047\036\031\037" +
    "\051\050\054\051\040\053\070\054\uffec\062\062\063\027" +
    "\064\036\065\106\066\071\067\067\070\076\001\002\000" +
    "\004\054\376\001\002\000\020\002\ufff7\003\ufff7\015\ufff7" +
    "\016\ufff7\017\ufff7\020\ufff7\022\ufff7\001\002\000\006\052" +
    "\u0104\056\u0103\001\002\000\004\062\u0102\001\002\000\006" +
    "\052\ufff1\056\ufff1\001\002\000\006\052\uffef\056\uffef\001" +
    "\002\000\014\015\043\016\102\017\056\020\032\021\105" +
    "\001\002\000\004\053\ufffa\001\002\000\004\053\u0106\001" +
    "\002\000\076\003\066\004\061\007\115\011\050\012\072" +
    "\013\041\014\063\015\043\016\102\017\056\020\032\021" +
    "\105\023\100\024\052\026\064\027\113\031\047\036\031" +
    "\037\051\050\054\051\040\053\070\054\uffec\062\062\063" +
    "\027\064\036\065\106\066\071\067\067\070\076\001\002" +
    "\000\004\054\u0108\001\002\000\020\002\ufff9\003\ufff9\015" +
    "\ufff9\016\ufff9\017\ufff9\020\ufff9\022\ufff9\001\002\000\006" +
    "\052\ufff0\056\ufff0\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0107\000\010\002\007\005\011\037\005\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\002\015\005\011\037" +
    "\005\001\001\000\010\002\014\005\011\037\005\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\055\023\001\001\000" +
    "\100\003\044\004\034\006\115\007\116\010\107\011\073" +
    "\012\113\013\036\014\117\015\043\016\032\017\025\020" +
    "\045\021\076\022\064\023\103\024\057\025\106\026\110" +
    "\027\102\030\033\031\052\032\027\033\056\034\054\035" +
    "\111\036\100\040\024\047\041\050\072\051\074\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\036\012\143\013\036\014\117" +
    "\015\043\016\032\017\025\020\045\021\343\022\064\023" +
    "\103\024\057\040\024\047\041\050\072\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\017\340" +
    "\040\024\047\041\050\072\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\017\313\040\024\047\041\050\072\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\036\012\261\013" +
    "\036\014\117\015\043\016\032\017\025\020\045\021\076" +
    "\022\064\023\103\024\057\040\024\047\041\050\072\001" +
    "\001\000\002\001\001\000\002\001\001\000\100\003\256" +
    "\004\034\006\115\007\116\010\107\011\073\012\113\013" +
    "\036\014\117\015\043\016\032\017\025\020\045\021\076" +
    "\022\064\023\103\024\057\025\106\026\110\027\102\030" +
    "\033\031\052\032\027\033\056\034\054\035\111\036\100" +
    "\040\024\047\041\050\072\051\074\001\001\000\002\001" +
    "\001\000\100\003\254\004\034\006\115\007\116\010\107" +
    "\011\073\012\113\013\036\014\117\015\043\016\032\017" +
    "\025\020\045\021\076\022\064\023\103\024\057\025\106" +
    "\026\110\027\102\030\033\031\052\032\027\033\056\034" +
    "\054\035\111\036\100\040\024\047\041\050\072\051\074" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\063\232" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\061\152\001\001\000" +
    "\002\001\001\000\100\003\151\004\034\006\115\007\116" +
    "\010\107\011\073\012\113\013\036\014\117\015\043\016" +
    "\032\017\025\020\045\021\076\022\064\023\103\024\057" +
    "\025\106\026\110\027\102\030\033\031\052\032\027\033" +
    "\056\034\054\035\111\036\100\040\024\047\041\050\072" +
    "\051\074\001\001\000\002\001\001\000\020\015\150\016" +
    "\032\017\025\024\057\040\024\047\041\050\072\001\001" +
    "\000\020\015\147\016\032\017\025\024\057\040\024\047" +
    "\041\050\072\001\001\000\020\015\123\016\032\017\025" +
    "\024\057\040\024\047\041\050\072\001\001\000\002\001" +
    "\001\000\036\012\143\013\036\014\117\015\043\016\032" +
    "\017\025\020\045\021\076\022\064\023\103\024\057\040" +
    "\024\047\041\050\072\001\001\000\002\001\001\000\040" +
    "\012\136\013\036\014\117\015\043\016\032\017\025\020" +
    "\045\021\076\022\064\023\103\024\057\040\024\046\137" +
    "\047\041\050\072\001\001\000\036\012\130\013\036\014" +
    "\117\015\043\016\032\017\025\020\045\021\076\022\064" +
    "\023\103\024\057\040\024\047\041\050\072\001\001\000" +
    "\002\001\001\000\002\001\001\000\036\012\133\013\036" +
    "\014\117\015\043\016\032\017\025\020\045\021\076\022" +
    "\064\023\103\024\057\040\024\047\041\050\072\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\036\012\142\013\036" +
    "\014\117\015\043\016\032\017\025\020\045\021\076\022" +
    "\064\023\103\024\057\040\024\047\041\050\072\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\016\146\017\025\024\057\040\024" +
    "\047\041\050\072\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\100\003\154\004\034\006\115\007\116\010\107\011" +
    "\073\012\113\013\036\014\117\015\043\016\032\017\025" +
    "\020\045\021\076\022\064\023\103\024\057\025\106\026" +
    "\110\027\102\030\033\031\052\032\027\033\056\034\054" +
    "\035\111\036\100\040\024\047\041\050\072\051\074\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\036\012\160\013\036\014\117\015\043\016\032\017" +
    "\025\020\045\021\076\022\064\023\103\024\057\040\024" +
    "\047\041\050\072\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\036\012\172\013\036\014\117\015\043\016\032\017" +
    "\025\020\045\021\076\022\064\023\103\024\057\040\024" +
    "\047\041\050\072\001\001\000\002\001\001\000\036\012" +
    "\170\013\036\014\117\015\043\016\032\017\025\020\045" +
    "\021\076\022\064\023\103\024\057\040\024\047\041\050" +
    "\072\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\036\012\175\013\036\014" +
    "\117\015\043\016\032\017\025\020\045\021\076\022\064" +
    "\023\103\024\057\040\024\047\041\050\072\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\042\201\001\001\000\002\001\001\000\004\043\203\001" +
    "\001\000\002\001\001\000\040\012\205\013\036\014\117" +
    "\015\043\016\032\017\025\020\045\021\076\022\064\023" +
    "\103\024\057\040\024\041\206\047\041\050\072\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\040\012\205\013\036\014\117\015\043\016\032\017\025" +
    "\020\045\021\076\022\064\023\103\024\057\040\024\041" +
    "\211\047\041\050\072\001\001\000\002\001\001\000\004" +
    "\043\214\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\013\036" +
    "\014\117\015\043\016\032\017\025\020\045\022\227\023" +
    "\103\024\057\040\024\047\041\050\072\001\001\000\002" +
    "\001\001\000\030\013\036\014\117\015\043\016\032\017" +
    "\025\020\045\023\231\024\057\040\024\047\041\050\072" +
    "\001\001\000\002\001\001\000\002\001\001\000\036\012" +
    "\234\013\036\014\117\015\043\016\032\017\025\020\045" +
    "\021\076\022\064\023\103\024\057\040\024\047\041\050" +
    "\072\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\052\242\053\241\054\240\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\052\250\053\241\054\240\001\001" +
    "\000\002\001\001\000\036\012\244\013\036\014\117\015" +
    "\043\016\032\017\025\020\045\021\076\022\064\023\103" +
    "\024\057\040\024\047\041\050\072\001\001\000\002\001" +
    "\001\000\100\003\246\004\034\006\115\007\116\010\107" +
    "\011\073\012\113\013\036\014\117\015\043\016\032\017" +
    "\025\020\045\021\076\022\064\023\103\024\057\025\106" +
    "\026\110\027\102\030\033\031\052\032\027\033\056\034" +
    "\054\035\111\036\100\040\024\047\041\050\072\051\074" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\100\003\252\004\034\006\115\007\116\010\107" +
    "\011\073\012\113\013\036\014\117\015\043\016\032\017" +
    "\025\020\045\021\076\022\064\023\103\024\057\025\106" +
    "\026\110\027\102\030\033\031\052\032\027\033\056\034" +
    "\054\035\111\036\100\040\024\047\041\050\072\051\074" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\036\012\271\013\036" +
    "\014\117\015\043\016\032\017\025\020\045\021\076\022" +
    "\064\023\103\024\057\040\024\047\041\050\072\001\001" +
    "\000\036\012\267\013\036\014\117\015\043\016\032\017" +
    "\025\020\045\021\076\022\064\023\103\024\057\040\024" +
    "\047\041\050\072\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\036\012\274" +
    "\013\036\014\117\015\043\016\032\017\025\020\045\021" +
    "\076\022\064\023\103\024\057\040\024\047\041\050\072" +
    "\001\001\000\002\001\001\000\002\001\001\000\036\012" +
    "\277\013\036\014\117\015\043\016\032\017\025\020\045" +
    "\021\076\022\064\023\103\024\057\040\024\047\041\050" +
    "\072\001\001\000\002\001\001\000\002\001\001\000\036" +
    "\012\302\013\036\014\117\015\043\016\032\017\025\020" +
    "\045\021\076\022\064\023\103\024\057\040\024\047\041" +
    "\050\072\001\001\000\002\001\001\000\002\001\001\000" +
    "\100\003\305\004\034\006\115\007\116\010\107\011\073" +
    "\012\113\013\036\014\117\015\043\016\032\017\025\020" +
    "\045\021\076\022\064\023\103\024\057\025\106\026\110" +
    "\027\102\030\033\031\052\032\027\033\056\034\054\035" +
    "\111\036\100\040\024\047\041\050\072\051\074\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\100\003\311\004\034\006\115\007\116\010\107\011\073" +
    "\012\113\013\036\014\117\015\043\016\032\017\025\020" +
    "\045\021\076\022\064\023\103\024\057\025\106\026\110" +
    "\027\102\030\033\031\052\032\027\033\056\034\054\035" +
    "\111\036\100\040\024\047\041\050\072\051\074\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\036\012\315\013\036\014\117\015\043\016\032\017\025" +
    "\020\045\021\076\022\064\023\103\024\057\040\024\047" +
    "\041\050\072\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\004\325\036\326" +
    "\001\001\000\036\012\330\013\036\014\117\015\043\016" +
    "\032\017\025\020\045\021\076\022\064\023\103\024\057" +
    "\040\024\047\041\050\072\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\036\012\332\013\036" +
    "\014\117\015\043\016\032\017\025\020\045\021\076\022" +
    "\064\023\103\024\057\040\024\047\041\050\072\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\062\335\001" +
    "\001\000\100\003\336\004\034\006\115\007\116\010\107" +
    "\011\073\012\113\013\036\014\117\015\043\016\032\017" +
    "\025\020\045\021\076\022\064\023\103\024\057\025\106" +
    "\026\110\027\102\030\033\031\052\032\027\033\056\034" +
    "\054\035\111\036\100\040\024\047\041\050\072\051\074" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\013\364\014\117\015\043\016" +
    "\032\017\025\024\057\040\024\047\041\050\072\001\001" +
    "\000\024\013\363\014\117\015\043\016\032\017\025\024" +
    "\057\040\024\047\041\050\072\001\001\000\024\013\362" +
    "\014\117\015\043\016\032\017\025\024\057\040\024\047" +
    "\041\050\072\001\001\000\024\013\361\014\117\015\043" +
    "\016\032\017\025\024\057\040\024\047\041\050\072\001" +
    "\001\000\024\013\360\014\117\015\043\016\032\017\025" +
    "\024\057\040\024\047\041\050\072\001\001\000\022\014" +
    "\357\015\043\016\032\017\025\024\057\040\024\047\041" +
    "\050\072\001\001\000\022\014\356\015\043\016\032\017" +
    "\025\024\057\040\024\047\041\050\072\001\001\000\024" +
    "\013\355\014\117\015\043\016\032\017\025\024\057\040" +
    "\024\047\041\050\072\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\056\370\001" +
    "\001\000\010\036\377\044\u0100\045\376\001\001\000\004" +
    "\060\372\001\001\000\002\001\001\000\100\003\374\004" +
    "\034\006\115\007\116\010\107\011\073\012\113\013\036" +
    "\014\117\015\043\016\032\017\025\020\045\021\076\022" +
    "\064\023\103\024\057\025\106\026\110\027\102\030\033" +
    "\031\052\032\027\033\056\034\054\035\111\036\100\040" +
    "\024\047\041\050\072\051\074\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\036\377\044\u0108" +
    "\001\001\000\004\057\u0104\001\001\000\002\001\001\000" +
    "\100\003\u0106\004\034\006\115\007\116\010\107\011\073" +
    "\012\113\013\036\014\117\015\043\016\032\017\025\020" +
    "\045\021\076\022\064\023\103\024\057\025\106\026\110" +
    "\027\102\030\033\031\052\032\027\033\056\034\054\035" +
    "\111\036\100\040\024\047\041\050\072\051\074\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    private SemanticSymbolTable semanticTable;
    
    private SymbolTable symbolTable;
    
    private int errorCount = 0;

    private Stack<String> scopeContext = new Stack<>();
    
    private String currentFunctionName = null;

    private Map<String, String> codeValues  = new HashMap<>();

    private int uniqueCounter  = 0;
    
    private IntermediateCodeGenerator codeGenerator;

    private boolean codeGenerationEnabled = false;

    private int labelCounter = 0;

    private Stack<String> labelStack = new Stack<>();
    private Stack<String[]> labelPairStack = new Stack<>();
    private Stack<String[]> loopLabelStack = new Stack<>();

    private boolean inSwitchContext = false;
    private List<String> deferredSwitchCode = new ArrayList<>();
    
    public void enableCodeGeneration(String outputFile) {
        this.codeGenerator = new IntermediateCodeGenerator(outputFile);
        this.codeGenerationEnabled = true;
        System.out.println("Generación de código intermedio habilitada");
    }
    
    public void disableCodeGeneration() {
        this.codeGenerationEnabled = false;
        this.codeGenerator = null;
    }
    
    public IntermediateCodeGenerator getCodeGenerator() {
        return codeGenerator;
    }

    public void initTables() {
        semanticTable = new SemanticSymbolTable();
        symbolTable = semanticTable.getOriginalTable();
        System.out.println("Iniciando analisis semantico...");
        
        scopeContext.push("GLOBAL");
    }
    
    public void setSymbolTable(SymbolTable symbolTable) {
        this.symbolTable = symbolTable;
        if (semanticTable == null) {
            initTables();
        }
    }
    
    public SemanticSymbolTable getSemanticTable() {
        if (semanticTable == null) {
            initTables();
        }
        return semanticTable;
    }

    public String getCurrentFunctionName() {
        return currentFunctionName;
    }
    
    public void setCurrentFunctionName(String functionName) {
        this.currentFunctionName = functionName;
    }
    // Le borre los paramatros List<String> params, int line, int column para hacer pruebas
    // y porque no los estaba usando en ningún lado
    public void enterFunctionScope(String functionName, String returnType) {
        if (semanticTable != null) {
            semanticTable.enterScope("FUNCTION", functionName);
            scopeContext.push("FUNCTION:" + functionName);
            setCurrentFunctionName(functionName); 
            System.out.println("Entrando a función: " + functionName);
        }
    }
    
    public void exitFunctionScope() {
        if (semanticTable != null && !scopeContext.isEmpty()) {
            String context = scopeContext.pop();
            semanticTable.exitScope();
            setCurrentFunctionName(null);
            System.out.println("Saliendo de scope: " + context);
        }
    }
    
    public void enterBlockScope() {
        if (semanticTable != null) {
            semanticTable.enterScope("BLOCK", "block");
            scopeContext.push("BLOCK");
            System.out.println("Entrando a bloque...");
        }
    }
    
    public void exitBlockScope() {
        if (semanticTable != null && !scopeContext.isEmpty()) {
            String context = scopeContext.pop();
            semanticTable.exitScope();
            System.out.println("Saliendo de bloque...");
        }
    }
    
    public void enterControlScope(String controlType) {
        if (semanticTable != null) {
            semanticTable.enterScope(controlType.toUpperCase(), controlType.toLowerCase() + "_block");
            scopeContext.push(controlType.toUpperCase());
            System.out.println("Entrando a " + controlType + "...");
        }
    }
    
    public void exitControlScope() {
        if (semanticTable != null && !scopeContext.isEmpty()) {
            String context = scopeContext.pop();
            semanticTable.exitScope();
            System.out.println("Saliendo de control: " + context);
        }
    }
    
    public void finalizeSemantic() {
        if (semanticTable != null) {
            boolean hasMain = semanticTable.checkMainFunction();
            if (!hasMain) {
                errorCount++;
            }
            
            semanticTable.printSummary();
            
            try {
                semanticTable.escribirTablas("semantic_analysis.txt");
                System.out.println("Analisis semantico completado. Ver: semantic_analysis.txt");
            } catch (Exception e) {
                System.err.println("Error escribiendo archivo semantico: " + e.getMessage());
            }
        }
        
        if (codeGenerationEnabled && codeGenerator != null) {
            codeGenerator.printCode();
            codeGenerator.printStatistics();
            codeGenerator.writeToFile();
        }
    }
    
    /* Métodos de manejo de errores existentes */
    public void syntax_error(Symbol s) {
        errorCount++;
        System.err.println("Error sintactico #" + errorCount + " en linea " + (s.left + 1) + 
                          ", columna " + (s.right + 1) + ": Token inesperado '" + s.value + "'");
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception {
        errorCount++;
        System.err.println("Error sintactico fatal #" + errorCount + " en linea " + (s.left + 1) + 
                          ", columna " + (s.right + 1) + ": No se pudo recuperar del error");
        
        System.err.println("Total de errores encontrados: " + errorCount);
        
        finalizeSemantic();
    }
    
    public void report_error(String message, Object info) {
        errorCount++;
        if (info instanceof Symbol) {
            Symbol s = (Symbol) info;
            System.err.println("Error de recuperacion #" + errorCount + " en linea " + (s.left + 1) + 
                              ", columna " + (s.right + 1) + ": " + message);
        } else {
            System.err.println("Error de recuperacion #" + errorCount + ": " + message);
        }
    }
    
    public int getErrorCount() {
        return errorCount + (semanticTable != null ? semanticTable.getErrorCount() : 0);
    }
    
    /* Métodos de compatibilidad existentes */
    public void updateVariableType(String id, String type) {
        if (symbolTable != null) {
            symbolTable.actualizarTipoVariable(id, type);
        }
    }
    
    public void markAsFunction(String id, String returnType) {
        if (symbolTable != null) {
            symbolTable.marcarComoFuncion(id, returnType);
        }
    }
    // Para el tema del código intermedio
    public String saveCodeValue(String semanticType, String codeValue) {
        if (codeGenerationEnabled && codeValue != null) {
            String uniqueKey = "expr_" + (++uniqueCounter);
            codeValues.put(uniqueKey, codeValue);
            System.out.println("DEBUG: Guardando " + uniqueKey + " = " + codeValue + " (tipo: " + semanticType + ")");
            return uniqueKey;  // Devolver la clave única
        }
        return null;
    }

    public String getCodeValue(String key) {
        if (key != null && key.startsWith("expr_")) {
            String value = codeValues.get(key);
            System.out.println("DEBUG: Recuperando " + key + " = " + value);
            return value != null ? value : key;
        }
        // Si no es una clave especial, devolver tal como está
        return key;
    }

    private Stack<String> codeKeyStack = new Stack<>();
    
    public void pushCodeKey(String key) {
        if (codeGenerationEnabled && key != null) {
            codeKeyStack.push(key);
        }
    }
    
    public String popCodeKey() {
        if (codeGenerationEnabled && !codeKeyStack.isEmpty()) {
            return codeKeyStack.pop();
        }
        return null;
    }

    // Para el tema de etiquetas únicas
    public String generateLabel() {
        return "L" + (++labelCounter);
    }

    public void pushLabel(String label) {
    labelStack.push(label);
}

public String popLabel() {
    return labelStack.isEmpty() ? null : labelStack.pop();
}

public void pushLabelPair(String label1, String label2) {
    labelPairStack.push(new String[]{label1, label2});
}

public String[] popLabelPair() {
    return labelPairStack.isEmpty() ? null : labelPairStack.pop();
}

public String[] peekLabelPair() {
    return labelPairStack.isEmpty() ? null : labelPairStack.peek();
}

public void enterSwitchContext() {
        inSwitchContext = true;
        deferredSwitchCode.clear();
        System.out.println("DEBUG: Entrando a contexto SWITCH - código diferido");
    }
    
    public void exitSwitchContext() {
        inSwitchContext = false;
        System.out.println("DEBUG: Saliendo de contexto SWITCH");
    }
    
    public boolean isInSwitchContext() {
        return inSwitchContext;
    }
    
    public void deferSwitchCode(String code) {
        if (inSwitchContext) {
            deferredSwitchCode.add(code);
            System.out.println("DEBUG: Código diferido para switch: " + code);
        }
    }
    
    public List<String> getDeferredSwitchCode() {
        return new ArrayList<>(deferredSwitchCode);
    }

    public void pushLoopLabels(String startLabel, String endLabel) {
        loopLabelStack.push(new String[]{startLabel, endLabel});
        System.out.println("DEBUG: Loop labels pushed - start: " + startLabel + ", end: " + endLabel);
    }
    
    public String[] popLoopLabels() {
        if (!loopLabelStack.isEmpty()) {
            String[] labels = loopLabelStack.pop();
            System.out.println("DEBUG: Loop labels popped - start: " + labels[0] + ", end: " + labels[1]);
            return labels;
        }
        return null;
    }
    
    public String[] peekLoopLabels() {
        return loopLabelStack.isEmpty() ? null : loopLabelStack.peek();
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
 
             List<String> noParams = new ArrayList<String>();
             parser.getSemanticTable().declareFunction("main", "VOID", noParams, mleft, mright);
             
             parser.getSemanticTable().enterScope("FUNCTION", "main");
             parser.setCurrentFunctionName("main");
             System.out.println("Entrando a función main");
             
             if (parser.codeGenerationEnabled) {
                 parser.getCodeGenerator().startFunction("main", "VOID");
             }
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= VOID MAIN LPAREN RPAREN LBLOCK NT$0 block RBLOCK 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		 
             parser.getSemanticTable().exitScope();
             parser.setCurrentFunctionName(null);
             System.out.println("Saliendo de función main");
             
             if (parser.codeGenerationEnabled) {
                 parser.getCodeGenerator().endFunction("main");
             }
             
             parser.finalizeSemantic();
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // program ::= decl_fun program 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
             if (f != null) {
                 System.out.println("Función declarada: " + f.toString());
             }
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // program ::= error program 
            {
              Object RESULT =null;
		 
             System.err.println("Error en la estructura del programa. Continuando análisis..."); 
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // program ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // NT$1 ::= 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 
              // ✅ PASO 1: Entrar al scope ANTES de procesar parámetros
              parser.enterFunctionScope(id.toString(), t.toString());
              
              if (parser.codeGenerationEnabled) {
                  parser.getCodeGenerator().startFunction(id.toString(), t.toString());
              }
              
              System.out.println("DEBUG: Iniciando función " + id + ", scope abierto para parámetros");
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // NT$2 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object params = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 
              // ✅ PASO 2: Declarar función CON parámetros reales (después de procesarlos)
              List<String> paramTypes = new ArrayList<String>();
              if (params != null) {
                  paramTypes = (List<String>) params;
              }
              
              if (parser.getSemanticTable() != null) {
                  parser.getSemanticTable().declareFunction(id.toString(), t.toString(), paramTypes, idleft, idright);
                  System.out.println("DEBUG: Función '" + id + "' declarada con " + paramTypes.size() + " parámetros");
              }
              
              System.out.println("DEBUG: Parámetros procesados, entrando al cuerpo de función");
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // decl_fun ::= tipo_r ID LPAREN NT$1 param_list RPAREN NT$2 LBLOCK block RBLOCK 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object params = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		 
              // ✅ PASO 3: CERRAR TODO AL FINAL (solo una vez)
              System.out.println("DEBUG: Finalizando función completa");
              
              if (parser.codeGenerationEnabled) {
                  parser.getCodeGenerator().endFunction();
              }
              
              parser.exitFunctionScope();
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl_fun",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // NT$3 ::= 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
 
              // ✅ FUNCIÓN SIN PARÁMETROS - mismo patrón
              parser.enterFunctionScope(id.toString(), t.toString());
              
              if (parser.codeGenerationEnabled) {
                  parser.getCodeGenerator().startFunction(id.toString(), t.toString());
              }
              
              // Declarar inmediatamente (sin parámetros)
              if (parser.getSemanticTable() != null) {
                  List<String> noParams = new ArrayList<String>();
                  parser.getSemanticTable().declareFunction(id.toString(), t.toString(), noParams, idleft, idright);
                  System.out.println("DEBUG: Función '" + id + "' sin parámetros declarada");
              }
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // decl_fun ::= tipo_r ID LPAREN RPAREN NT$3 LBLOCK block RBLOCK 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		 
              // ✅ CERRAR AL FINAL
              if (parser.codeGenerationEnabled) {
                  parser.getCodeGenerator().endFunction();
              }
              
              parser.exitFunctionScope();
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl_fun",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // tipo_r ::= INT 
            {
              String RESULT =null;
		 RESULT = "INT"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_r",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // tipo_r ::= FLOAT 
            {
              String RESULT =null;
		 RESULT = "FLOAT"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_r",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // tipo_r ::= CHAR 
            {
              String RESULT =null;
		 RESULT = "CHAR"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_r",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // tipo_r ::= BOOL 
            {
              String RESULT =null;
		 RESULT = "BOOL"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_r",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // tipo_r ::= VOID 
            {
              String RESULT =null;
		 RESULT = "VOID"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_r",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // param_list ::= param 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                List<String> paramList = new ArrayList<String>();
                if (p != null) {
                    paramList.add(p.toString());
                }
                RESULT = paramList;
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("param_list",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // param_list ::= param_list COMMA param 
            {
              Object RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object list = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                // ✅ CAST EXPLÍCITO
                List<String> paramList = new ArrayList<String>();
                if (list != null) {
                    paramList = (List<String>) list;
                }
                if (p != null) {
                    paramList.add(p.toString());
                }
                RESULT = paramList;
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("param_list",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // param ::= tipo ID 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
           // ✅ DECLARAR PARÁMETRO EN SCOPE ACTUAL
           if (parser.getSemanticTable() != null) {
               parser.getSemanticTable().declareParameter(id.toString(), t.toString(), idleft);
               System.out.println("DEBUG: Parámetro '" + id + "' declarado como " + t);
           }
           
           // ✅ GENERAR DECLARACIÓN DE PARÁMETRO
           if (parser.codeGenerationEnabled) {
               parser.getCodeGenerator().declareParameter(id.toString(), t.toString());
           }
           
           RESULT = t.toString();
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("param",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // block ::= stmt block 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("block",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // block ::= error block 
            {
              Object RESULT =null;
		 System.err.println("Error en bloque de código. Continuando..."); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("block",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // block ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("block",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // tipo ::= INT 
            {
              String RESULT =null;
		 RESULT = "INT"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // tipo ::= FLOAT 
            {
              String RESULT =null;
		 RESULT = "FLOAT"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // tipo ::= BOOL 
            {
              String RESULT =null;
		 RESULT = "BOOL"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // tipo ::= CHAR 
            {
              String RESULT =null;
		 RESULT = "CHAR"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // tipo ::= STRING 
            {
              String RESULT =null;
		 RESULT = "STRING"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // decl_arr ::= tipo ID LBRACKET exp RBRACKET LBRACKET exp RBRACKET QUESTION 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 
              String arrayType = t.toString() + "[][]";
              
              if (parser.getSemanticTable() != null) {
                  parser.getSemanticTable().declareVariable(id.toString(), arrayType, idleft, idright,true);
              }
              
              if (parser.codeGenerationEnabled) {
                  parser.getCodeGenerator().declareVariable(id.toString(), arrayType);
              }
              
              parser.updateVariableType(id.toString(), arrayType);
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl_arr",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // decl_arr ::= tipo ID LBRACKET exp RBRACKET LBRACKET exp RBRACKET ASSIGN exp_matrix QUESTION 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		 
              String arrayType = t.toString() + "[][]";
              
              if (parser.getSemanticTable() != null) {
                  parser.getSemanticTable().declareVariable(id.toString(), arrayType, idleft, idright);
              }
              
              if (parser.codeGenerationEnabled) {
                  parser.getCodeGenerator().declareVariable(id.toString(), arrayType);
                  parser.getCodeGenerator().addComment("Array inicializado con matriz");
              }
              
              parser.updateVariableType(id.toString(), arrayType);
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl_arr",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // exp_matrix ::= LBRACKET matrix_row RBRACKET 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp_matrix",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // exp_matrix ::= LBRACKET matrix_row COMMA matrix_row RBRACKET 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp_matrix",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // matrix_row ::= LBRACKET exp_list RBRACKET 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("matrix_row",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // exp_list ::= exp 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp_list",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // exp_list ::= exp COMMA exp_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp_list",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // arr_access ::= ID LBRACKET exp RBRACKET LBRACKET exp RBRACKET 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                // 1. VALIDACIÓN SEMÁNTICA (igual)
                if (parser.getSemanticTable() != null) {
                    String resultType = parser.getSemanticTable().checkArrayAccess(
                        id.toString(), e1, e2, idleft
                    );
                    
                    if (resultType == null) {
                        RESULT = "ERROR";
                    } else {
                        RESULT = resultType;  // ✅ Tipo del elemento
                    }                        
                } else {
                    RESULT = "ERROR";
                }

                // 2. GENERACIÓN DE CÓDIGO
                if (parser.codeGenerationEnabled && !RESULT.equals("ERROR")) {
                    String index2Key = parser.popCodeKey();
                    String index1Key = parser.popCodeKey();
                    String index2Code = parser.getCodeValue(index2Key);
                    String index1Code = parser.getCodeValue(index1Key);
                    
                    String tempVar = parser.getCodeGenerator().generateArrayAccess(id.toString(), index1Code, index2Code);
                    
                    // ✅ GUARDAR CORRECTAMENTE EN STACK
                    String newKey = parser.saveCodeValue(RESULT, tempVar);
                    parser.pushCodeKey(newKey);
                    
                    System.out.println("DEBUG: Array access " + id + "[" + index1Code + "][" + index2Code + "] = " + tempVar);
                }
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arr_access",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // stmt ::= exp QUESTION 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
          if (parser.getSemanticTable() != null && e != null) {
              // Registro de uso de expresión
          }
       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // stmt ::= assign 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // stmt ::= array_assign 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // stmt ::= decl_var 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // stmt ::= decl_arr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // stmt ::= ctrl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // stmt ::= break_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // stmt ::= continue_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // stmt ::= return_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // stmt ::= read_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // stmt ::= write_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // stmt ::= LBLOCK block RBLOCK 
            {
              Object RESULT =null;
		 
          parser.enterBlockScope();
          parser.exitBlockScope();
       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // stmt ::= error QUESTION 
            {
              Object RESULT =null;
		 System.err.println("Error en sentencia. Recuperando en ';'..."); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // array_assign ::= ID LBRACKET exp RBRACKET LBRACKET exp RBRACKET ASSIGN exp QUESTION 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                  // 1. VALIDACIÓN SEMÁNTICA
                  if (parser.getSemanticTable() != null) {
                      String arrayType = parser.getSemanticTable().checkArrayAccess(id.toString(), e1, e2, idleft);
                      
                      if (arrayType != null && !parser.getSemanticTable().checkTypeCompatibility(arrayType, value, idleft)) {
                          parser.report_error("Tipo incompatible en asignación a array", null);
                      }
                  }
                  
                  // 2. GENERACIÓN DE CÓDIGO
                  if (parser.codeGenerationEnabled) {
                      String valueKey = parser.popCodeKey();   // value
                      String index2Key = parser.popCodeKey();  // e2  
                      String index1Key = parser.popCodeKey();  // e1
                      
                      String valueCode = parser.getCodeValue(valueKey);
                      String index2Code = parser.getCodeValue(index2Key);
                      String index1Code = parser.getCodeValue(index1Key);
                      
                      parser.getCodeGenerator().generateArrayAssignment(id.toString(), index1Code, index2Code, valueCode);
                      
                      System.out.println("DEBUG: Array assignment " + id + "[" + index1Code + "][" + index2Code + "] = " + valueCode);
                  }
               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_assign",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // assign ::= ID ASSIGN exp QUESTION 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            boolean valid = parser.getSemanticTable().checkAssignment(id.toString(), e, idleft);
            
            if (valid) {
                System.out.println("Asignacion valida: " + id + " = " + e);
                
                if (parser.codeGenerationEnabled && valid) {
                    String expKey = parser.popCodeKey();
                    String expCode = parser.getCodeValue(expKey);
                    
                    // ✅ SI ESTAMOS EN SWITCH, DIFERIR LA ASIGNACIÓN
                    if (parser.isInSwitchContext()) {
                        parser.deferSwitchCode(id.toString() + " = " + expCode);
                        System.out.println("DEBUG: Asignación diferida para switch: " + id + " = " + expCode);
                    } else {
                        // Generar normalmente
                        parser.getCodeGenerator().generateAssignment(id.toString(), expCode);
                        System.out.println("DEBUG: Asignación inmediata: " + id + " = " + expCode);
                    }
                }
            } else {
                System.err.println("Error en asignacion a variable: " + id);
            }
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assign",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // decl_var ::= tipo ID ASSIGN exp QUESTION 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
              boolean declared = parser.getSemanticTable().declareVariable(id.toString(), t, idleft, idright, true);
              
              if (declared) {
                  if (e != null) {
                      boolean compatible = parser.getSemanticTable().checkTypeCompatibility(t, e, idleft);
                      if (compatible) {
                          System.out.println("Variable '" + id + "' declarada e inicializada correctamente como " + t);
                      } else {
                          System.err.println("Error: tipos incompatibles en inicializacion de " + id);
                      }
                  }
              }
              
              parser.updateVariableType(id.toString(), t.toString());
              
              if (parser.codeGenerationEnabled && declared) {
                  parser.getCodeGenerator().declareVariable(id.toString(), t.toString());
                  if (e != null) {
                      String expKey = parser.popCodeKey();
                      String expCode = parser.getCodeValue(expKey);
                      
                      // ✅ FIX s1: VERIFICAR SI ES UNA LLAMADA A FUNCIÓN
                      System.out.println("DEBUG s1: Expresión para " + id + " = " + expCode + " (tipo: " + e + ")");
                      
                      if (parser.isInSwitchContext()) {
                          parser.deferSwitchCode(id.toString() + " = " + expCode);
                          System.out.println("DEBUG: Inicialización diferida para switch: " + id + " = " + expCode);
                      } else {
                          // ✅ GENERAR ASIGNACIÓN NORMAL
                          parser.getCodeGenerator().generateAssignment(id.toString(), expCode);
                          System.out.println("DEBUG s1: Variable " + id + " inicializada con " + expCode);
                      }
                  }
              }
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl_var",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // decl_var ::= tipo ID QUESTION 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
              boolean declared = parser.getSemanticTable().declareVariable(id.toString(), t, idleft, idright, false);
              
              if (declared) {
                  System.out.println("Variable '" + id + "' declarada como " + t + " (sin inicializar)");
              }
              
              parser.updateVariableType(id.toString(), t.toString());
              
              if (parser.codeGenerationEnabled && declared) {
                  parser.getCodeGenerator().declareVariable(id.toString(), t.toString());
              }
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl_var",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // literal ::= LIT_INT 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
             RESULT = "INT";  // ✅ Siempre String para semántico
             System.out.println("Literal entero: " + val);
             
             if (parser.codeGenerationEnabled) {
                 String key = parser.saveCodeValue("INT", val.toString());
                 parser.pushCodeKey(key);  // Guardar en stack para uso posterior
                 System.out.println("DEBUG: Literal " + val + " guardado con clave " + key);
             }
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // literal ::= LIT_FLOAT 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
             RESULT = "FLOAT";
             
             if (parser.codeGenerationEnabled) {
                 String key = parser.saveCodeValue("FLOAT", val.toString());
                 parser.pushCodeKey(key);
             }
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // literal ::= LIT_BOOL 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
             RESULT = "BOOL";
             System.out.println("Literal booleano detectado: " + val);
             
             if (parser.codeGenerationEnabled) {
                 String key = parser.saveCodeValue("BOOL", val.toString());  // ✅ Valor real: "true", "false"
                 parser.pushCodeKey(key);
                 System.out.println("DEBUG: Literal BOOL " + val + " guardado como código");
             }
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // literal ::= LIT_CHAR 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
             RESULT = "CHAR";
             System.out.println("Literal caracter detectado: " + val);
             
             if (parser.codeGenerationEnabled) {
                 String key = parser.saveCodeValue("CHAR", val.toString());  // ✅ Valor real: "'a'", "'x'"
                 parser.pushCodeKey(key);
                 System.out.println("DEBUG: Literal CHAR " + val + " guardado como código");
             }
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // literal ::= LIT_STRING 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
             RESULT = "STRING";
             System.out.println("Literal cadena detectado: " + val);
             
             if (parser.codeGenerationEnabled) {
                 String key = parser.saveCodeValue("STRING", val.toString());  // ✅ Valor real: "\"hola\""
                 parser.pushCodeKey(key);
                 System.out.println("DEBUG: Literal STRING " + val + " guardado como código");
             }
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // literal ::= TRUE 
            {
              String RESULT =null;
		 
              RESULT = "BOOL";
              if (parser.codeGenerationEnabled) {
                  String key = parser.saveCodeValue("BOOL", "true");
                  parser.pushCodeKey(key);
              }
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // literal ::= FALSE 
            {
              String RESULT =null;
		 
              RESULT = "BOOL";
              if (parser.codeGenerationEnabled) {
                  String key = parser.saveCodeValue("BOOL", "false");
                  parser.pushCodeKey(key);
              }
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // llamada_fun ::= ID LPAREN arg_list RPAREN 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object args = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                 System.out.println("DEBUG s1: ========== LLAMADA A FUNCIÓN ==========");
                 System.out.println("DEBUG s1: Función: " + id);
                 if (args != null) {
                     List<String> argTypes = (List<String>) args;
                     System.out.println("DEBUG s1: Número de argumentos: " + argTypes.size());
                     for (int i = 0; i < argTypes.size(); i++) {
                         System.out.println("DEBUG s1: Argumento " + (i+1) + ": " + argTypes.get(i));
                     }
                 }
                 
                 // 1. VALIDACIÓN SEMÁNTICA
                 if (parser.getSemanticTable() != null) {
                     // ✅ EXTRAER TIPOS REALES
                     List<String> argTypes = new ArrayList<String>();
                     if (args != null) {
                         List<String> argList = (List<String>) args;
                         for (String arg : argList) {
                             argTypes.add(arg);  // Los tipos ya están en la lista
                         }
                     }
                     
                     System.out.println("DEBUG s1: Tipos para validación: " + argTypes);
                     String returnType = parser.getSemanticTable().checkFunctionCall(
                         id.toString(), argTypes, idleft
                     );
                     
                     if (returnType == null) {
                         RESULT = "ERROR";
                         System.out.println("DEBUG s1: Validación FALLÓ");
                     } else {
                         RESULT = returnType;
                         System.out.println("DEBUG s1: Validación OK -> " + returnType);
                     }
                 } else {
                     RESULT = "ERROR";
                 }

                 // 2. GENERACIÓN DE CÓDIGO INTERMEDIO SOLO SI ES VÁLIDO
                 if (parser.codeGenerationEnabled && !RESULT.equals("ERROR")) {
                     // ✅ RECUPERAR ARGUMENTOS DEL STACK (en orden inverso)
                     List<String> argCodes = new ArrayList<String>();
                     if (args != null) {
                         List<String> argList = (List<String>) args;
                         
                         // Para cada argumento, pop del stack
                         for (int i = argList.size() - 1; i >= 0; i--) {
                             String argKey = parser.popCodeKey();
                             String argCode = parser.getCodeValue(argKey);
                             argCodes.add(0, argCode);  // Insertar al principio para mantener orden
                             System.out.println("DEBUG s1: Argumento " + i + " código: " + argCode);
                         }
                     }
                     
                     // ✅ GENERAR CÓDIGO DE LLAMADA COMPLETA
                     String tempResult = parser.getCodeGenerator().generateFunctionCallComplete(
                         id.toString(), argCodes, RESULT
                     );
                     
                     // ✅ GUARDAR RESULTADO PARA USO POSTERIOR
                     String resultKey = parser.saveCodeValue(RESULT, tempResult);
                     parser.pushCodeKey(resultKey);
                     
                     System.out.println("DEBUG s1: Resultado guardado: " + tempResult + " con clave " + resultKey);
                 }
                 
                 System.out.println("DEBUG s1: ========================================");
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamada_fun",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // llamada_fun ::= ID LPAREN RPAREN 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 
                 System.out.println("DEBUG s1: Función sin argumentos: " + id);
                 
                 // FUNCIÓN SIN ARGUMENTOS (igual que antes)
                 if (parser.getSemanticTable() != null) {
                     List<String> noArgs = new ArrayList<String>();
                     String returnType = parser.getSemanticTable().checkFunctionCall(
                         id.toString(), noArgs, idleft
                     );
                     
                     if (returnType == null) {
                         RESULT = "ERROR";
                     } else {
                         RESULT = returnType;
                     }
                 } else {
                     RESULT = "ERROR";
                 }
                 
                 if (parser.codeGenerationEnabled && !RESULT.equals("ERROR")) {
                     List<String> noArgs = new ArrayList<String>();
                     String tempResult = parser.getCodeGenerator().generateFunctionCallComplete(
                         id.toString(), noArgs, RESULT
                     );
                     
                     String resultKey = parser.saveCodeValue(RESULT, tempResult);
                     parser.pushCodeKey(resultKey);
                 }
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamada_fun",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // exp ::= exp_log 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // exp_log ::= exp_log OR term_log 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
             // 1. VALIDACIÓN SEMÁNTICA
             String resultType = parser.getSemanticTable().checkLogicalOperation(
                 e1, e2, "||", e1left
             );
             if (resultType == null) {
                 RESULT = "ERROR";
                 parser.report_error("Operación lógica OR requiere operandos booleanos", null);
             } else {
                 RESULT = resultType;  // Debería ser "BOOL"
             }
             
             // 2. GENERACIÓN DE CÓDIGO
             if (parser.codeGenerationEnabled && resultType != null) {
                 String rightKey = parser.popCodeKey();
                 String leftKey = parser.popCodeKey();
                 String rightCode = parser.getCodeValue(rightKey);
                 String leftCode = parser.getCodeValue(leftKey);
                 
                 String tempVar = parser.getCodeGenerator().generateBinaryOp(leftCode, "||", rightCode);
                 String newKey = parser.saveCodeValue(resultType, tempVar);
                 parser.pushCodeKey(newKey);
             }
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp_log",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // exp_log ::= term_log 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp_log",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // term_log ::= term_log AND factor_log 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
              // 1. VALIDACIÓN SEMÁNTICA
              String resultType = parser.getSemanticTable().checkLogicalOperation(
                  e1, e2, "&&", e1left
              );
              if (resultType == null) {
                  RESULT = "ERROR";
                  parser.report_error("Operación lógica AND requiere operandos booleanos", null);
              } else {
                  RESULT = resultType;
              }
              
              // 2. GENERACIÓN DE CÓDIGO
              if (parser.codeGenerationEnabled && resultType != null) {
                  String rightKey = parser.popCodeKey();
                  String leftKey = parser.popCodeKey();
                  String rightCode = parser.getCodeValue(rightKey);
                  String leftCode = parser.getCodeValue(leftKey);
                  
                  String tempVar = parser.getCodeGenerator().generateBinaryOp(leftCode, "&&", rightCode);
                  String newKey = parser.saveCodeValue(resultType, tempVar);
                  parser.pushCodeKey(newKey);
              }
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term_log",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // term_log ::= factor_log 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term_log",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // factor_log ::= NOT atom_arit 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                // 1. VALIDACIÓN SEMÁNTICA
                String resultType = parser.getSemanticTable().checkLogicalOperation(
                    e, null, "!", eleft
                );
                if (resultType == null) {
                    RESULT = "ERROR";
                    parser.report_error("Operación NOT requiere operando booleano", null);
                } else {
                    RESULT = resultType;
                }
                
                // 2. GENERACIÓN DE CÓDIGO
                if (parser.codeGenerationEnabled && resultType != null) {
                    String operandKey = parser.popCodeKey();
                    String operandCode = parser.getCodeValue(operandKey);
                    
                    String tempVar = parser.getCodeGenerator().generateUnaryOp("!", operandCode);
                    String newKey = parser.saveCodeValue(resultType, tempVar);
                    parser.pushCodeKey(newKey);
                }
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor_log",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // factor_log ::= exp_rel 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor_log",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // factor_log ::= LPAREN exp_log RPAREN 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor_log",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // exp_rel ::= exp_arit LT exp_arit 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
             // 1. VALIDACIÓN SEMÁNTICA
             String resultType = parser.getSemanticTable().checkRelationalOperation(
                 e1, e2, "<", e1left
             );
             if (resultType == null) {
                 RESULT = "ERROR";
                 parser.report_error("Tipos no comparables en operación <", null);
             } else {
                 RESULT = resultType;  // Debería ser "BOOL"
             }
             
             // 2. GENERACIÓN DE CÓDIGO
             if (parser.codeGenerationEnabled && resultType != null) {
                 String rightKey = parser.popCodeKey();
                 String leftKey = parser.popCodeKey();
                 String rightCode = parser.getCodeValue(rightKey);
                 String leftCode = parser.getCodeValue(leftKey);
                 
                 String tempVar = parser.getCodeGenerator().generateComparison(leftCode, "<", rightCode);
                 String newKey = parser.saveCodeValue(resultType, tempVar);
                 parser.pushCodeKey(newKey);
             }
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp_rel",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // exp_rel ::= exp_arit LTE exp_arit 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
             String resultType = parser.getSemanticTable().checkRelationalOperation(
                 e1, e2, "<=", e1left
             );
             if (resultType == null) {
                 RESULT = "ERROR";
                 parser.report_error("Tipos no comparables en operación <=", null);
             } else {
                 RESULT = resultType;
             }
             
             if (parser.codeGenerationEnabled && resultType != null) {
                 String rightKey = parser.popCodeKey();
                 String leftKey = parser.popCodeKey();
                 String rightCode = parser.getCodeValue(rightKey);
                 String leftCode = parser.getCodeValue(leftKey);
                 
                 String tempVar = parser.getCodeGenerator().generateComparison(leftCode, "<=", rightCode);
                 String newKey = parser.saveCodeValue(resultType, tempVar);
                 parser.pushCodeKey(newKey);
             }
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp_rel",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // exp_rel ::= exp_arit GT exp_arit 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
             String resultType = parser.getSemanticTable().checkRelationalOperation(
                 e1, e2, ">", e1left
             );
             if (resultType == null) {
                 RESULT = "ERROR";
                 parser.report_error("Tipos no comparables en operación >", null);
             } else {
                 RESULT = resultType;
             }
             
             if (parser.codeGenerationEnabled && resultType != null) {
                 String rightKey = parser.popCodeKey();
                 String leftKey = parser.popCodeKey();
                 String rightCode = parser.getCodeValue(rightKey);
                 String leftCode = parser.getCodeValue(leftKey);
                 
                 String tempVar = parser.getCodeGenerator().generateComparison(leftCode, ">", rightCode);
                 String newKey = parser.saveCodeValue(resultType, tempVar);
                 parser.pushCodeKey(newKey);
             }
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp_rel",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // exp_rel ::= exp_arit GTE exp_arit 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
             String resultType = parser.getSemanticTable().checkRelationalOperation(
                 e1, e2, ">=", e1left
             );
             if (resultType == null) {
                 RESULT = "ERROR";
                 parser.report_error("Tipos no comparables en operación >=", null);
             } else {
                 RESULT = resultType;
             }
             
             if (parser.codeGenerationEnabled && resultType != null) {
                 String rightKey = parser.popCodeKey();
                 String leftKey = parser.popCodeKey();
                 String rightCode = parser.getCodeValue(rightKey);
                 String leftCode = parser.getCodeValue(leftKey);
                 
                 String tempVar = parser.getCodeGenerator().generateComparison(leftCode, ">=", rightCode);
                 String newKey = parser.saveCodeValue(resultType, tempVar);
                 parser.pushCodeKey(newKey);
             }
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp_rel",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // exp_rel ::= exp_arit EQ exp_arit 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
             String resultType = parser.getSemanticTable().checkRelationalOperation(
                 e1, e2, "==", e1left
             );
             if (resultType == null) {
                 RESULT = "ERROR";
                 parser.report_error("Tipos no comparables en operación ==", null);
             } else {
                 RESULT = resultType;
             }
             
             if (parser.codeGenerationEnabled && resultType != null) {
                 String rightKey = parser.popCodeKey();
                 String leftKey = parser.popCodeKey();
                 String rightCode = parser.getCodeValue(rightKey);
                 String leftCode = parser.getCodeValue(leftKey);
                 
                 String tempVar = parser.getCodeGenerator().generateComparison(leftCode, "==", rightCode);
                 String newKey = parser.saveCodeValue(resultType, tempVar);
                 parser.pushCodeKey(newKey);
             }
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp_rel",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // exp_rel ::= exp_arit NEQ exp_arit 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
             String resultType = parser.getSemanticTable().checkRelationalOperation(
                 e1, e2, "!=", e1left
             );
             if (resultType == null) {
                 RESULT = "ERROR";
                 parser.report_error("Tipos no comparables en operación !=", null);
             } else {
                 RESULT = resultType;
             }
             
             if (parser.codeGenerationEnabled && resultType != null) {
                 String rightKey = parser.popCodeKey();
                 String leftKey = parser.popCodeKey();
                 String rightCode = parser.getCodeValue(rightKey);
                 String leftCode = parser.getCodeValue(leftKey);
                 
                 String tempVar = parser.getCodeGenerator().generateComparison(leftCode, "!=", rightCode);
                 String newKey = parser.saveCodeValue(resultType, tempVar);
                 parser.pushCodeKey(newKey);
             }
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp_rel",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // exp_rel ::= exp_arit 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp_rel",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // exp_arit ::= exp_arit PLUS term_arit 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
              // 1. VALIDACIÓN SEMÁNTICA
              String resultType = parser.getSemanticTable().checkArithmeticOperation(
                  e1, e2, "+", e1left
              );
              if (resultType == null) {
                  RESULT = "ERROR";
                  parser.report_error("Tipos incompatibles en operación +", null);
              } else {
                  RESULT = resultType;  // ✅ Tipo semántico
              }
              
              // 2. GENERACIÓN DE CÓDIGO
              if (parser.codeGenerationEnabled && resultType != null) {
                  String rightKey = parser.popCodeKey();  // e2
                  String leftKey = parser.popCodeKey();   // e1
                  String rightCode = parser.getCodeValue(rightKey);
                  String leftCode = parser.getCodeValue(leftKey);
                  
                  String tempVar = parser.getCodeGenerator().generateBinaryOp(leftCode, "+", rightCode);
                  String newKey = parser.saveCodeValue(resultType, tempVar);
                  parser.pushCodeKey(newKey);
              }
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp_arit",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // exp_arit ::= exp_arit MINUS term_arit 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
              // 1. VALIDACIÓN SEMÁNTICA
              String resultType = parser.getSemanticTable().checkArithmeticOperation(
                  e1, e2, "-", e1left
              );
              if (resultType == null) {
                  RESULT = "ERROR";
                  parser.report_error("Tipos incompatibles en operación -", null);
              } else {
                  RESULT = resultType;
              }
              
              // 2. GENERACIÓN DE CÓDIGO
              if (parser.codeGenerationEnabled && resultType != null) {
                  String rightKey = parser.popCodeKey();
                  String leftKey = parser.popCodeKey();
                  String rightCode = parser.getCodeValue(rightKey);
                  String leftCode = parser.getCodeValue(leftKey);
                  
                  String tempVar = parser.getCodeGenerator().generateBinaryOp(leftCode, "-", rightCode);
                  String newKey = parser.saveCodeValue(resultType, tempVar);
                  parser.pushCodeKey(newKey);
              }
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp_arit",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // exp_arit ::= term_arit 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp_arit",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // term_arit ::= term_arit TIMES factor_arit 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
               // 1. VALIDACIÓN SEMÁNTICA
               String resultType = parser.getSemanticTable().checkArithmeticOperation(
                   e1, e2, "*", e1left
               );
               if (resultType == null) {
                   RESULT = "ERROR";
                   parser.report_error("Tipos incompatibles en operación *", null);
               } else {
                   RESULT = resultType;
               }
               
               // 2. GENERACIÓN DE CÓDIGO
               if (parser.codeGenerationEnabled && resultType != null) {
                   String rightKey = parser.popCodeKey();
                   String leftKey = parser.popCodeKey();
                   String rightCode = parser.getCodeValue(rightKey);
                   String leftCode = parser.getCodeValue(leftKey);
                   
                   String tempVar = parser.getCodeGenerator().generateBinaryOp(leftCode, "*", rightCode);
                   String newKey = parser.saveCodeValue(resultType, tempVar);
                   parser.pushCodeKey(newKey);
               }
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term_arit",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // term_arit ::= term_arit DIVIDE factor_arit 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
               // 1. VALIDACIÓN SEMÁNTICA
               String resultType = parser.getSemanticTable().checkArithmeticOperation(
                   e1, e2, "/", e1left
               );
               if (resultType == null) {
                   RESULT = "ERROR";
                   parser.report_error("Tipos incompatibles en operación /", null);
               } else {
                   RESULT = resultType;
               }
               
               // 2. GENERACIÓN DE CÓDIGO
               if (parser.codeGenerationEnabled && resultType != null) {
                   String rightKey = parser.popCodeKey();
                   String leftKey = parser.popCodeKey();
                   String rightCode = parser.getCodeValue(rightKey);
                   String leftCode = parser.getCodeValue(leftKey);
                   
                   String tempVar = parser.getCodeGenerator().generateBinaryOp(leftCode, "/", rightCode);
                   String newKey = parser.saveCodeValue(resultType, tempVar);
                   parser.pushCodeKey(newKey);
               }
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term_arit",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // term_arit ::= term_arit MOD factor_arit 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
               // 1. VALIDACIÓN SEMÁNTICA - MOD solo para enteros
               if (!e1.equals("INT") || !e2.equals("INT")) {
                   parser.report_error("Operador % requiere operandos enteros", null);
                   RESULT = "ERROR";
               } else {
                   RESULT = "INT";
               }
               
               // 2. GENERACIÓN DE CÓDIGO
               if (parser.codeGenerationEnabled && RESULT.equals("INT")) {
                   String rightKey = parser.popCodeKey();
                   String leftKey = parser.popCodeKey();
                   String rightCode = parser.getCodeValue(rightKey);
                   String leftCode = parser.getCodeValue(leftKey);
                   
                   String tempVar = parser.getCodeGenerator().generateBinaryOp(leftCode, "%", rightCode);
                   String newKey = parser.saveCodeValue("INT", tempVar);
                   parser.pushCodeKey(newKey);
               }
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term_arit",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // term_arit ::= factor_arit 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term_arit",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // factor_arit ::= factor_arit POW power_arit 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                 // 1. VALIDACIÓN SEMÁNTICA
                 String resultType = parser.getSemanticTable().checkArithmeticOperation(
                     e1, e2, "**", e1left
                 );
                 if (resultType == null) {
                     RESULT = "ERROR";
                     parser.report_error("Operación POW requiere operandos numéricos", null);
                 } else {
                     // POW inteligente: si ambos son INT, resultado es INT
                     if (e1.equals("INT") && e2.equals("INT")) {
                         RESULT = "INT";
                     } else {
                         RESULT = "FLOAT";
                     }
                 }
                 
                 // 2. GENERACIÓN DE CÓDIGO
                 if (parser.codeGenerationEnabled && resultType != null) {
                     String rightKey = parser.popCodeKey();
                     String leftKey = parser.popCodeKey();
                     String rightCode = parser.getCodeValue(rightKey);
                     String leftCode = parser.getCodeValue(leftKey);
                     
                     String tempVar = parser.getCodeGenerator().generateBinaryOp(leftCode, "**", rightCode);
                     String newKey = parser.saveCodeValue(RESULT, tempVar);
                     parser.pushCodeKey(newKey);
                 }
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor_arit",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // factor_arit ::= power_arit 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor_arit",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // power_arit ::= unary_exp 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("power_arit",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // unary_exp ::= MINUS atom_arit 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
               // 1. VALIDACIÓN SEMÁNTICA
               if (!e.equals("INT") && !e.equals("FLOAT")) {
                   parser.report_error("Operador unario - requiere operando numérico (INT o FLOAT), encontrado: " + e, null);
                   RESULT = "ERROR";
               } else {
                   RESULT = e;  // Mantiene el tipo original
               }
               
               // 2. GENERACIÓN DE CÓDIGO
               if (parser.codeGenerationEnabled && !RESULT.equals("ERROR")) {
                   String operandKey = parser.popCodeKey();
                   String operandCode = parser.getCodeValue(operandKey);
                   
                   String tempVar = parser.getCodeGenerator().generateUnaryOp("-", operandCode);
                   String newKey = parser.saveCodeValue(RESULT, tempVar);
                   parser.pushCodeKey(newKey);
                   
                   System.out.println("DEBUG: Menos unario: -" + operandCode + " = " + tempVar);
               }
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unary_exp",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // unary_exp ::= INCREMENT ID 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
               // 1. VALIDACIÓN SEMÁNTICA
               if (parser.getSemanticTable() != null) {
                   SymbolInfo var = parser.getSemanticTable().checkVariableUsage(id.toString(), idleft);
                   if (var == null) {
                       RESULT = "ERROR";
                   } else if (!var.getTipoVariable().equals("INT") && !var.getTipoVariable().equals("FLOAT")) {
                       parser.report_error("Operador ++ requiere variable numérica", null);
                       RESULT = "ERROR";
                   } else {
                       RESULT = var.getTipoVariable();
                   }
               } else {
                   RESULT = "ERROR";
               }
               
               // 2. GENERACIÓN DE CÓDIGO
               if (parser.codeGenerationEnabled && !RESULT.equals("ERROR")) {
                   String tempVar = parser.getCodeGenerator().generateIncrement(id.toString());
                   String newKey = parser.saveCodeValue(RESULT, tempVar);
                   parser.pushCodeKey(newKey);
                   
                   System.out.println("DEBUG: Incremento: ++" + id + " = " + tempVar);
               }
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unary_exp",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // unary_exp ::= DECREMENT ID 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
               // 1. VALIDACIÓN SEMÁNTICA
               if (parser.getSemanticTable() != null) {
                   SymbolInfo var = parser.getSemanticTable().checkVariableUsage(id.toString(), idleft);
                   if (var == null) {
                       RESULT = "ERROR";
                   } else if (!var.getTipoVariable().equals("INT") && !var.getTipoVariable().equals("FLOAT")) {
                       parser.report_error("Operador -- requiere variable numérica", null);
                       RESULT = "ERROR";
                   } else {
                       RESULT = var.getTipoVariable();
                   }
               } else {
                   RESULT = "ERROR";
               }
               
               // 2. GENERACIÓN DE CÓDIGO
               if (parser.codeGenerationEnabled && !RESULT.equals("ERROR")) {
                   String tempVar = parser.getCodeGenerator().generateDecrement(id.toString());
                   String newKey = parser.saveCodeValue(RESULT, tempVar);
                   parser.pushCodeKey(newKey);
                   
                   System.out.println("DEBUG: Decremento: --" + id + " = " + tempVar);
               }
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unary_exp",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // unary_exp ::= atom_arit 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unary_exp",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // atom_arit ::= ID 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
               if (parser.getSemanticTable() != null) {
                   SymbolInfo symbol = parser.getSemanticTable().checkVariableUsage(id.toString(), idleft);
                   if (symbol != null) {
                       RESULT = symbol.getTipoVariable();  // ✅ String tipo semántico
                       
                       if (parser.codeGenerationEnabled) {
                           String key = parser.saveCodeValue(RESULT, id.toString());
                           parser.pushCodeKey(key);
                           System.out.println("DEBUG: Variable " + id + " guardada con clave " + key);
                       }
                   } else {
                       RESULT = "ERROR";
                   }
               } else {
                   RESULT = "ERROR";
               }

            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atom_arit",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // atom_arit ::= literal 
            {
              String RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atom_arit",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // atom_arit ::= arr_access 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atom_arit",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // atom_arit ::= llamada_fun 
            {
              String RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                RESULT = f; 
                // ✅ DEBUG s1: Verificar que la llamada se procesó
                System.out.println("DEBUG s1: Llamada a función procesada en atom_arit: " + f);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atom_arit",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // atom_arit ::= LPAREN exp RPAREN 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atom_arit",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // arg_list ::= exp 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
              // ✅ CREAR LISTA CON UN ARGUMENTO - SIN DUPLICAR
              List<String> argList = new ArrayList<String>();
              if (e != null) {
                  argList.add(e.toString());
                  System.out.println("DEBUG s1: Argumento único agregado: " + e.toString());
              }
              RESULT = argList;
              System.out.println("DEBUG s1: Lista final con " + argList.size() + " argumentos: " + argList);
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arg_list",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // arg_list ::= arg_list COMMA exp 
            {
              Object RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object list = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
              // ✅ AGREGAR ARGUMENTO A LISTA EXISTENTE (ORDEN CORRECTO)
              List<String> argList = new ArrayList<String>();
              if (list != null) {
                  List<String> existingList = (List<String>) list;
                  argList.addAll(existingList);  // ✅ PRIMERO los existentes
                  System.out.println("DEBUG s1: Argumentos existentes: " + existingList.size());
              }
              if (e != null) {
                  argList.add(e.toString());  // ✅ DESPUÉS el nuevo
                  System.out.println("DEBUG s1: Nuevo argumento agregado: " + e.toString());
              }
              RESULT = argList;
              System.out.println("DEBUG s1: Lista total con " + argList.size() + " argumentos: " + argList);
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arg_list",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // ctrl ::= if_stmt 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = s;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ctrl",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // ctrl ::= do_while 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ctrl",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // ctrl ::= for_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ctrl",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // ctrl ::= switch_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ctrl",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // if_stmt ::= IF LPAREN exp RPAREN LBLOCK block RBLOCK 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int then_blockleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int then_blockright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object then_block = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
             // ✅ TODA LA LÓGICA AL FINAL - SIN ACCIONES INTERMEDIAS
             if (!e.equals("BOOL")) {
                 parser.report_error("Condición de IF debe ser booleana", null);
                 RESULT = "ERROR";
             } else {
                 RESULT = "VOID";
             }
             
             // ✅ FIX s4: GENERAR IF SIMPLE CON LÓGICA DIFERIDA
             if (parser.codeGenerationEnabled && !RESULT.equals("ERROR")) {
                 String conditionKey = parser.popCodeKey();
                 String conditionCode = parser.getCodeValue(conditionKey);
                 String endLabel = parser.generateLabel();
                 
                 // ✅ INSERTAR CONDICIÓN AL PRINCIPIO DEL CÓDIGO THEN
                 parser.getCodeGenerator().insertConditionalBeforeBlock("IF NOT " + conditionCode + " GOTO " + endLabel);
                 parser.getCodeGenerator().emit(endLabel + ":");
                 
                 System.out.println("DEBUG s4: IF simple - condición diferida: " + conditionCode);
             }
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stmt",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // if_stmt ::= IF LPAREN exp RPAREN LBLOCK block RBLOCK ELSE LBLOCK block RBLOCK 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int then_blockleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int then_blockright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object then_block = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int else_blockleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int else_blockright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object else_block = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
             // ✅ TODA LA LÓGICA AL FINAL - SIN ACCIONES INTERMEDIAS
             if (!e.equals("BOOL")) {
                 parser.report_error("Condición de IF-ELSE debe ser booleana", null);
                 RESULT = "ERROR";
             } else {
                 RESULT = "VOID";
             }
             
             // ✅ FIX s4: GENERAR IF-ELSE CON LÓGICA DIFERIDA
             if (parser.codeGenerationEnabled && !RESULT.equals("ERROR")) {
                 String conditionKey = parser.popCodeKey();
                 String conditionCode = parser.getCodeValue(conditionKey);
                 String elseLabel = parser.generateLabel();
                 String endLabel = parser.generateLabel();
                 
                 // ✅ GENERAR ESTRUCTURA COMPLETA CON INSERCIÓN INTELIGENTE
                 parser.getCodeGenerator().generateDeferredIfElse(conditionCode, elseLabel, endLabel);
                 
                 System.out.println("DEBUG s4: IF-ELSE diferido generado");
             }
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stmt",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // NT$4 ::= 
            {
              Object RESULT =null;
 
              // ✅ GENERAR ETIQUETA DE INICIO INMEDIATAMENTE
              String startLabel = parser.generateLabel();
              String endLabel = parser.generateLabel();
              parser.pushLoopLabels(startLabel, endLabel);
              
              // ✅ GENERAR LA ETIQUETA DE INICIO AHORA (antes del body)
              if (parser.codeGenerationEnabled) {
                  parser.getCodeGenerator().generateLabel(startLabel);
                  System.out.println("DEBUG: DO-WHILE iniciado - etiqueta: " + startLabel);
              }
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // do_while ::= DO NT$4 LBLOCK block RBLOCK WHILE LPAREN exp RPAREN QUESTION 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object body = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String condition = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 
              // 1. VALIDACIÓN SEMÁNTICA
              if (!condition.equals("BOOL")) {
                  parser.report_error("Condición de DO-WHILE debe ser booleana", null);
                  RESULT = "ERROR";
              } else {
                  RESULT = "VOID";
              }
              
              // 2. ✅ FIX s2: CORREGIR LÓGICA DE CONDICIÓN
              if (parser.codeGenerationEnabled && !RESULT.equals("ERROR")) {
                  // Recuperar condición del stack
                  String conditionKey = parser.popCodeKey();
                  String conditionCode = parser.getCodeValue(conditionKey);
                  
                  // ✅ USAR ETIQUETAS DEL STACK
                  String[] labels = parser.peekLoopLabels();
                  String startLabel = labels[0];
                  String endLabel = labels[1];
                  
                  // ✅ LÓGICA CORRECTA: "MIENTRAS la condición sea TRUE, repetir"
                  // Si conditionCode = "contador <= 3", queremos:
                  // IF (contador <= 3) GOTO startLabel
                  parser.getCodeGenerator().emit("IF " + conditionCode + " GOTO " + startLabel);
                  
                  // ✅ GENERAR ETIQUETA DE SALIDA
                  parser.getCodeGenerator().generateLabel(endLabel);
                  
                  System.out.println("DEBUG s2: DO-WHILE - condición TRUE repite: " + conditionCode + " -> " + startLabel);
              }
              
              // ✅ POP DEL STACK AL TERMINAR
              parser.popLoopLabels();
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("do_while",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // NT$5 ::= 
            {
              Object RESULT =null;
		int initleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int initright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object init = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String condition = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int updateleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int updateright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String update = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
 
              // ✅ GENERAR ETIQUETAS PARA ESTE LOOP
              String startLabel = parser.generateLabel();
              String endLabel = parser.generateLabel();
              parser.pushLoopLabels(startLabel, endLabel);
              System.out.println("DEBUG: FOR iniciado - start: " + startLabel + ", end: " + endLabel);
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // for_stmt ::= FOR LPAREN decl_var exp QUESTION exp RPAREN LBLOCK NT$5 block RBLOCK 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int initleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int initright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object init = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String condition = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int updateleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int updateright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String update = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object body = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
              // 1. VALIDACIÓN SEMÁNTICA
              if (!condition.equals("BOOL")) {
                  parser.report_error("Condición de FOR debe ser booleana", null);
                  RESULT = "ERROR";
              } else {
                  RESULT = "VOID";
              }
              
              // 2. GENERACIÓN DE CÓDIGO
              if (parser.codeGenerationEnabled && !RESULT.equals("ERROR")) {
                  // Recuperar códigos generados
                  String updateKey = parser.popCodeKey();
                  String updateCode = parser.getCodeValue(updateKey);
                  
                  String conditionKey = parser.popCodeKey();
                  String conditionCode = parser.getCodeValue(conditionKey);
                  
                  // ✅ USAR ETIQUETAS DEL STACK
                  String[] labels = parser.peekLoopLabels();
                  String startLabel = labels[0];
                  String endLabel = labels[1];
                  
                  // ✅ GENERAR FOR CON ETIQUETAS DEL STACK
                  parser.getCodeGenerator().generateForWithExistingGrammar(conditionCode, updateCode, startLabel, endLabel);
                  
                  System.out.println("DEBUG: FOR - condición: " + conditionCode + ", update: " + updateCode);
                  parser.getCodeGenerator().cleanupForLoop();

              }
              
              // ✅ POP DEL STACK AL TERMINAR
              parser.popLoopLabels();
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_stmt",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // NT$6 ::= 
            {
              Object RESULT =null;
 
                 // ✅ ENTRAR A MODO SWITCH ANTES DE PROCESAR
                 parser.enterSwitchContext();
                 System.out.println("DEBUG: INICIANDO SWITCH - modo diferido activado");
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$6",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // switch_stmt ::= SWITCH NT$6 LPAREN exp RPAREN LBLOCK case_list RBLOCK 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int switchExprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int switchExprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String switchExpr = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int casesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int casesright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object cases = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                 if (parser.codeGenerationEnabled) {
                     // Recuperar la expresión del switch
                     String switchKey = parser.popCodeKey();
                     String switchValue = parser.getCodeValue(switchKey);
                     
                     // Generar etiquetas para el switch
                     String exitLabel = parser.generateLabel();
                     
                     // ✅ GENERAR SWITCH CON CÓDIGO DIFERIDO
                     parser.getCodeGenerator().generateCompleteSwitchWithDeferred(switchValue, exitLabel, parser.getDeferredSwitchCode());
                     
                     System.out.println("DEBUG: SWITCH generado - expr: " + switchValue + " -> " + exitLabel);
                 }
                 
                 // ✅ SALIR DEL MODO SWITCH
                 parser.exitSwitchContext();
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("switch_stmt",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // case_list ::= case_stmt case_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("case_list",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // case_list ::= default_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("case_list",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // case_list ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("case_list",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // case_stmt ::= CASE exp COLON block 
            {
              Object RESULT =null;
		int caseValueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int caseValueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String caseValue = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int caseBlockleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int caseBlockright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object caseBlock = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
               if (parser.codeGenerationEnabled) {
                   // Recuperar valor del case
                   String caseKey = parser.popCodeKey();
                   String caseVal = parser.getCodeValue(caseKey);
                   
                   // Generar etiqueta para este case
                   String caseLabel = parser.generateLabel();
                   
                   // ✅ REGISTRAR CASE para el switch
                   parser.getCodeGenerator().registerCase(caseVal, caseLabel);
                   
                   System.out.println("DEBUG: CASE registrado - valor: " + caseVal + " -> " + caseLabel);
               }
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("case_stmt",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // default_stmt ::= DEFAULT COLON block 
            {
              Object RESULT =null;
		int defaultBlockleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int defaultBlockright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object defaultBlock = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                  if (parser.codeGenerationEnabled) {
                      // Generar etiqueta para default
                      String defaultLabel = parser.generateLabel();
                      
                      // ✅ REGISTRAR DEFAULT
                      parser.getCodeGenerator().registerDefault(defaultLabel);
                      
                      System.out.println("DEBUG: DEFAULT registrado -> " + defaultLabel);
                  }
               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("default_stmt",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // break_stmt ::= BREAK QUESTION 
            {
              Object RESULT =null;
		 
                if (parser.codeGenerationEnabled) {
                    // ✅ PRIORIDAD 1: Si estamos en switch, usar el mecanismo de switch
                    if (parser.isInSwitchContext()) {
                        parser.deferSwitchCode("BREAK");
                        System.out.println("DEBUG: Break diferido para switch");
                    } 
                    // ✅ PRIORIDAD 2: Si estamos en loop, usar etiquetas de loop
                    else {
                        String[] loopLabels = parser.peekLoopLabels();
                        if (loopLabels != null) {
                            String endLabel = loopLabels[1];  // Etiqueta de salida del loop
                            parser.getCodeGenerator().generateBreakToLabel(endLabel);
                            System.out.println("DEBUG: Break generado para loop -> " + endLabel);
                        } else {
                            // ✅ FALLBACK: Break genérico (switch sin contexto activo)
                            parser.getCodeGenerator().generateBreak();
                            System.out.println("DEBUG: Break genérico");
                        }
                    }
                }
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("break_stmt",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // continue_stmt ::= CONTINUE QUESTION 
            {
              Object RESULT =null;
		 
                   if (parser.codeGenerationEnabled) {
                       String[] loopLabels = parser.peekLoopLabels();
                       if (loopLabels != null) {
                           String startLabel = loopLabels[0];  // Etiqueta de inicio del loop
                           parser.getCodeGenerator().generateContinue(startLabel);
                           System.out.println("DEBUG: Continue generado -> " + startLabel);
                       } else {
                           parser.report_error("CONTINUE solo puede usarse dentro de un loop", null);
                       }
                   }
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("continue_stmt",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // return_stmt ::= RETURN exp QUESTION 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                 System.out.println("DEBUG: Return con expresión, función actual: " + parser.getCurrentFunctionName());
                 
                 if (parser.getSemanticTable() != null && parser.getCurrentFunctionName() != null) {
                     parser.getSemanticTable().checkReturnStatement(parser.getCurrentFunctionName(), e, eleft);
                 } else {
                     System.err.println("ERROR: No se puede verificar return - función actual: " + parser.getCurrentFunctionName());
                 }
                 
                 if (parser.codeGenerationEnabled) {
                     // ✅ RECUPERAR EXPRESIÓN DEL STACK CORRECTAMENTE
                     String expKey = parser.popCodeKey();
                     
                     if (expKey != null) {
                         String expValue = parser.getCodeValue(expKey);
                         parser.getCodeGenerator().generateReturnWithValue(expValue);
                         System.out.println("DEBUG: Return generado con valor: " + expValue + " (clave: " + expKey + ")");
                     } else {
                         // ✅ SI NO HAY CLAVE, USAR LA EXPRESIÓN DIRECTAMENTE
                         parser.getCodeGenerator().generateReturnWithValue(e.toString());
                         System.out.println("DEBUG: Return generado con valor directo: " + e.toString());
                     }
                 }
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_stmt",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // return_stmt ::= RETURN QUESTION 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                 System.out.println("DEBUG: Return sin expresión, función actual: " + parser.getCurrentFunctionName());
                 
                 if (parser.getSemanticTable() != null && parser.getCurrentFunctionName() != null) {
                     parser.getSemanticTable().checkReturnStatement(parser.getCurrentFunctionName(), null, rleft);
                 } else {
                     System.err.println("ERROR: No se puede verificar return - función actual: " + parser.getCurrentFunctionName());
                 }
                 
                 if (parser.codeGenerationEnabled) {
                     parser.getCodeGenerator().generateReturnVoid();
                     System.out.println("DEBUG: Return void generado");
                 }
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_stmt",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // return_stmt ::= RETURN error QUESTION 
            {
              Object RESULT =null;
		 System.err.println("Error en expresión RETURN. Continuando..."); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_stmt",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // read_stmt ::= READ LPAREN ID RPAREN QUESTION 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 
               // ✅ VALIDACIÓN: Verificar que la variable existe
               if (parser.getSemanticTable() != null) {
                   SymbolInfo var = parser.getSemanticTable().checkVariableUsage(id.toString(), idleft);
                   if (var == null) {
                       parser.report_error("Variable '" + id + "' no declarada en READ", null);
                   } else {
                       var.setInicializada(true); // ✅ READ inicializa la variable
                       System.out.println("DEBUG: READ de variable '" + id + "' tipo " + var.getTipoVariable());
                   }
               }
               
               if (parser.codeGenerationEnabled) {
                   parser.getCodeGenerator().generateRead(id.toString());
                   System.out.println("DEBUG: READ generado para " + id);
               }
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("read_stmt",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // read_stmt ::= READ LPAREN error RPAREN QUESTION 
            {
              Object RESULT =null;
		 
                parser.report_error("Error en función read - argumento inválido", null); 
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("read_stmt",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // write_stmt ::= WRITE LPAREN exp RPAREN QUESTION 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 
                System.out.println("DEBUG: WRITE con expresión: " + e);
                
                // ✅ VALIDACIÓN: Verificar que la expresión sea válida
                if (e != null && e.equals("ERROR")) {
                    parser.report_error("Expresión inválida en write", null);
                }
                
                if (parser.codeGenerationEnabled && !e.equals("ERROR")) {
                    // ✅ PROCESAR STACK DE CÓDIGOS (como en return)
                    String expKey = parser.popCodeKey();
                    
                    if (expKey != null) {
                        String expValue = parser.getCodeValue(expKey);
                        parser.getCodeGenerator().generateWrite(expValue);
                        System.out.println("DEBUG: WRITE generado con valor: " + expValue + " (clave: " + expKey + ")");
                    } else {
                        // ✅ FALLBACK: usar la expresión directamente
                        parser.getCodeGenerator().generateWrite(e.toString());
                        System.out.println("DEBUG: WRITE generado con valor directo: " + e);
                    }
                }
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("write_stmt",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // write_stmt ::= WRITE LPAREN error RPAREN QUESTION 
            {
              Object RESULT =null;
		 
                 parser.report_error("Error en función write - expresión inválida", null); 
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("write_stmt",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
