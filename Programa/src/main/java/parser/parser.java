
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package main.java.parser;

import java_cup.runtime.*;
import java.util.*;
import main.java.symbol.SymbolTable;
import main.java.symbol.SemanticSymbolTable;
import main.java.intermedio.IntermediateCodeGenerator;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\175\000\002\002\004\000\002\053\002\000\002\002" +
    "\012\000\002\002\004\000\002\002\004\000\002\002\002" +
    "\000\002\054\002\000\002\005\013\000\002\055\002\000" +
    "\002\005\012\000\002\035\003\000\002\035\003\000\002" +
    "\035\003\000\002\035\003\000\002\035\003\000\002\043" +
    "\003\000\002\043\005\000\002\042\004\000\002\003\004" +
    "\000\002\003\004\000\002\003\002\000\002\034\003\000" +
    "\002\034\003\000\002\034\003\000\002\034\003\000\002" +
    "\034\003\000\002\006\013\000\002\006\015\000\002\040" +
    "\005\000\002\040\007\000\002\041\005\000\002\037\003" +
    "\000\002\037\005\000\002\036\011\000\002\007\004\000" +
    "\002\007\003\000\002\007\003\000\002\007\003\000\002" +
    "\007\003\000\002\007\003\000\002\007\003\000\002\007" +
    "\003\000\002\007\003\000\002\007\005\000\002\007\004" +
    "\000\002\010\006\000\002\010\006\000\002\010\006\000" +
    "\002\004\007\000\002\004\005\000\002\045\003\000\002" +
    "\045\003\000\002\045\003\000\002\045\003\000\002\045" +
    "\003\000\002\045\003\000\002\045\003\000\002\046\006" +
    "\000\002\046\005\000\002\011\003\000\002\020\005\000" +
    "\002\020\003\000\002\021\005\000\002\021\003\000\002" +
    "\022\004\000\002\022\003\000\002\022\005\000\002\017" +
    "\005\000\002\017\005\000\002\017\005\000\002\017\005" +
    "\000\002\017\005\000\002\017\005\000\002\017\003\000" +
    "\002\012\005\000\002\012\005\000\002\012\003\000\002" +
    "\013\005\000\002\013\005\000\002\013\005\000\002\013" +
    "\003\000\002\014\005\000\002\014\003\000\002\015\003" +
    "\000\002\015\003\000\002\023\004\000\002\023\004\000" +
    "\002\023\004\000\002\016\003\000\002\016\003\000\002" +
    "\016\003\000\002\016\003\000\002\016\005\000\002\044" +
    "\003\000\002\044\005\000\002\024\003\000\002\024\003" +
    "\000\002\024\003\000\002\024\003\000\002\025\011\000" +
    "\002\025\020\000\002\025\015\000\002\025\024\000\002" +
    "\025\011\000\002\026\013\000\002\026\013\000\002\027" +
    "\014\000\002\027\014\000\002\027\014\000\002\027\011" +
    "\000\002\047\011\000\002\047\011\000\002\050\004\000" +
    "\002\050\003\000\002\050\002\000\002\051\006\000\002" +
    "\052\005\000\002\030\004\000\002\031\005\000\002\031" +
    "\004\000\002\031\005\000\002\032\007\000\002\032\007" +
    "\000\002\033\007\000\002\033\007" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u012b\000\020\002\ufffc\003\011\014\004\015\013\016" +
    "\005\017\014\021\007\001\002\000\004\062\ufff7\001\002" +
    "\000\004\062\ufff4\001\002\000\004\062\u011c\001\002\000" +
    "\006\024\020\062\ufff3\001\002\000\004\002\017\001\002" +
    "\000\020\002\ufffc\003\011\014\004\015\013\016\005\017" +
    "\014\021\007\001\002\000\020\002\ufffc\003\011\014\004" +
    "\015\013\016\005\017\014\021\007\001\002\000\004\062" +
    "\ufff6\001\002\000\004\062\ufff5\001\002\000\004\002\ufffe" +
    "\001\002\000\004\002\ufffd\001\002\000\004\002\001\001" +
    "\002\000\004\050\021\001\002\000\004\051\022\001\002" +
    "\000\004\052\023\001\002\000\074\003\000\004\000\007" +
    "\000\011\000\012\000\013\000\014\000\015\000\016\000" +
    "\017\000\020\000\022\000\023\000\025\000\026\000\030" +
    "\000\035\000\036\000\047\000\050\000\052\000\053\000" +
    "\062\000\063\000\064\000\065\000\066\000\067\000\070" +
    "\000\001\002\000\074\003\064\004\057\007\112\011\046" +
    "\012\070\013\061\014\041\015\077\016\054\017\031\020" +
    "\103\022\076\023\050\025\062\026\110\030\045\035\027" +
    "\036\047\047\052\050\037\052\066\053\uffed\062\060\063" +
    "\030\064\035\065\102\066\067\067\065\070\073\001\002" +
    "\000\042\027\uffa7\030\uffa7\031\uffa7\032\uffa7\033\uffa7\034" +
    "\uffa7\037\uffa7\040\uffa7\041\uffa7\042\uffa7\043\uffa7\044\uffa7" +
    "\045\uffa7\046\uffa7\054\uffa7\056\366\001\002\000\050\027" +
    "\uffad\030\uffad\031\uffad\032\uffad\033\uffad\034\uffad\037\uffad" +
    "\040\uffad\041\uffad\042\uffad\043\uffad\044\uffad\045\uffad\046" +
    "\uffad\051\uffad\054\uffad\055\uffad\060\uffad\073\uffad\001\002" +
    "\000\004\062\u011b\001\002\000\050\027\uffcf\030\uffcf\031" +
    "\uffcf\032\uffcf\033\uffcf\034\uffcf\037\uffcf\040\uffcf\041\uffcf" +
    "\042\uffcf\043\uffcf\044\uffcf\045\uffcf\046\uffcf\051\uffcf\054" +
    "\uffcf\055\uffcf\060\uffcf\073\uffcf\001\002\000\004\062\uffe9" +
    "\001\002\000\050\027\uffaf\030\uffaf\031\uffaf\032\uffaf\033" +
    "\uffaf\034\uffaf\037\uffaf\040\uffaf\041\uffaf\042\uffaf\043\uffaf" +
    "\044\uffaf\045\uffaf\046\uffaf\051\uffaf\054\uffaf\055\uffaf\060" +
    "\uffaf\073\uffaf\001\002\000\100\003\uffa0\004\uffa0\007\uffa0" +
    "\011\uffa0\012\uffa0\013\uffa0\014\uffa0\015\uffa0\016\uffa0\017" +
    "\uffa0\020\uffa0\022\uffa0\023\uffa0\025\uffa0\026\uffa0\030\uffa0" +
    "\035\uffa0\036\uffa0\047\uffa0\050\uffa0\052\uffa0\053\uffa0\062" +
    "\uffa0\063\uffa0\064\uffa0\065\uffa0\066\uffa0\067\uffa0\070\uffa0" +
    "\071\uffa0\072\uffa0\001\002\000\100\003\uffdd\004\uffdd\007" +
    "\uffdd\011\uffdd\012\uffdd\013\uffdd\014\uffdd\015\uffdd\016\uffdd" +
    "\017\uffdd\020\uffdd\022\uffdd\023\uffdd\025\uffdd\026\uffdd\030" +
    "\uffdd\035\uffdd\036\uffdd\047\uffdd\050\uffdd\052\uffdd\053\uffdd" +
    "\062\uffdd\063\uffdd\064\uffdd\065\uffdd\066\uffdd\067\uffdd\070" +
    "\uffdd\071\uffdd\072\uffdd\001\002\000\050\027\uffce\030\uffce" +
    "\031\uffce\032\uffce\033\uffce\034\uffce\037\uffce\040\uffce\041" +
    "\uffce\042\uffce\043\uffce\044\uffce\045\uffce\046\uffce\051\uffce" +
    "\054\uffce\055\uffce\060\uffce\073\uffce\001\002\000\040\027" +
    "\u0110\030\u0111\037\u010b\040\u010f\041\u010e\042\u010c\043\u010d" +
    "\044\u0112\045\uffb8\046\uffb8\051\uffb8\054\uffb8\055\uffb8\060" +
    "\uffb8\073\uffb8\001\002\000\034\025\062\026\110\030\045" +
    "\035\027\036\047\047\052\050\037\062\124\063\030\064" +
    "\035\065\102\066\067\067\065\001\002\000\050\027\uffa8" +
    "\030\uffa8\031\uffa8\032\uffa8\033\uffa8\034\uffa8\037\uffa8\040" +
    "\uffa8\041\uffa8\042\uffa8\043\uffa8\044\uffa8\045\uffa8\046\uffa8" +
    "\051\uffa8\054\uffa8\055\uffa8\060\uffa8\073\uffa8\001\002\000" +
    "\004\062\uffec\001\002\000\050\027\uffb1\030\uffb1\031\uffb1" +
    "\032\uffb1\033\uffb1\034\144\037\uffb1\040\uffb1\041\uffb1\042" +
    "\uffb1\043\uffb1\044\uffb1\045\uffb1\046\uffb1\051\uffb1\054\uffb1" +
    "\055\uffb1\060\uffb1\073\uffb1\001\002\000\004\053\u0108\001" +
    "\002\000\020\045\uffc0\046\uffc0\051\uffc0\054\uffc0\055\uffc0" +
    "\060\uffc0\073\uffc0\001\002\000\024\025\062\026\110\050" +
    "\123\062\124\063\030\064\035\065\102\066\067\067\065" +
    "\001\002\000\004\050\342\001\002\000\004\062\341\001" +
    "\002\000\004\050\332\001\002\000\100\003\uffda\004\uffda" +
    "\007\uffda\011\uffda\012\uffda\013\uffda\014\uffda\015\uffda\016" +
    "\uffda\017\uffda\020\uffda\022\uffda\023\uffda\025\uffda\026\uffda" +
    "\030\uffda\035\uffda\036\uffda\047\uffda\050\uffda\052\uffda\053" +
    "\uffda\062\uffda\063\uffda\064\uffda\065\uffda\066\uffda\067\uffda" +
    "\070\uffda\071\uffda\072\uffda\001\002\000\024\025\062\026" +
    "\110\050\123\062\124\063\030\064\035\065\102\066\067" +
    "\067\065\001\002\000\100\003\uffd8\004\uffd8\007\uffd8\011" +
    "\uffd8\012\uffd8\013\uffd8\014\uffd8\015\uffd8\016\uffd8\017\uffd8" +
    "\020\uffd8\022\uffd8\023\uffd8\025\uffd8\026\uffd8\030\uffd8\035" +
    "\uffd8\036\uffd8\047\uffd8\050\uffd8\052\uffd8\053\uffd8\062\uffd8" +
    "\063\uffd8\064\uffd8\065\uffd8\066\uffd8\067\uffd8\070\uffd8\071" +
    "\uffd8\072\uffd8\001\002\000\004\062\uffea\001\002\000\100" +
    "\003\uffd9\004\uffd9\007\uffd9\011\uffd9\012\uffd9\013\uffd9\014" +
    "\uffd9\015\uffd9\016\uffd9\017\uffd9\020\uffd9\022\uffd9\023\uffd9" +
    "\025\uffd9\026\uffd9\030\uffd9\035\uffd9\036\uffd9\047\uffd9\050" +
    "\uffd9\052\uffd9\053\uffd9\062\uffd9\063\uffd9\064\uffd9\065\uffd9" +
    "\066\uffd9\067\uffd9\070\uffd9\071\uffd9\072\uffd9\001\002\000" +
    "\050\027\uffae\030\uffae\031\uffae\032\uffae\033\uffae\034\uffae" +
    "\037\uffae\040\uffae\041\uffae\042\uffae\043\uffae\044\uffae\045" +
    "\uffae\046\uffae\051\uffae\054\uffae\055\uffae\060\uffae\073\uffae" +
    "\001\002\000\004\050\277\001\002\000\046\027\uffa9\030" +
    "\uffa9\031\uffa9\032\uffa9\033\uffa9\034\uffa9\037\uffa9\040\uffa9" +
    "\041\uffa9\042\uffa9\043\uffa9\044\uffa9\045\uffa9\046\uffa9\050" +
    "\125\054\uffa9\056\272\057\126\001\002\000\040\003\267" +
    "\025\062\026\110\030\045\035\027\036\047\047\052\050" +
    "\037\054\265\062\124\063\030\064\035\065\102\066\067" +
    "\067\065\001\002\000\050\027\uffca\030\uffca\031\uffca\032" +
    "\uffca\033\uffca\034\uffca\037\uffca\040\uffca\041\uffca\042\uffca" +
    "\043\uffca\044\uffca\045\uffca\046\uffca\051\uffca\054\uffca\055" +
    "\uffca\060\uffca\073\uffca\001\002\000\020\045\231\046\uffc4" +
    "\051\uffc4\054\uffc4\055\uffc4\060\uffc4\073\uffc4\001\002\000" +
    "\102\003\064\004\057\007\112\011\046\012\070\013\061" +
    "\014\041\015\077\016\054\017\031\020\103\022\076\023" +
    "\050\025\062\026\110\030\045\035\027\036\047\047\052" +
    "\050\037\052\066\053\uffed\054\264\062\060\063\030\064" +
    "\035\065\102\066\067\067\065\070\073\071\uffed\072\uffed" +
    "\001\002\000\050\027\uffcb\030\uffcb\031\uffcb\032\uffcb\033" +
    "\uffcb\034\uffcb\037\uffcb\040\uffcb\041\uffcb\042\uffcb\043\uffcb" +
    "\044\uffcb\045\uffcb\046\uffcb\051\uffcb\054\uffcb\055\uffcb\060" +
    "\uffcb\073\uffcb\001\002\000\074\003\064\004\057\007\112" +
    "\011\046\012\070\013\061\014\041\015\077\016\054\017" +
    "\031\020\103\022\076\023\050\025\062\026\110\030\045" +
    "\035\027\036\047\047\052\050\037\052\066\053\uffed\062" +
    "\060\063\030\064\035\065\102\066\067\067\065\070\073" +
    "\001\002\000\050\027\uffcc\030\uffcc\031\uffcc\032\uffcc\033" +
    "\uffcc\034\uffcc\037\uffcc\040\uffcc\041\uffcc\042\uffcc\043\uffcc" +
    "\044\uffcc\045\uffcc\046\uffcc\051\uffcc\054\uffcc\055\uffcc\060" +
    "\uffcc\073\uffcc\001\002\000\004\054\260\001\002\000\050" +
    "\027\uffa6\030\uffa6\031\uffa6\032\uffa6\033\uffa6\034\uffa6\037" +
    "\uffa6\040\uffa6\041\uffa6\042\uffa6\043\uffa6\044\uffa6\045\uffa6" +
    "\046\uffa6\051\uffa6\054\uffa6\055\uffa6\060\uffa6\073\uffa6\001" +
    "\002\000\100\003\uff9f\004\uff9f\007\uff9f\011\uff9f\012\uff9f" +
    "\013\uff9f\014\uff9f\015\uff9f\016\uff9f\017\uff9f\020\uff9f\022" +
    "\uff9f\023\uff9f\025\uff9f\026\uff9f\030\uff9f\035\uff9f\036\uff9f" +
    "\047\uff9f\050\uff9f\052\uff9f\053\uff9f\062\uff9f\063\uff9f\064" +
    "\uff9f\065\uff9f\066\uff9f\067\uff9f\070\uff9f\071\uff9f\072\uff9f" +
    "\001\002\000\004\050\233\001\002\000\016\046\227\051" +
    "\uffc6\054\uffc6\055\uffc6\060\uffc6\073\uffc6\001\002\000\004" +
    "\062\174\001\002\000\004\050\165\001\002\000\004\062" +
    "\uffeb\001\002\000\100\003\uffa1\004\uffa1\007\uffa1\011\uffa1" +
    "\012\uffa1\013\uffa1\014\uffa1\015\uffa1\016\uffa1\017\uffa1\020" +
    "\uffa1\022\uffa1\023\uffa1\025\uffa1\026\uffa1\030\uffa1\035\uffa1" +
    "\036\uffa1\047\uffa1\050\uffa1\052\uffa1\053\uffa1\062\uffa1\063" +
    "\uffa1\064\uffa1\065\uffa1\066\uffa1\067\uffa1\070\uffa1\071\uffa1" +
    "\072\uffa1\001\002\000\020\045\uffc2\046\uffc2\051\uffc2\054" +
    "\uffc2\055\uffc2\060\uffc2\073\uffc2\001\002\000\050\027\uffcd" +
    "\030\uffcd\031\uffcd\032\uffcd\033\uffcd\034\uffcd\037\uffcd\040" +
    "\uffcd\041\uffcd\042\uffcd\043\uffcd\044\uffcd\045\uffcd\046\uffcd" +
    "\051\uffcd\054\uffcd\055\uffcd\060\uffcd\073\uffcd\001\002\000" +
    "\004\062\uffe8\001\002\000\100\003\uffde\004\uffde\007\uffde" +
    "\011\uffde\012\uffde\013\uffde\014\uffde\015\uffde\016\uffde\017" +
    "\uffde\020\uffde\022\uffde\023\uffde\025\uffde\026\uffde\030\uffde" +
    "\035\uffde\036\uffde\047\uffde\050\uffde\052\uffde\053\uffde\062" +
    "\uffde\063\uffde\064\uffde\065\uffde\066\uffde\067\uffde\070\uffde" +
    "\071\uffde\072\uffde\001\002\000\100\003\uffdb\004\uffdb\007" +
    "\uffdb\011\uffdb\012\uffdb\013\uffdb\014\uffdb\015\uffdb\016\uffdb" +
    "\017\uffdb\020\uffdb\022\uffdb\023\uffdb\025\uffdb\026\uffdb\030" +
    "\uffdb\035\uffdb\036\uffdb\047\uffdb\050\uffdb\052\uffdb\053\uffdb" +
    "\062\uffdb\063\uffdb\064\uffdb\065\uffdb\066\uffdb\067\uffdb\070" +
    "\uffdb\071\uffdb\072\uffdb\001\002\000\100\003\uffa2\004\uffa2" +
    "\007\uffa2\011\uffa2\012\uffa2\013\uffa2\014\uffa2\015\uffa2\016" +
    "\uffa2\017\uffa2\020\uffa2\022\uffa2\023\uffa2\025\uffa2\026\uffa2" +
    "\030\uffa2\035\uffa2\036\uffa2\047\uffa2\050\uffa2\052\uffa2\053" +
    "\uffa2\062\uffa2\063\uffa2\064\uffa2\065\uffa2\066\uffa2\067\uffa2" +
    "\070\uffa2\071\uffa2\072\uffa2\001\002\000\100\003\uffd7\004" +
    "\uffd7\007\uffd7\011\uffd7\012\uffd7\013\uffd7\014\uffd7\015\uffd7" +
    "\016\uffd7\017\uffd7\020\uffd7\022\uffd7\023\uffd7\025\uffd7\026" +
    "\uffd7\030\uffd7\035\uffd7\036\uffd7\047\uffd7\050\uffd7\052\uffd7" +
    "\053\uffd7\062\uffd7\063\uffd7\064\uffd7\065\uffd7\066\uffd7\067" +
    "\uffd7\070\uffd7\071\uffd7\072\uffd7\001\002\000\050\027\uffc9" +
    "\030\uffc9\031\uffc9\032\uffc9\033\uffc9\034\uffc9\037\uffc9\040" +
    "\uffc9\041\uffc9\042\uffc9\043\uffc9\044\uffc9\045\uffc9\046\uffc9" +
    "\051\uffc9\054\uffc9\055\uffc9\060\uffc9\073\uffc9\001\002\000" +
    "\004\054\164\001\002\000\004\052\151\001\002\000\100" +
    "\003\064\004\057\007\112\011\046\012\070\013\061\014" +
    "\041\015\077\016\054\017\031\020\103\022\076\023\050" +
    "\025\062\026\110\030\045\035\027\036\047\047\052\050" +
    "\037\052\066\053\uffed\062\060\063\030\064\035\065\102" +
    "\066\067\067\065\070\073\071\uffed\072\uffed\001\002\000" +
    "\100\003\uffdc\004\uffdc\007\uffdc\011\uffdc\012\uffdc\013\uffdc" +
    "\014\uffdc\015\uffdc\016\uffdc\017\uffdc\020\uffdc\022\uffdc\023" +
    "\uffdc\025\uffdc\026\uffdc\030\uffdc\035\uffdc\036\uffdc\047\uffdc" +
    "\050\uffdc\052\uffdc\053\uffdc\062\uffdc\063\uffdc\064\uffdc\065" +
    "\uffdc\066\uffdc\067\uffdc\070\uffdc\071\uffdc\072\uffdc\001\002" +
    "\000\046\027\uffb5\030\uffb5\031\120\032\117\033\116\037" +
    "\uffb5\040\uffb5\041\uffb5\042\uffb5\043\uffb5\044\uffb5\045\uffb5" +
    "\046\uffb5\051\uffb5\054\uffb5\055\uffb5\060\uffb5\073\uffb5\001" +
    "\002\000\032\025\062\026\110\030\045\035\027\036\047" +
    "\050\123\062\124\063\030\064\035\065\102\066\067\067" +
    "\065\001\002\000\032\025\062\026\110\030\045\035\027" +
    "\036\047\050\123\062\124\063\030\064\035\065\102\066" +
    "\067\067\065\001\002\000\032\025\062\026\110\030\045" +
    "\035\027\036\047\050\123\062\124\063\030\064\035\065" +
    "\102\066\067\067\065\001\002\000\050\027\uffa7\030\uffa7" +
    "\031\uffa7\032\uffa7\033\uffa7\034\uffa7\037\uffa7\040\uffa7\041" +
    "\uffa7\042\uffa7\043\uffa7\044\uffa7\045\uffa7\046\uffa7\051\uffa7" +
    "\054\uffa7\055\uffa7\060\uffa7\073\uffa7\001\002\000\050\027" +
    "\uffb4\030\uffb4\031\uffb4\032\uffb4\033\uffb4\034\144\037\uffb4" +
    "\040\uffb4\041\uffb4\042\uffb4\043\uffb4\044\uffb4\045\uffb4\046" +
    "\uffb4\051\uffb4\054\uffb4\055\uffb4\060\uffb4\073\uffb4\001\002" +
    "\000\034\025\062\026\110\030\045\035\027\036\047\047" +
    "\052\050\037\062\124\063\030\064\035\065\102\066\067" +
    "\067\065\001\002\000\054\027\uffa9\030\uffa9\031\uffa9\032" +
    "\uffa9\033\uffa9\034\uffa9\037\uffa9\040\uffa9\041\uffa9\042\uffa9" +
    "\043\uffa9\044\uffa9\045\uffa9\046\uffa9\050\125\051\uffa9\054" +
    "\uffa9\055\uffa9\057\126\060\uffa9\073\uffa9\001\002\000\036" +
    "\025\062\026\110\030\045\035\027\036\047\047\052\050" +
    "\037\051\134\062\124\063\030\064\035\065\102\066\067" +
    "\067\065\001\002\000\034\025\062\026\110\030\045\035" +
    "\027\036\047\047\052\050\037\062\124\063\030\064\035" +
    "\065\102\066\067\067\065\001\002\000\004\060\130\001" +
    "\002\000\004\057\131\001\002\000\034\025\062\026\110" +
    "\030\045\035\027\036\047\047\052\050\037\062\124\063" +
    "\030\064\035\065\102\066\067\067\065\001\002\000\004" +
    "\060\133\001\002\000\052\027\uffe0\030\uffe0\031\uffe0\032" +
    "\uffe0\033\uffe0\034\uffe0\037\uffe0\040\uffe0\041\uffe0\042\uffe0" +
    "\043\uffe0\044\uffe0\045\uffe0\046\uffe0\051\uffe0\054\uffe0\055" +
    "\uffe0\056\uffe0\060\uffe0\073\uffe0\001\002\000\050\027\uffc7" +
    "\030\uffc7\031\uffc7\032\uffc7\033\uffc7\034\uffc7\037\uffc7\040" +
    "\uffc7\041\uffc7\042\uffc7\043\uffc7\044\uffc7\045\uffc7\046\uffc7" +
    "\051\uffc7\054\uffc7\055\uffc7\060\uffc7\073\uffc7\001\002\000" +
    "\006\051\uffa4\055\140\001\002\000\004\051\137\001\002" +
    "\000\050\027\uffc8\030\uffc8\031\uffc8\032\uffc8\033\uffc8\034" +
    "\uffc8\037\uffc8\040\uffc8\041\uffc8\042\uffc8\043\uffc8\044\uffc8" +
    "\045\uffc8\046\uffc8\051\uffc8\054\uffc8\055\uffc8\060\uffc8\073" +
    "\uffc8\001\002\000\034\025\062\026\110\030\045\035\027" +
    "\036\047\047\052\050\037\062\124\063\030\064\035\065" +
    "\102\066\067\067\065\001\002\000\004\051\uffa3\001\002" +
    "\000\004\051\143\001\002\000\050\027\uffa5\030\uffa5\031" +
    "\uffa5\032\uffa5\033\uffa5\034\uffa5\037\uffa5\040\uffa5\041\uffa5" +
    "\042\uffa5\043\uffa5\044\uffa5\045\uffa5\046\uffa5\051\uffa5\054" +
    "\uffa5\055\uffa5\060\uffa5\073\uffa5\001\002\000\032\025\062" +
    "\026\110\030\045\035\027\036\047\050\123\062\124\063" +
    "\030\064\035\065\102\066\067\067\065\001\002\000\050" +
    "\027\uffb0\030\uffb0\031\uffb0\032\uffb0\033\uffb0\034\uffb0\037" +
    "\uffb0\040\uffb0\041\uffb0\042\uffb0\043\uffb0\044\uffb0\045\uffb0" +
    "\046\uffb0\051\uffb0\054\uffb0\055\uffb0\060\uffb0\073\uffb0\001" +
    "\002\000\050\027\uffb3\030\uffb3\031\uffb3\032\uffb3\033\uffb3" +
    "\034\144\037\uffb3\040\uffb3\041\uffb3\042\uffb3\043\uffb3\044" +
    "\uffb3\045\uffb3\046\uffb3\051\uffb3\054\uffb3\055\uffb3\060\uffb3" +
    "\073\uffb3\001\002\000\050\027\uffb2\030\uffb2\031\uffb2\032" +
    "\uffb2\033\uffb2\034\144\037\uffb2\040\uffb2\041\uffb2\042\uffb2" +
    "\043\uffb2\044\uffb2\045\uffb2\046\uffb2\051\uffb2\054\uffb2\055" +
    "\uffb2\060\uffb2\073\uffb2\001\002\000\010\053\uffef\071\uffef" +
    "\072\uffef\001\002\000\074\003\064\004\057\007\112\011" +
    "\046\012\070\013\061\014\041\015\077\016\054\017\031" +
    "\020\103\022\076\023\050\025\062\026\110\030\045\035" +
    "\027\036\047\047\052\050\037\052\066\053\uffed\062\060" +
    "\063\030\064\035\065\102\066\067\067\065\070\073\001" +
    "\002\000\004\053\153\001\002\000\004\010\154\001\002" +
    "\000\004\050\155\001\002\000\036\003\157\025\062\026" +
    "\110\030\045\035\027\036\047\047\052\050\037\062\124" +
    "\063\030\064\035\065\102\066\067\067\065\001\002\000" +
    "\004\051\162\001\002\000\004\051\160\001\002\000\004" +
    "\054\161\001\002\000\100\003\uff98\004\uff98\007\uff98\011" +
    "\uff98\012\uff98\013\uff98\014\uff98\015\uff98\016\uff98\017\uff98" +
    "\020\uff98\022\uff98\023\uff98\025\uff98\026\uff98\030\uff98\035" +
    "\uff98\036\uff98\047\uff98\050\uff98\052\uff98\053\uff98\062\uff98" +
    "\063\uff98\064\uff98\065\uff98\066\uff98\067\uff98\070\uff98\071" +
    "\uff98\072\uff98\001\002\000\004\054\163\001\002\000\100" +
    "\003\uff99\004\uff99\007\uff99\011\uff99\012\uff99\013\uff99\014" +
    "\uff99\015\uff99\016\uff99\017\uff99\020\uff99\022\uff99\023\uff99" +
    "\025\uff99\026\uff99\030\uff99\035\uff99\036\uff99\047\uff99\050" +
    "\uff99\052\uff99\053\uff99\062\uff99\063\uff99\064\uff99\065\uff99" +
    "\066\uff99\067\uff99\070\uff99\071\uff99\072\uff99\001\002\000" +
    "\100\003\uffdf\004\uffdf\007\uffdf\011\uffdf\012\uffdf\013\uffdf" +
    "\014\uffdf\015\uffdf\016\uffdf\017\uffdf\020\uffdf\022\uffdf\023" +
    "\uffdf\025\uffdf\026\uffdf\030\uffdf\035\uffdf\036\uffdf\047\uffdf" +
    "\050\uffdf\052\uffdf\053\uffdf\062\uffdf\063\uffdf\064\uffdf\065" +
    "\uffdf\066\uffdf\067\uffdf\070\uffdf\071\uffdf\072\uffdf\001\002" +
    "\000\006\003\167\062\166\001\002\000\004\051\172\001" +
    "\002\000\004\051\170\001\002\000\004\054\171\001\002" +
    "\000\100\003\uff87\004\uff87\007\uff87\011\uff87\012\uff87\013" +
    "\uff87\014\uff87\015\uff87\016\uff87\017\uff87\020\uff87\022\uff87" +
    "\023\uff87\025\uff87\026\uff87\030\uff87\035\uff87\036\uff87\047" +
    "\uff87\050\uff87\052\uff87\053\uff87\062\uff87\063\uff87\064\uff87" +
    "\065\uff87\066\uff87\067\uff87\070\uff87\071\uff87\072\uff87\001" +
    "\002\000\004\054\173\001\002\000\100\003\uff88\004\uff88" +
    "\007\uff88\011\uff88\012\uff88\013\uff88\014\uff88\015\uff88\016" +
    "\uff88\017\uff88\020\uff88\022\uff88\023\uff88\025\uff88\026\uff88" +
    "\030\uff88\035\uff88\036\uff88\047\uff88\050\uff88\052\uff88\053" +
    "\uff88\062\uff88\063\uff88\064\uff88\065\uff88\066\uff88\067\uff88" +
    "\070\uff88\071\uff88\072\uff88\001\002\000\010\054\175\056" +
    "\177\057\176\001\002\000\100\003\uffd0\004\uffd0\007\uffd0" +
    "\011\uffd0\012\uffd0\013\uffd0\014\uffd0\015\uffd0\016\uffd0\017" +
    "\uffd0\020\uffd0\022\uffd0\023\uffd0\025\uffd0\026\uffd0\030\uffd0" +
    "\035\uffd0\036\uffd0\047\uffd0\050\uffd0\052\uffd0\053\uffd0\062" +
    "\uffd0\063\uffd0\064\uffd0\065\uffd0\066\uffd0\067\uffd0\070\uffd0" +
    "\071\uffd0\072\uffd0\001\002\000\034\025\062\026\110\030" +
    "\045\035\027\036\047\047\052\050\037\062\124\063\030" +
    "\064\035\065\102\066\067\067\065\001\002\000\034\025" +
    "\062\026\110\030\045\035\027\036\047\047\052\050\037" +
    "\062\124\063\030\064\035\065\102\066\067\067\065\001" +
    "\002\000\004\054\201\001\002\000\100\003\uffd1\004\uffd1" +
    "\007\uffd1\011\uffd1\012\uffd1\013\uffd1\014\uffd1\015\uffd1\016" +
    "\uffd1\017\uffd1\020\uffd1\022\uffd1\023\uffd1\025\uffd1\026\uffd1" +
    "\030\uffd1\035\uffd1\036\uffd1\047\uffd1\050\uffd1\052\uffd1\053" +
    "\uffd1\062\uffd1\063\uffd1\064\uffd1\065\uffd1\066\uffd1\067\uffd1" +
    "\070\uffd1\071\uffd1\072\uffd1\001\002\000\004\060\203\001" +
    "\002\000\004\057\204\001\002\000\034\025\062\026\110" +
    "\030\045\035\027\036\047\047\052\050\037\062\124\063" +
    "\030\064\035\065\102\066\067\067\065\001\002\000\004" +
    "\060\206\001\002\000\006\054\207\056\210\001\002\000" +
    "\100\003\uffe7\004\uffe7\007\uffe7\011\uffe7\012\uffe7\013\uffe7" +
    "\014\uffe7\015\uffe7\016\uffe7\017\uffe7\020\uffe7\022\uffe7\023" +
    "\uffe7\025\uffe7\026\uffe7\030\uffe7\035\uffe7\036\uffe7\047\uffe7" +
    "\050\uffe7\052\uffe7\053\uffe7\062\uffe7\063\uffe7\064\uffe7\065" +
    "\uffe7\066\uffe7\067\uffe7\070\uffe7\071\uffe7\072\uffe7\001\002" +
    "\000\004\057\211\001\002\000\004\057\215\001\002\000" +
    "\004\054\213\001\002\000\100\003\uffe6\004\uffe6\007\uffe6" +
    "\011\uffe6\012\uffe6\013\uffe6\014\uffe6\015\uffe6\016\uffe6\017" +
    "\uffe6\020\uffe6\022\uffe6\023\uffe6\025\uffe6\026\uffe6\030\uffe6" +
    "\035\uffe6\036\uffe6\047\uffe6\050\uffe6\052\uffe6\053\uffe6\062" +
    "\uffe6\063\uffe6\064\uffe6\065\uffe6\066\uffe6\067\uffe6\070\uffe6" +
    "\071\uffe6\072\uffe6\001\002\000\006\055\223\060\224\001" +
    "\002\000\034\025\062\026\110\030\045\035\027\036\047" +
    "\047\052\050\037\062\124\063\030\064\035\065\102\066" +
    "\067\067\065\001\002\000\006\055\221\060\uffe2\001\002" +
    "\000\004\060\220\001\002\000\006\055\uffe3\060\uffe3\001" +
    "\002\000\034\025\062\026\110\030\045\035\027\036\047" +
    "\047\052\050\037\062\124\063\030\064\035\065\102\066" +
    "\067\067\065\001\002\000\004\060\uffe1\001\002\000\004" +
    "\057\215\001\002\000\004\054\uffe5\001\002\000\004\060" +
    "\226\001\002\000\004\054\uffe4\001\002\000\034\025\062" +
    "\026\110\030\045\035\027\036\047\047\052\050\037\062" +
    "\124\063\030\064\035\065\102\066\067\067\065\001\002" +
    "\000\020\045\231\046\uffc5\051\uffc5\054\uffc5\055\uffc5\060" +
    "\uffc5\073\uffc5\001\002\000\034\025\062\026\110\030\045" +
    "\035\027\036\047\047\052\050\037\062\124\063\030\064" +
    "\035\065\102\066\067\067\065\001\002\000\020\045\uffc3" +
    "\046\uffc3\051\uffc3\054\uffc3\055\uffc3\060\uffc3\073\uffc3\001" +
    "\002\000\036\003\235\025\062\026\110\030\045\035\027" +
    "\036\047\047\052\050\037\062\124\063\030\064\035\065" +
    "\102\066\067\067\065\001\002\000\004\051\254\001\002" +
    "\000\004\051\236\001\002\000\004\052\237\001\002\000" +
    "\010\053\uff8f\071\244\072\240\001\002\000\004\073\252" +
    "\001\002\000\004\053\uff90\001\002\000\010\053\uff8f\071" +
    "\244\072\240\001\002\000\004\053\250\001\002\000\034" +
    "\025\062\026\110\030\045\035\027\036\047\047\052\050" +
    "\037\062\124\063\030\064\035\065\102\066\067\067\065" +
    "\001\002\000\004\073\246\001\002\000\100\003\064\004" +
    "\057\007\112\011\046\012\070\013\061\014\041\015\077" +
    "\016\054\017\031\020\103\022\076\023\050\025\062\026" +
    "\110\030\045\035\027\036\047\047\052\050\037\052\066" +
    "\053\uffed\062\060\063\030\064\035\065\102\066\067\067" +
    "\065\070\073\071\uffed\072\uffed\001\002\000\010\053\uff8e" +
    "\071\uff8e\072\uff8e\001\002\000\100\003\uff92\004\uff92\007" +
    "\uff92\011\uff92\012\uff92\013\uff92\014\uff92\015\uff92\016\uff92" +
    "\017\uff92\020\uff92\022\uff92\023\uff92\025\uff92\026\uff92\030" +
    "\uff92\035\uff92\036\uff92\047\uff92\050\uff92\052\uff92\053\uff92" +
    "\062\uff92\063\uff92\064\uff92\065\uff92\066\uff92\067\uff92\070" +
    "\uff92\071\uff92\072\uff92\001\002\000\004\053\uff91\001\002" +
    "\000\074\003\064\004\057\007\112\011\046\012\070\013" +
    "\061\014\041\015\077\016\054\017\031\020\103\022\076" +
    "\023\050\025\062\026\110\030\045\035\027\036\047\047" +
    "\052\050\037\052\066\053\uffed\062\060\063\030\064\035" +
    "\065\102\066\067\067\065\070\073\001\002\000\004\053" +
    "\uff8d\001\002\000\004\052\255\001\002\000\010\053\uff8f" +
    "\071\244\072\240\001\002\000\004\053\257\001\002\000" +
    "\100\003\uff93\004\uff93\007\uff93\011\uff93\012\uff93\013\uff93" +
    "\014\uff93\015\uff93\016\uff93\017\uff93\020\uff93\022\uff93\023" +
    "\uff93\025\uff93\026\uff93\030\uff93\035\uff93\036\uff93\047\uff93" +
    "\050\uff93\052\uff93\053\uff93\062\uff93\063\uff93\064\uff93\065" +
    "\uff93\066\uff93\067\uff93\070\uff93\071\uff93\072\uff93\001\002" +
    "\000\100\003\uff8c\004\uff8c\007\uff8c\011\uff8c\012\uff8c\013" +
    "\uff8c\014\uff8c\015\uff8c\016\uff8c\017\uff8c\020\uff8c\022\uff8c" +
    "\023\uff8c\025\uff8c\026\uff8c\030\uff8c\035\uff8c\036\uff8c\047" +
    "\uff8c\050\uff8c\052\uff8c\053\uff8c\062\uff8c\063\uff8c\064\uff8c" +
    "\065\uff8c\066\uff8c\067\uff8c\070\uff8c\071\uff8c\072\uff8c\001" +
    "\002\000\004\053\262\001\002\000\100\003\uffd6\004\uffd6" +
    "\007\uffd6\011\uffd6\012\uffd6\013\uffd6\014\uffd6\015\uffd6\016" +
    "\uffd6\017\uffd6\020\uffd6\022\uffd6\023\uffd6\025\uffd6\026\uffd6" +
    "\030\uffd6\035\uffd6\036\uffd6\047\uffd6\050\uffd6\052\uffd6\053" +
    "\uffd6\062\uffd6\063\uffd6\064\uffd6\065\uffd6\066\uffd6\067\uffd6" +
    "\070\uffd6\071\uffd6\072\uffd6\001\002\000\010\053\uffee\071" +
    "\uffee\072\uffee\001\002\000\100\003\uffd5\004\uffd5\007\uffd5" +
    "\011\uffd5\012\uffd5\013\uffd5\014\uffd5\015\uffd5\016\uffd5\017" +
    "\uffd5\020\uffd5\022\uffd5\023\uffd5\025\uffd5\026\uffd5\030\uffd5" +
    "\035\uffd5\036\uffd5\047\uffd5\050\uffd5\052\uffd5\053\uffd5\062" +
    "\uffd5\063\uffd5\064\uffd5\065\uffd5\066\uffd5\067\uffd5\070\uffd5" +
    "\071\uffd5\072\uffd5\001\002\000\100\003\uff8a\004\uff8a\007" +
    "\uff8a\011\uff8a\012\uff8a\013\uff8a\014\uff8a\015\uff8a\016\uff8a" +
    "\017\uff8a\020\uff8a\022\uff8a\023\uff8a\025\uff8a\026\uff8a\030" +
    "\uff8a\035\uff8a\036\uff8a\047\uff8a\050\uff8a\052\uff8a\053\uff8a" +
    "\062\uff8a\063\uff8a\064\uff8a\065\uff8a\066\uff8a\067\uff8a\070" +
    "\uff8a\071\uff8a\072\uff8a\001\002\000\004\054\271\001\002" +
    "\000\004\054\270\001\002\000\100\003\uff89\004\uff89\007" +
    "\uff89\011\uff89\012\uff89\013\uff89\014\uff89\015\uff89\016\uff89" +
    "\017\uff89\020\uff89\022\uff89\023\uff89\025\uff89\026\uff89\030" +
    "\uff89\035\uff89\036\uff89\047\uff89\050\uff89\052\uff89\053\uff89" +
    "\062\uff89\063\uff89\064\uff89\065\uff89\066\uff89\067\uff89\070" +
    "\uff89\071\uff89\072\uff89\001\002\000\100\003\uff8b\004\uff8b" +
    "\007\uff8b\011\uff8b\012\uff8b\013\uff8b\014\uff8b\015\uff8b\016" +
    "\uff8b\017\uff8b\020\uff8b\022\uff8b\023\uff8b\025\uff8b\026\uff8b" +
    "\030\uff8b\035\uff8b\036\uff8b\047\uff8b\050\uff8b\052\uff8b\053" +
    "\uff8b\062\uff8b\063\uff8b\064\uff8b\065\uff8b\066\uff8b\067\uff8b" +
    "\070\uff8b\071\uff8b\072\uff8b\001\002\000\036\003\274\025" +
    "\062\026\110\030\045\035\027\036\047\047\052\050\037" +
    "\062\124\063\030\064\035\065\102\066\067\067\065\001" +
    "\002\000\004\054\276\001\002\000\004\054\275\001\002" +
    "\000\100\003\uffd2\004\uffd2\007\uffd2\011\uffd2\012\uffd2\013" +
    "\uffd2\014\uffd2\015\uffd2\016\uffd2\017\uffd2\020\uffd2\022\uffd2" +
    "\023\uffd2\025\uffd2\026\uffd2\030\uffd2\035\uffd2\036\uffd2\047" +
    "\uffd2\050\uffd2\052\uffd2\053\uffd2\062\uffd2\063\uffd2\064\uffd2" +
    "\065\uffd2\066\uffd2\067\uffd2\070\uffd2\071\uffd2\072\uffd2\001" +
    "\002\000\100\003\uffd4\004\uffd4\007\uffd4\011\uffd4\012\uffd4" +
    "\013\uffd4\014\uffd4\015\uffd4\016\uffd4\017\uffd4\020\uffd4\022" +
    "\uffd4\023\uffd4\025\uffd4\026\uffd4\030\uffd4\035\uffd4\036\uffd4" +
    "\047\uffd4\050\uffd4\052\uffd4\053\uffd4\062\uffd4\063\uffd4\064" +
    "\uffd4\065\uffd4\066\uffd4\067\uffd4\070\uffd4\071\uffd4\072\uffd4" +
    "\001\002\000\036\003\301\025\062\026\110\030\045\035" +
    "\027\036\047\047\052\050\037\062\124\063\030\064\035" +
    "\065\102\066\067\067\065\001\002\000\004\051\306\001" +
    "\002\000\004\051\302\001\002\000\004\052\303\001\002" +
    "\000\074\003\064\004\057\007\112\011\046\012\070\013" +
    "\061\014\041\015\077\016\054\017\031\020\103\022\076" +
    "\023\050\025\062\026\110\030\045\035\027\036\047\047" +
    "\052\050\037\052\066\053\uffed\062\060\063\030\064\035" +
    "\065\102\066\067\067\065\070\073\001\002\000\004\053" +
    "\305\001\002\000\100\003\uff9a\004\uff9a\007\uff9a\011\uff9a" +
    "\012\uff9a\013\uff9a\014\uff9a\015\uff9a\016\uff9a\017\uff9a\020" +
    "\uff9a\022\uff9a\023\uff9a\025\uff9a\026\uff9a\030\uff9a\035\uff9a" +
    "\036\uff9a\047\uff9a\050\uff9a\052\uff9a\053\uff9a\062\uff9a\063" +
    "\uff9a\064\uff9a\065\uff9a\066\uff9a\067\uff9a\070\uff9a\071\uff9a" +
    "\072\uff9a\001\002\000\004\052\307\001\002\000\074\003" +
    "\064\004\057\007\112\011\046\012\070\013\061\014\041" +
    "\015\077\016\054\017\031\020\103\022\076\023\050\025" +
    "\062\026\110\030\045\035\027\036\047\047\052\050\037" +
    "\052\066\053\uffed\062\060\063\030\064\035\065\102\066" +
    "\067\067\065\070\073\001\002\000\004\053\311\001\002" +
    "\000\104\003\uff9e\004\uff9e\005\313\006\312\007\uff9e\011" +
    "\uff9e\012\uff9e\013\uff9e\014\uff9e\015\uff9e\016\uff9e\017\uff9e" +
    "\020\uff9e\022\uff9e\023\uff9e\025\uff9e\026\uff9e\030\uff9e\035" +
    "\uff9e\036\uff9e\047\uff9e\050\uff9e\052\uff9e\053\uff9e\062\uff9e" +
    "\063\uff9e\064\uff9e\065\uff9e\066\uff9e\067\uff9e\070\uff9e\071" +
    "\uff9e\072\uff9e\001\002\000\004\052\326\001\002\000\004" +
    "\050\314\001\002\000\034\025\062\026\110\030\045\035" +
    "\027\036\047\047\052\050\037\062\124\063\030\064\035" +
    "\065\102\066\067\067\065\001\002\000\004\051\316\001" +
    "\002\000\004\052\317\001\002\000\074\003\064\004\057" +
    "\007\112\011\046\012\070\013\061\014\041\015\077\016" +
    "\054\017\031\020\103\022\076\023\050\025\062\026\110" +
    "\030\045\035\027\036\047\047\052\050\037\052\066\053" +
    "\uffed\062\060\063\030\064\035\065\102\066\067\067\065" +
    "\070\073\001\002\000\004\053\321\001\002\000\102\003" +
    "\uff9d\004\uff9d\006\322\007\uff9d\011\uff9d\012\uff9d\013\uff9d" +
    "\014\uff9d\015\uff9d\016\uff9d\017\uff9d\020\uff9d\022\uff9d\023" +
    "\uff9d\025\uff9d\026\uff9d\030\uff9d\035\uff9d\036\uff9d\047\uff9d" +
    "\050\uff9d\052\uff9d\053\uff9d\062\uff9d\063\uff9d\064\uff9d\065" +
    "\uff9d\066\uff9d\067\uff9d\070\uff9d\071\uff9d\072\uff9d\001\002" +
    "\000\004\052\323\001\002\000\074\003\064\004\057\007" +
    "\112\011\046\012\070\013\061\014\041\015\077\016\054" +
    "\017\031\020\103\022\076\023\050\025\062\026\110\030" +
    "\045\035\027\036\047\047\052\050\037\052\066\053\uffed" +
    "\062\060\063\030\064\035\065\102\066\067\067\065\070" +
    "\073\001\002\000\004\053\325\001\002\000\100\003\uff9b" +
    "\004\uff9b\007\uff9b\011\uff9b\012\uff9b\013\uff9b\014\uff9b\015" +
    "\uff9b\016\uff9b\017\uff9b\020\uff9b\022\uff9b\023\uff9b\025\uff9b" +
    "\026\uff9b\030\uff9b\035\uff9b\036\uff9b\047\uff9b\050\uff9b\052" +
    "\uff9b\053\uff9b\062\uff9b\063\uff9b\064\uff9b\065\uff9b\066\uff9b" +
    "\067\uff9b\070\uff9b\071\uff9b\072\uff9b\001\002\000\074\003" +
    "\064\004\057\007\112\011\046\012\070\013\061\014\041" +
    "\015\077\016\054\017\031\020\103\022\076\023\050\025" +
    "\062\026\110\030\045\035\027\036\047\047\052\050\037" +
    "\052\066\053\uffed\062\060\063\030\064\035\065\102\066" +
    "\067\067\065\070\073\001\002\000\004\053\330\001\002" +
    "\000\100\003\uff9c\004\uff9c\007\uff9c\011\uff9c\012\uff9c\013" +
    "\uff9c\014\uff9c\015\uff9c\016\uff9c\017\uff9c\020\uff9c\022\uff9c" +
    "\023\uff9c\025\uff9c\026\uff9c\030\uff9c\035\uff9c\036\uff9c\047" +
    "\uff9c\050\uff9c\052\uff9c\053\uff9c\062\uff9c\063\uff9c\064\uff9c" +
    "\065\uff9c\066\uff9c\067\uff9c\070\uff9c\071\uff9c\072\uff9c\001" +
    "\002\000\020\045\uffc1\046\uffc1\051\uffc1\054\uffc1\055\uffc1" +
    "\060\uffc1\073\uffc1\001\002\000\036\003\334\025\062\026" +
    "\110\030\045\035\027\036\047\047\052\050\037\062\124" +
    "\063\030\064\035\065\102\066\067\067\065\001\002\000" +
    "\004\051\337\001\002\000\004\051\335\001\002\000\004" +
    "\054\336\001\002\000\100\003\uff85\004\uff85\007\uff85\011" +
    "\uff85\012\uff85\013\uff85\014\uff85\015\uff85\016\uff85\017\uff85" +
    "\020\uff85\022\uff85\023\uff85\025\uff85\026\uff85\030\uff85\035" +
    "\uff85\036\uff85\047\uff85\050\uff85\052\uff85\053\uff85\062\uff85" +
    "\063\uff85\064\uff85\065\uff85\066\uff85\067\uff85\070\uff85\071" +
    "\uff85\072\uff85\001\002\000\004\054\340\001\002\000\100" +
    "\003\uff86\004\uff86\007\uff86\011\uff86\012\uff86\013\uff86\014" +
    "\uff86\015\uff86\016\uff86\017\uff86\020\uff86\022\uff86\023\uff86" +
    "\025\uff86\026\uff86\030\uff86\035\uff86\036\uff86\047\uff86\050" +
    "\uff86\052\uff86\053\uff86\062\uff86\063\uff86\064\uff86\065\uff86" +
    "\066\uff86\067\uff86\070\uff86\071\uff86\072\uff86\001\002\000" +
    "\050\027\uffaa\030\uffaa\031\uffaa\032\uffaa\033\uffaa\034\uffaa" +
    "\037\uffaa\040\uffaa\041\uffaa\042\uffaa\043\uffaa\044\uffaa\045" +
    "\uffaa\046\uffaa\051\uffaa\054\uffaa\055\uffaa\060\uffaa\073\uffaa" +
    "\001\002\000\022\003\347\014\041\015\077\016\054\017" +
    "\031\020\103\054\344\062\346\001\002\000\034\025\062" +
    "\026\110\030\045\035\027\036\047\047\052\050\037\062" +
    "\124\063\030\064\035\065\102\066\067\067\065\001\002" +
    "\000\034\025\062\026\110\030\045\035\027\036\047\047" +
    "\052\050\037\062\124\063\030\064\035\065\102\066\067" +
    "\067\065\001\002\000\004\056\366\001\002\000\006\056" +
    "\272\057\126\001\002\000\004\051\362\001\002\000\004" +
    "\062\361\001\002\000\034\025\062\026\110\030\045\035" +
    "\027\036\047\047\052\050\037\062\124\063\030\064\035" +
    "\065\102\066\067\067\065\001\002\000\004\054\353\001" +
    "\002\000\034\025\062\026\110\030\045\035\027\036\047" +
    "\047\052\050\037\062\124\063\030\064\035\065\102\066" +
    "\067\067\065\001\002\000\004\051\355\001\002\000\004" +
    "\052\356\001\002\000\074\003\064\004\057\007\112\011" +
    "\046\012\070\013\061\014\041\015\077\016\054\017\031" +
    "\020\103\022\076\023\050\025\062\026\110\030\045\035" +
    "\027\036\047\047\052\050\037\052\066\053\uffed\062\060" +
    "\063\030\064\035\065\102\066\067\067\065\070\073\001" +
    "\002\000\004\053\360\001\002\000\100\003\uff96\004\uff96" +
    "\007\uff96\011\uff96\012\uff96\013\uff96\014\uff96\015\uff96\016" +
    "\uff96\017\uff96\020\uff96\022\uff96\023\uff96\025\uff96\026\uff96" +
    "\030\uff96\035\uff96\036\uff96\047\uff96\050\uff96\052\uff96\053" +
    "\uff96\062\uff96\063\uff96\064\uff96\065\uff96\066\uff96\067\uff96" +
    "\070\uff96\071\uff96\072\uff96\001\002\000\006\054\175\056" +
    "\177\001\002\000\004\052\363\001\002\000\074\003\064" +
    "\004\057\007\112\011\046\012\070\013\061\014\041\015" +
    "\077\016\054\017\031\020\103\022\076\023\050\025\062" +
    "\026\110\030\045\035\027\036\047\047\052\050\037\052" +
    "\066\053\uffed\062\060\063\030\064\035\065\102\066\067" +
    "\067\065\070\073\001\002\000\004\053\365\001\002\000" +
    "\100\003\uff94\004\uff94\007\uff94\011\uff94\012\uff94\013\uff94" +
    "\014\uff94\015\uff94\016\uff94\017\uff94\020\uff94\022\uff94\023" +
    "\uff94\025\uff94\026\uff94\030\uff94\035\uff94\036\uff94\047\uff94" +
    "\050\uff94\052\uff94\053\uff94\062\uff94\063\uff94\064\uff94\065" +
    "\uff94\066\uff94\067\uff94\070\uff94\071\uff94\072\uff94\001\002" +
    "\000\034\025\062\026\110\030\045\035\027\036\047\047" +
    "\052\050\037\062\124\063\030\064\035\065\102\066\067" +
    "\067\065\001\002\000\004\054\370\001\002\000\100\003" +
    "\uffd3\004\uffd3\007\uffd3\011\uffd3\012\uffd3\013\uffd3\014\uffd3" +
    "\015\uffd3\016\uffd3\017\uffd3\020\uffd3\022\uffd3\023\uffd3\025" +
    "\uffd3\026\uffd3\030\uffd3\035\uffd3\036\uffd3\047\uffd3\050\uffd3" +
    "\052\uffd3\053\uffd3\062\uffd3\063\uffd3\064\uffd3\065\uffd3\066" +
    "\uffd3\067\uffd3\070\uffd3\071\uffd3\072\uffd3\001\002\000\004" +
    "\054\372\001\002\000\034\025\062\026\110\030\045\035" +
    "\027\036\047\047\052\050\037\062\124\063\030\064\035" +
    "\065\102\066\067\067\065\001\002\000\004\051\374\001" +
    "\002\000\004\052\375\001\002\000\074\003\064\004\057" +
    "\007\112\011\046\012\070\013\061\014\041\015\077\016" +
    "\054\017\031\020\103\022\076\023\050\025\062\026\110" +
    "\030\045\035\027\036\047\047\052\050\037\052\066\053" +
    "\uffed\062\060\063\030\064\035\065\102\066\067\067\065" +
    "\070\073\001\002\000\004\053\377\001\002\000\100\003" +
    "\uff95\004\uff95\007\uff95\011\uff95\012\uff95\013\uff95\014\uff95" +
    "\015\uff95\016\uff95\017\uff95\020\uff95\022\uff95\023\uff95\025" +
    "\uff95\026\uff95\030\uff95\035\uff95\036\uff95\047\uff95\050\uff95" +
    "\052\uff95\053\uff95\062\uff95\063\uff95\064\uff95\065\uff95\066" +
    "\uff95\067\uff95\070\uff95\071\uff95\072\uff95\001\002\000\004" +
    "\054\u0101\001\002\000\034\025\062\026\110\030\045\035" +
    "\027\036\047\047\052\050\037\062\124\063\030\064\035" +
    "\065\102\066\067\067\065\001\002\000\004\051\u0103\001" +
    "\002\000\004\052\u0104\001\002\000\074\003\064\004\057" +
    "\007\112\011\046\012\070\013\061\014\041\015\077\016" +
    "\054\017\031\020\103\022\076\023\050\025\062\026\110" +
    "\030\045\035\027\036\047\047\052\050\037\052\066\053" +
    "\uffed\062\060\063\030\064\035\065\102\066\067\067\065" +
    "\070\073\001\002\000\004\053\u0106\001\002\000\100\003" +
    "\uff97\004\uff97\007\uff97\011\uff97\012\uff97\013\uff97\014\uff97" +
    "\015\uff97\016\uff97\017\uff97\020\uff97\022\uff97\023\uff97\025" +
    "\uff97\026\uff97\030\uff97\035\uff97\036\uff97\047\uff97\050\uff97" +
    "\052\uff97\053\uff97\062\uff97\063\uff97\064\uff97\065\uff97\066" +
    "\uff97\067\uff97\070\uff97\071\uff97\072\uff97\001\002\000\050" +
    "\027\uffac\030\uffac\031\uffac\032\uffac\033\uffac\034\uffac\037" +
    "\uffac\040\uffac\041\uffac\042\uffac\043\uffac\044\uffac\045\uffac" +
    "\046\uffac\051\uffac\054\uffac\055\uffac\060\uffac\073\uffac\001" +
    "\002\000\004\002\uffff\001\002\000\006\046\227\051\u010a" +
    "\001\002\000\020\045\uffbf\046\uffbf\051\uffbf\054\uffbf\055" +
    "\uffbf\060\uffbf\073\uffbf\001\002\000\032\025\062\026\110" +
    "\030\045\035\027\036\047\050\123\062\124\063\030\064" +
    "\035\065\102\066\067\067\065\001\002\000\032\025\062" +
    "\026\110\030\045\035\027\036\047\050\123\062\124\063" +
    "\030\064\035\065\102\066\067\067\065\001\002\000\032" +
    "\025\062\026\110\030\045\035\027\036\047\050\123\062" +
    "\124\063\030\064\035\065\102\066\067\067\065\001\002" +
    "\000\032\025\062\026\110\030\045\035\027\036\047\050" +
    "\123\062\124\063\030\064\035\065\102\066\067\067\065" +
    "\001\002\000\032\025\062\026\110\030\045\035\027\036" +
    "\047\050\123\062\124\063\030\064\035\065\102\066\067" +
    "\067\065\001\002\000\032\025\062\026\110\030\045\035" +
    "\027\036\047\050\123\062\124\063\030\064\035\065\102" +
    "\066\067\067\065\001\002\000\032\025\062\026\110\030" +
    "\045\035\027\036\047\050\123\062\124\063\030\064\035" +
    "\065\102\066\067\067\065\001\002\000\032\025\062\026" +
    "\110\030\045\035\027\036\047\050\123\062\124\063\030" +
    "\064\035\065\102\066\067\067\065\001\002\000\024\027" +
    "\u0110\030\u0111\045\uffb9\046\uffb9\051\uffb9\054\uffb9\055\uffb9" +
    "\060\uffb9\073\uffb9\001\002\000\046\027\uffb6\030\uffb6\031" +
    "\120\032\117\033\116\037\uffb6\040\uffb6\041\uffb6\042\uffb6" +
    "\043\uffb6\044\uffb6\045\uffb6\046\uffb6\051\uffb6\054\uffb6\055" +
    "\uffb6\060\uffb6\073\uffb6\001\002\000\046\027\uffb7\030\uffb7" +
    "\031\120\032\117\033\116\037\uffb7\040\uffb7\041\uffb7\042" +
    "\uffb7\043\uffb7\044\uffb7\045\uffb7\046\uffb7\051\uffb7\054\uffb7" +
    "\055\uffb7\060\uffb7\073\uffb7\001\002\000\024\027\u0110\030" +
    "\u0111\045\uffbd\046\uffbd\051\uffbd\054\uffbd\055\uffbd\060\uffbd" +
    "\073\uffbd\001\002\000\024\027\u0110\030\u0111\045\uffbc\046" +
    "\uffbc\051\uffbc\054\uffbc\055\uffbc\060\uffbc\073\uffbc\001\002" +
    "\000\024\027\u0110\030\u0111\045\uffba\046\uffba\051\uffba\054" +
    "\uffba\055\uffba\060\uffba\073\uffba\001\002\000\024\027\u0110" +
    "\030\u0111\045\uffbb\046\uffbb\051\uffbb\054\uffbb\055\uffbb\060" +
    "\uffbb\073\uffbb\001\002\000\024\027\u0110\030\u0111\045\uffbe" +
    "\046\uffbe\051\uffbe\054\uffbe\055\uffbe\060\uffbe\073\uffbe\001" +
    "\002\000\050\027\uffab\030\uffab\031\uffab\032\uffab\033\uffab" +
    "\034\uffab\037\uffab\040\uffab\041\uffab\042\uffab\043\uffab\044" +
    "\uffab\045\uffab\046\uffab\051\uffab\054\uffab\055\uffab\060\uffab" +
    "\073\uffab\001\002\000\004\050\u011d\001\002\000\016\014" +
    "\041\015\077\016\054\017\031\020\103\051\u011f\001\002" +
    "\000\006\051\ufff2\055\ufff2\001\002\000\004\052\u012a\001" +
    "\002\000\004\062\u0129\001\002\000\006\051\u0123\055\u0122" +
    "\001\002\000\014\014\041\015\077\016\054\017\031\020" +
    "\103\001\002\000\004\052\u0124\001\002\000\074\003\ufffb" +
    "\004\ufffb\007\ufffb\011\ufffb\012\ufffb\013\ufffb\014\ufffb\015" +
    "\ufffb\016\ufffb\017\ufffb\020\ufffb\022\ufffb\023\ufffb\025\ufffb" +
    "\026\ufffb\030\ufffb\035\ufffb\036\ufffb\047\ufffb\050\ufffb\052" +
    "\ufffb\053\ufffb\062\ufffb\063\ufffb\064\ufffb\065\ufffb\066\ufffb" +
    "\067\ufffb\070\ufffb\001\002\000\074\003\064\004\057\007" +
    "\112\011\046\012\070\013\061\014\041\015\077\016\054" +
    "\017\031\020\103\022\076\023\050\025\062\026\110\030" +
    "\045\035\027\036\047\047\052\050\037\052\066\053\uffed" +
    "\062\060\063\030\064\035\065\102\066\067\067\065\070" +
    "\073\001\002\000\004\053\u0127\001\002\000\020\002\ufffa" +
    "\003\ufffa\014\ufffa\015\ufffa\016\ufffa\017\ufffa\021\ufffa\001" +
    "\002\000\006\051\ufff1\055\ufff1\001\002\000\006\051\ufff0" +
    "\055\ufff0\001\002\000\074\003\ufff9\004\ufff9\007\ufff9\011" +
    "\ufff9\012\ufff9\013\ufff9\014\ufff9\015\ufff9\016\ufff9\017\ufff9" +
    "\020\ufff9\022\ufff9\023\ufff9\025\ufff9\026\ufff9\030\ufff9\035" +
    "\ufff9\036\ufff9\047\ufff9\050\ufff9\052\ufff9\053\ufff9\062\ufff9" +
    "\063\ufff9\064\ufff9\065\ufff9\066\ufff9\067\ufff9\070\ufff9\001" +
    "\002\000\074\003\064\004\057\007\112\011\046\012\070" +
    "\013\061\014\041\015\077\016\054\017\031\020\103\022" +
    "\076\023\050\025\062\026\110\030\045\035\027\036\047" +
    "\047\052\050\037\052\066\053\uffed\062\060\063\030\064" +
    "\035\065\102\066\067\067\065\070\073\001\002\000\004" +
    "\053\u012d\001\002\000\020\002\ufff8\003\ufff8\014\ufff8\015" +
    "\ufff8\016\ufff8\017\ufff8\021\ufff8\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u012b\000\010\002\007\005\011\035\005\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\002\015\005\011\035" +
    "\005\001\001\000\010\002\014\005\011\035\005\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\053\023\001\001\000" +
    "\074\003\042\004\033\006\113\007\112\010\103\011\110" +
    "\012\035\013\114\014\041\015\031\016\025\017\043\020" +
    "\073\021\062\022\100\023\055\024\104\025\105\026\077" +
    "\027\032\030\050\031\054\032\052\033\106\034\074\036" +
    "\024\045\037\046\070\047\071\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\036\011" +
    "\141\012\035\013\114\014\041\015\031\016\025\017\043" +
    "\020\u0108\021\062\022\100\023\055\036\120\045\037\046" +
    "\070\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\016" +
    "\u0106\036\120\045\037\046\070\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\016\330\036\120\045\037\046\070\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\036\011\265" +
    "\012\035\013\114\014\041\015\031\016\025\017\043\020" +
    "\073\021\062\022\100\023\055\036\120\045\037\046\070" +
    "\001\001\000\002\001\001\000\002\001\001\000\074\003" +
    "\262\004\033\006\113\007\112\010\103\011\110\012\035" +
    "\013\114\014\041\015\031\016\025\017\043\020\073\021" +
    "\062\022\100\023\055\024\104\025\105\026\077\027\032" +
    "\030\050\031\054\032\052\033\106\034\074\036\024\045" +
    "\037\046\070\047\071\001\001\000\002\001\001\000\074" +
    "\003\260\004\033\006\113\007\112\010\103\011\110\012" +
    "\035\013\114\014\041\015\031\016\025\017\043\020\073" +
    "\021\062\022\100\023\055\024\104\025\105\026\077\027" +
    "\032\030\050\031\054\032\052\033\106\034\074\036\024" +
    "\045\037\046\070\047\071\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\074\003" +
    "\147\004\033\006\113\007\112\010\103\011\110\012\035" +
    "\013\114\014\041\015\031\016\025\017\043\020\073\021" +
    "\062\022\100\023\055\024\104\025\105\026\077\027\032" +
    "\030\050\031\054\032\052\033\106\034\074\036\024\045" +
    "\037\046\070\047\071\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\014\146\015\031\016\025\023\055\036" +
    "\120\045\037\046\070\001\001\000\020\014\145\015\031" +
    "\016\025\023\055\036\120\045\037\046\070\001\001\000" +
    "\020\014\121\015\031\016\025\023\055\036\120\045\037" +
    "\046\070\001\001\000\002\001\001\000\002\001\001\000" +
    "\036\011\141\012\035\013\114\014\041\015\031\016\025" +
    "\017\043\020\073\021\062\022\100\023\055\036\120\045" +
    "\037\046\070\001\001\000\002\001\001\000\040\011\134" +
    "\012\035\013\114\014\041\015\031\016\025\017\043\020" +
    "\073\021\062\022\100\023\055\036\120\044\135\045\037" +
    "\046\070\001\001\000\036\011\126\012\035\013\114\014" +
    "\041\015\031\016\025\017\043\020\073\021\062\022\100" +
    "\023\055\036\120\045\037\046\070\001\001\000\002\001" +
    "\001\000\002\001\001\000\036\011\131\012\035\013\114" +
    "\014\041\015\031\016\025\017\043\020\073\021\062\022" +
    "\100\023\055\036\120\045\037\046\070\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\040\011\134" +
    "\012\035\013\114\014\041\015\031\016\025\017\043\020" +
    "\073\021\062\022\100\023\055\036\120\044\140\045\037" +
    "\046\070\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\015\144\016\025\023\055\036\120" +
    "\045\037\046\070\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\074\003\151" +
    "\004\033\006\113\007\112\010\103\011\110\012\035\013" +
    "\114\014\041\015\031\016\025\017\043\020\073\021\062" +
    "\022\100\023\055\024\104\025\105\026\077\027\032\030" +
    "\050\031\054\032\052\033\106\034\074\036\024\045\037" +
    "\046\070\047\071\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\036\011\155\012\035\013\114" +
    "\014\041\015\031\016\025\017\043\020\073\021\062\022" +
    "\100\023\055\036\120\045\037\046\070\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\036\011" +
    "\201\012\035\013\114\014\041\015\031\016\025\017\043" +
    "\020\073\021\062\022\100\023\055\036\120\045\037\046" +
    "\070\001\001\000\036\011\177\012\035\013\114\014\041" +
    "\015\031\016\025\017\043\020\073\021\062\022\100\023" +
    "\055\036\120\045\037\046\070\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\036\011\204\012\035\013\114\014\041\015\031\016\025" +
    "\017\043\020\073\021\062\022\100\023\055\036\120\045" +
    "\037\046\070\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\040\211\001\001\000\004\041" +
    "\213\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\040\011\215\012\035\013\114\014\041\015" +
    "\031\016\025\017\043\020\073\021\062\022\100\023\055" +
    "\036\120\037\216\045\037\046\070\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\040\011\215" +
    "\012\035\013\114\014\041\015\031\016\025\017\043\020" +
    "\073\021\062\022\100\023\055\036\120\037\221\045\037" +
    "\046\070\001\001\000\002\001\001\000\004\041\224\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\012\035\013\114\014\041\015\031\016\025\017" +
    "\043\021\227\022\100\023\055\036\120\045\037\046\070" +
    "\001\001\000\002\001\001\000\030\012\035\013\114\014" +
    "\041\015\031\016\025\017\043\022\231\023\055\036\120" +
    "\045\037\046\070\001\001\000\002\001\001\000\036\011" +
    "\233\012\035\013\114\014\041\015\031\016\025\017\043" +
    "\020\073\021\062\022\100\023\055\036\120\045\037\046" +
    "\070\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\050\242\051\241\052\240\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\050\250\051\241" +
    "\052\240\001\001\000\002\001\001\000\036\011\244\012" +
    "\035\013\114\014\041\015\031\016\025\017\043\020\073" +
    "\021\062\022\100\023\055\036\120\045\037\046\070\001" +
    "\001\000\002\001\001\000\074\003\246\004\033\006\113" +
    "\007\112\010\103\011\110\012\035\013\114\014\041\015" +
    "\031\016\025\017\043\020\073\021\062\022\100\023\055" +
    "\024\104\025\105\026\077\027\032\030\050\031\054\032" +
    "\052\033\106\034\074\036\024\045\037\046\070\047\071" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\074\003\252\004\033\006\113\007\112\010\103" +
    "\011\110\012\035\013\114\014\041\015\031\016\025\017" +
    "\043\020\073\021\062\022\100\023\055\024\104\025\105" +
    "\026\077\027\032\030\050\031\054\032\052\033\106\034" +
    "\074\036\024\045\037\046\070\047\071\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\050\255\051\241\052" +
    "\240\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\036\011\272\012\035\013\114\014\041\015\031\016\025" +
    "\017\043\020\073\021\062\022\100\023\055\036\120\045" +
    "\037\046\070\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\036\011\277\012" +
    "\035\013\114\014\041\015\031\016\025\017\043\020\073" +
    "\021\062\022\100\023\055\036\120\045\037\046\070\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\074\003\303\004\033\006\113\007\112\010\103\011" +
    "\110\012\035\013\114\014\041\015\031\016\025\017\043" +
    "\020\073\021\062\022\100\023\055\024\104\025\105\026" +
    "\077\027\032\030\050\031\054\032\052\033\106\034\074" +
    "\036\024\045\037\046\070\047\071\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\074\003\307" +
    "\004\033\006\113\007\112\010\103\011\110\012\035\013" +
    "\114\014\041\015\031\016\025\017\043\020\073\021\062" +
    "\022\100\023\055\024\104\025\105\026\077\027\032\030" +
    "\050\031\054\032\052\033\106\034\074\036\024\045\037" +
    "\046\070\047\071\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\036\011\314" +
    "\012\035\013\114\014\041\015\031\016\025\017\043\020" +
    "\073\021\062\022\100\023\055\036\120\045\037\046\070" +
    "\001\001\000\002\001\001\000\002\001\001\000\074\003" +
    "\317\004\033\006\113\007\112\010\103\011\110\012\035" +
    "\013\114\014\041\015\031\016\025\017\043\020\073\021" +
    "\062\022\100\023\055\024\104\025\105\026\077\027\032" +
    "\030\050\031\054\032\052\033\106\034\074\036\024\045" +
    "\037\046\070\047\071\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\074\003\323\004\033\006" +
    "\113\007\112\010\103\011\110\012\035\013\114\014\041" +
    "\015\031\016\025\017\043\020\073\021\062\022\100\023" +
    "\055\024\104\025\105\026\077\027\032\030\050\031\054" +
    "\032\052\033\106\034\074\036\024\045\037\046\070\047" +
    "\071\001\001\000\002\001\001\000\002\001\001\000\074" +
    "\003\326\004\033\006\113\007\112\010\103\011\110\012" +
    "\035\013\114\014\041\015\031\016\025\017\043\020\073" +
    "\021\062\022\100\023\055\024\104\025\105\026\077\027" +
    "\032\030\050\031\054\032\052\033\106\034\074\036\024" +
    "\045\037\046\070\047\071\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\036\011\332\012\035" +
    "\013\114\014\041\015\031\016\025\017\043\020\073\021" +
    "\062\022\100\023\055\036\120\045\037\046\070\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\004\342\010\350\034\347\036\344\001" +
    "\001\000\036\011\377\012\035\013\114\014\041\015\031" +
    "\016\025\017\043\020\073\021\062\022\100\023\055\036" +
    "\120\045\037\046\070\001\001\000\036\011\370\012\035" +
    "\013\114\014\041\015\031\016\025\017\043\020\073\021" +
    "\062\022\100\023\055\036\120\045\037\046\070\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\036\011\351\012\035\013\114\014\041" +
    "\015\031\016\025\017\043\020\073\021\062\022\100\023" +
    "\055\036\120\045\037\046\070\001\001\000\002\001\001" +
    "\000\036\011\353\012\035\013\114\014\041\015\031\016" +
    "\025\017\043\020\073\021\062\022\100\023\055\036\120" +
    "\045\037\046\070\001\001\000\002\001\001\000\002\001" +
    "\001\000\074\003\356\004\033\006\113\007\112\010\103" +
    "\011\110\012\035\013\114\014\041\015\031\016\025\017" +
    "\043\020\073\021\062\022\100\023\055\024\104\025\105" +
    "\026\077\027\032\030\050\031\054\032\052\033\106\034" +
    "\074\036\024\045\037\046\070\047\071\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\074\003\363\004\033\006\113\007\112\010\103" +
    "\011\110\012\035\013\114\014\041\015\031\016\025\017" +
    "\043\020\073\021\062\022\100\023\055\024\104\025\105" +
    "\026\077\027\032\030\050\031\054\032\052\033\106\034" +
    "\074\036\024\045\037\046\070\047\071\001\001\000\002" +
    "\001\001\000\002\001\001\000\036\011\366\012\035\013" +
    "\114\014\041\015\031\016\025\017\043\020\073\021\062" +
    "\022\100\023\055\036\120\045\037\046\070\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\036" +
    "\011\372\012\035\013\114\014\041\015\031\016\025\017" +
    "\043\020\073\021\062\022\100\023\055\036\120\045\037" +
    "\046\070\001\001\000\002\001\001\000\002\001\001\000" +
    "\074\003\375\004\033\006\113\007\112\010\103\011\110" +
    "\012\035\013\114\014\041\015\031\016\025\017\043\020" +
    "\073\021\062\022\100\023\055\024\104\025\105\026\077" +
    "\027\032\030\050\031\054\032\052\033\106\034\074\036" +
    "\024\045\037\046\070\047\071\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\036\011\u0101\012" +
    "\035\013\114\014\041\015\031\016\025\017\043\020\073" +
    "\021\062\022\100\023\055\036\120\045\037\046\070\001" +
    "\001\000\002\001\001\000\002\001\001\000\074\003\u0104" +
    "\004\033\006\113\007\112\010\103\011\110\012\035\013" +
    "\114\014\041\015\031\016\025\017\043\020\073\021\062" +
    "\022\100\023\055\024\104\025\105\026\077\027\032\030" +
    "\050\031\054\032\052\033\106\034\074\036\024\045\037" +
    "\046\070\047\071\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\012\u0119\013\114\014\041\015" +
    "\031\016\025\023\055\036\120\045\037\046\070\001\001" +
    "\000\024\012\u0118\013\114\014\041\015\031\016\025\023" +
    "\055\036\120\045\037\046\070\001\001\000\024\012\u0117" +
    "\013\114\014\041\015\031\016\025\023\055\036\120\045" +
    "\037\046\070\001\001\000\024\012\u0116\013\114\014\041" +
    "\015\031\016\025\023\055\036\120\045\037\046\070\001" +
    "\001\000\024\012\u0115\013\114\014\041\015\031\016\025" +
    "\023\055\036\120\045\037\046\070\001\001\000\022\013" +
    "\u0114\014\041\015\031\016\025\023\055\036\120\045\037" +
    "\046\070\001\001\000\022\013\u0113\014\041\015\031\016" +
    "\025\023\055\036\120\045\037\046\070\001\001\000\024" +
    "\012\u0112\013\114\014\041\015\031\016\025\023\055\036" +
    "\120\045\037\046\070\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\034\u011f\042" +
    "\u011d\043\u0120\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\034\u011f\042" +
    "\u0127\001\001\000\002\001\001\000\004\054\u0124\001\001" +
    "\000\074\003\u0125\004\033\006\113\007\112\010\103\011" +
    "\110\012\035\013\114\014\041\015\031\016\025\017\043" +
    "\020\073\021\062\022\100\023\055\024\104\025\105\026" +
    "\077\027\032\030\050\031\054\032\052\033\106\034\074" +
    "\036\024\045\037\046\070\047\071\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\055\u012a\001\001\000\074\003\u012b\004\033\006" +
    "\113\007\112\010\103\011\110\012\035\013\114\014\041" +
    "\015\031\016\025\017\043\020\073\021\062\022\100\023" +
    "\055\024\104\025\105\026\077\027\032\030\050\031\054" +
    "\032\052\033\106\034\074\036\024\045\037\046\070\047" +
    "\071\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    private SemanticSymbolTable semanticTable;
    
    private SymbolTable symbolTable;
    
    private int errorCount = 0;

    private Stack<String> scopeContext = new Stack<>();
    
    private String currentFunctionName = null;
    

    private IntermediateCodeGenerator codeGenerator;
    private boolean codeGenerationEnabled = false;
    
    public void enableCodeGeneration(String outputFile) {
        this.codeGenerator = new IntermediateCodeGenerator(outputFile);
        this.codeGenerationEnabled = true;
        System.out.println("Generación de código intermedio habilitada");
    }
    
    public void disableCodeGeneration() {
        this.codeGenerationEnabled = false;
        this.codeGenerator = null;
    }
    
    public IntermediateCodeGenerator getCodeGenerator() {
        return codeGenerator;
    }

    public void initTables() {
        semanticTable = new SemanticSymbolTable();
        symbolTable = semanticTable.getOriginalTable();
        System.out.println("Iniciando analisis semantico...");
        
        scopeContext.push("GLOBAL");
    }
    
    public void setSymbolTable(SymbolTable symbolTable) {
        this.symbolTable = symbolTable;
        if (semanticTable == null) {
            initTables();
        }
    }
    
    public SemanticSymbolTable getSemanticTable() {
        if (semanticTable == null) {
            initTables();
        }
        return semanticTable;
    }

    public String getCurrentFunctionName() {
        return currentFunctionName;
    }
    
    public void setCurrentFunctionName(String functionName) {
        this.currentFunctionName = functionName;
    }
    
    public void enterFunctionScope(String functionName, String returnType, List<String> params, int line, int column) {
        if (semanticTable != null) {
            semanticTable.enterScope("FUNCTION", functionName);
            scopeContext.push("FUNCTION:" + functionName);
            setCurrentFunctionName(functionName); 
            System.out.println("Entrando a función: " + functionName);
        }
    }
    
    public void exitFunctionScope() {
        if (semanticTable != null && !scopeContext.isEmpty()) {
            String context = scopeContext.pop();
            semanticTable.exitScope();
            setCurrentFunctionName(null);
            System.out.println("Saliendo de scope: " + context);
        }
    }
    
    public void enterBlockScope() {
        if (semanticTable != null) {
            semanticTable.enterScope("BLOCK", "block");
            scopeContext.push("BLOCK");
            System.out.println("Entrando a bloque...");
        }
    }
    
    public void exitBlockScope() {
        if (semanticTable != null && !scopeContext.isEmpty()) {
            String context = scopeContext.pop();
            semanticTable.exitScope();
            System.out.println("Saliendo de bloque...");
        }
    }
    
    public void enterControlScope(String controlType) {
        if (semanticTable != null) {
            semanticTable.enterScope(controlType.toUpperCase(), controlType.toLowerCase() + "_block");
            scopeContext.push(controlType.toUpperCase());
            System.out.println("Entrando a " + controlType + "...");
        }
    }
    
    public void exitControlScope() {
        if (semanticTable != null && !scopeContext.isEmpty()) {
            String context = scopeContext.pop();
            semanticTable.exitScope();
            System.out.println("Saliendo de control: " + context);
        }
    }
    
    public void finalizeSemantic() {
        if (semanticTable != null) {
            boolean hasMain = semanticTable.checkMainFunction();
            if (!hasMain) {
                errorCount++;
            }
            
            semanticTable.printSummary();
            
            try {
                semanticTable.escribirTablas("semantic_analysis.txt");
                System.out.println("Analisis semantico completado. Ver: semantic_analysis.txt");
            } catch (Exception e) {
                System.err.println("Error escribiendo archivo semantico: " + e.getMessage());
            }
        }
        
        if (codeGenerationEnabled && codeGenerator != null) {
            codeGenerator.printCode();
            codeGenerator.printStatistics();
            codeGenerator.writeToFile();
        }
    }
    
    /* Métodos de manejo de errores existentes */
    public void syntax_error(Symbol s) {
        errorCount++;
        System.err.println("Error sintactico #" + errorCount + " en linea " + (s.left + 1) + 
                          ", columna " + (s.right + 1) + ": Token inesperado '" + s.value + "'");
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception {
        errorCount++;
        System.err.println("Error sintactico fatal #" + errorCount + " en linea " + (s.left + 1) + 
                          ", columna " + (s.right + 1) + ": No se pudo recuperar del error");
        
        System.err.println("Total de errores encontrados: " + errorCount);
        
        finalizeSemantic();
    }
    
    public void report_error(String message, Object info) {
        errorCount++;
        if (info instanceof Symbol) {
            Symbol s = (Symbol) info;
            System.err.println("Error de recuperacion #" + errorCount + " en linea " + (s.left + 1) + 
                              ", columna " + (s.right + 1) + ": " + message);
        } else {
            System.err.println("Error de recuperacion #" + errorCount + ": " + message);
        }
    }
    
    public int getErrorCount() {
        return errorCount + (semanticTable != null ? semanticTable.getErrorCount() : 0);
    }
    
    /* Métodos de compatibilidad existentes */
    public void updateVariableType(String id, String type) {
        if (symbolTable != null) {
            symbolTable.actualizarTipoVariable(id, type);
        }
    }
    
    public void markAsFunction(String id, String returnType) {
        if (symbolTable != null) {
            symbolTable.marcarComoFuncion(id, returnType);
        }
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
 
             List<String> noParams = new ArrayList<String>();
             parser.getSemanticTable().declareFunction("main", "VOID", noParams, mleft, mright);
             
             parser.getSemanticTable().enterScope("FUNCTION", "main");
             parser.setCurrentFunctionName("main");
             System.out.println("Entrando a función main");
             
             if (parser.codeGenerationEnabled) {
                 parser.getCodeGenerator().startFunction("main", "VOID");
             }
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= VOID MAIN LPAREN RPAREN LBLOCK NT$0 block RBLOCK 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		 
             parser.getSemanticTable().exitScope();
             parser.setCurrentFunctionName(null);
             System.out.println("Saliendo de función main");
             
             if (parser.codeGenerationEnabled) {
                 parser.getCodeGenerator().endFunction("main");
             }
             
             parser.finalizeSemantic();
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // program ::= decl_fun program 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
             if (f != null) {
                 System.out.println("Función declarada: " + f.toString());
             }
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // program ::= error program 
            {
              Object RESULT =null;
		 
             System.err.println("Error en la estructura del programa. Continuando análisis..."); 
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // program ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // NT$1 ::= 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
 
              List<String> params = new ArrayList<String>(); 
              parser.getSemanticTable().declareFunction(id.toString(), t.toString(), params, idleft, idright);
              
              parser.getSemanticTable().enterScope("FUNCTION", id.toString());
              parser.setCurrentFunctionName(id.toString());
              System.out.println("Entrando a función: " + id.toString() + " tipo: " + t.toString());
              
              if (parser.codeGenerationEnabled) {
                  parser.getCodeGenerator().startFunction(id.toString(), t.toString());
              }
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // decl_fun ::= tipo_r ID LPAREN param_list RPAREN LBLOCK NT$1 block RBLOCK 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		 
              RESULT = id; 
              
              parser.getSemanticTable().exitScope();
              parser.setCurrentFunctionName(null);
              System.out.println("Saliendo de función: " + id.toString());
              
              if (parser.codeGenerationEnabled) {
                  parser.getCodeGenerator().endFunction(id.toString());
              }
              
              parser.markAsFunction(id.toString(), t.toString());
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl_fun",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // NT$2 ::= 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
 
              List<String> noParams = new ArrayList<String>();
              parser.getSemanticTable().declareFunction(id.toString(), t.toString(), noParams, idleft, idright);
              
              parser.getSemanticTable().enterScope("FUNCTION", id.toString());
              parser.setCurrentFunctionName(id.toString());
              System.out.println("Entrando a función sin parámetros: " + id.toString() + " tipo: " + t.toString());
              
              if (parser.codeGenerationEnabled) {
                  parser.getCodeGenerator().startFunction(id.toString(), t.toString());
              }
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // decl_fun ::= tipo_r ID LPAREN RPAREN LBLOCK NT$2 block RBLOCK 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		 
              RESULT = id; 
              
              parser.getSemanticTable().exitScope();
              parser.setCurrentFunctionName(null);
              System.out.println("Saliendo de función: " + id.toString());
              
              if (parser.codeGenerationEnabled) {
                  parser.getCodeGenerator().endFunction(id.toString());
              }
              
              parser.markAsFunction(id.toString(), t.toString()); 
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl_fun",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // tipo_r ::= INT 
            {
              String RESULT =null;
		 RESULT = "INT"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_r",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // tipo_r ::= FLOAT 
            {
              String RESULT =null;
		 RESULT = "FLOAT"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_r",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // tipo_r ::= CHAR 
            {
              String RESULT =null;
		 RESULT = "CHAR"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_r",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // tipo_r ::= BOOL 
            {
              String RESULT =null;
		 RESULT = "BOOL"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_r",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // tipo_r ::= VOID 
            {
              String RESULT =null;
		 RESULT = "VOID"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_r",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // param_list ::= param 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("param_list",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // param_list ::= param_list COMMA param 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("param_list",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // param ::= tipo ID 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
           if (parser.getSemanticTable() != null) {
               parser.getSemanticTable().declareVariable(id.toString(), t.toString(), idleft, idright);
           }
           
           if (parser.codeGenerationEnabled) {
               parser.getCodeGenerator().declareVariable(id.toString(), t.toString());
           }
           
           parser.updateVariableType(id.toString(), t.toString());
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("param",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // block ::= stmt block 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("block",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // block ::= error block 
            {
              Object RESULT =null;
		 System.err.println("Error en bloque de código. Continuando..."); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("block",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // block ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("block",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // tipo ::= INT 
            {
              String RESULT =null;
		 RESULT = "INT"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // tipo ::= FLOAT 
            {
              String RESULT =null;
		 RESULT = "FLOAT"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // tipo ::= BOOL 
            {
              String RESULT =null;
		 RESULT = "BOOL"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // tipo ::= CHAR 
            {
              String RESULT =null;
		 RESULT = "CHAR"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // tipo ::= STRING 
            {
              String RESULT =null;
		 RESULT = "STRING"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // decl_arr ::= tipo ID LBRACKET exp RBRACKET LBRACKET exp RBRACKET QUESTION 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 
              String arrayType = t.toString() + "[][]";
              
              if (parser.getSemanticTable() != null) {
                  parser.getSemanticTable().declareVariable(id.toString(), arrayType, idleft, idright);
              }
              
              if (parser.codeGenerationEnabled) {
                  parser.getCodeGenerator().declareVariable(id.toString(), arrayType);
              }
              
              parser.updateVariableType(id.toString(), arrayType);
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl_arr",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // decl_arr ::= tipo ID LBRACKET exp RBRACKET LBRACKET exp RBRACKET ASSIGN exp_matrix QUESTION 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		 
              String arrayType = t.toString() + "[][]";
              
              if (parser.getSemanticTable() != null) {
                  parser.getSemanticTable().declareVariable(id.toString(), arrayType, idleft, idright);
              }
              
              if (parser.codeGenerationEnabled) {
                  parser.getCodeGenerator().declareVariable(id.toString(), arrayType);
                  parser.getCodeGenerator().addComment("Array inicializado con matriz");
              }
              
              parser.updateVariableType(id.toString(), arrayType);
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl_arr",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // exp_matrix ::= LBRACKET matrix_row RBRACKET 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp_matrix",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // exp_matrix ::= LBRACKET matrix_row COMMA matrix_row RBRACKET 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp_matrix",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // matrix_row ::= LBRACKET exp_list RBRACKET 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("matrix_row",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // exp_list ::= exp 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp_list",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // exp_list ::= exp COMMA exp_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp_list",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // arr_access ::= ID LBRACKET exp RBRACKET LBRACKET exp RBRACKET 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                if (parser.getSemanticTable() != null) {
                }
                
                if (parser.codeGenerationEnabled) {
                    RESULT = parser.getCodeGenerator().generateArrayAccess(id.toString(), e1, e2);
                } else {
                    RESULT = "ARRAY_ACCESS"; 
                }
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arr_access",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // stmt ::= exp QUESTION 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
          if (parser.getSemanticTable() != null && e != null) {
          }
       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // stmt ::= assign 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // stmt ::= decl_var 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // stmt ::= decl_arr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // stmt ::= ctrl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // stmt ::= break_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // stmt ::= return_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // stmt ::= read_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // stmt ::= write_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // stmt ::= LBLOCK block RBLOCK 
            {
              Object RESULT =null;
		 
          parser.enterBlockScope();
          parser.exitBlockScope();
       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // stmt ::= error QUESTION 
            {
              Object RESULT =null;
		 System.err.println("Error en sentencia. Recuperando en ';'..."); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // assign ::= ID ASSIGN exp QUESTION 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            boolean valid = parser.getSemanticTable().checkAssignment(id.toString(), e, idleft);
            
            if (valid) {
                System.out.println("Asignacion valida: " + id + " = " + e);
            } else {
                System.err.println("Error en asignacion a variable: " + id);
            }
            
            if (parser.codeGenerationEnabled && valid) {
                parser.getCodeGenerator().generateAssignment(id.toString(), e);
            }
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assign",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // assign ::= arr_access ASSIGN exp QUESTION 
            {
              Object RESULT =null;
		int arrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String arr = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
            if (parser.getSemanticTable() != null) {
                System.out.println("Asignacion a array: " + arr + " = " + e);
                
                if (parser.codeGenerationEnabled) {
                    parser.getCodeGenerator().addComment("Asignación a elemento de array");
                }
            }
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assign",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // assign ::= ID ASSIGN error QUESTION 
            {
              Object RESULT =null;
		 System.err.println("Error en expresión de asignación. Continuando..."); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assign",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // decl_var ::= tipo ID ASSIGN exp QUESTION 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
              boolean declared = parser.getSemanticTable().declareVariable(id.toString(), t, idleft, idright, true);
              
              if (declared) {
                  if (e != null) {
                      boolean compatible = parser.getSemanticTable().checkTypeCompatibility(t, e, idleft);
                      if (compatible) {
                          System.out.println("Variable '" + id + "' declarada e inicializada correctamente como " + t);
                      } else {
                          System.err.println("Error: tipos incompatibles en inicializacion de " + id);
                      }
                  }
              }
              
              parser.updateVariableType(id.toString(), t.toString());
              
              if (parser.codeGenerationEnabled && declared) {
                  parser.getCodeGenerator().declareVariable(id.toString(), t.toString());
                  if (e != null) {
                      parser.getCodeGenerator().generateAssignment(id.toString(), e);
                  }
              }
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl_var",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // decl_var ::= tipo ID QUESTION 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
              boolean declared = parser.getSemanticTable().declareVariable(id.toString(), t, idleft, idright, false);
              
              if (declared) {
                  System.out.println("Variable '" + id + "' declarada como " + t + " (sin inicializar)");
              }
              
              parser.updateVariableType(id.toString(), t.toString());
              
              if (parser.codeGenerationEnabled && declared) {
                  parser.getCodeGenerator().declareVariable(id.toString(), t.toString());
              }
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl_var",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // literal ::= LIT_INT 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
             RESULT = "INT"; 
             System.out.println("Literal entero detectado");
             
             if (parser.codeGenerationEnabled) {
                 RESULT = val.toString(); 
             }
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // literal ::= LIT_FLOAT 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
             RESULT = "FLOAT"; 
             System.out.println("Literal flotante detectado");
             
             if (parser.codeGenerationEnabled) {
                 RESULT = val.toString();
             }
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // literal ::= LIT_BOOL 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
             RESULT = "BOOL"; 
             System.out.println("Literal booleano detectado");
             
             if (parser.codeGenerationEnabled) {
                 RESULT = val.toString();
             }
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // literal ::= LIT_CHAR 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
             RESULT = "CHAR"; 
             System.out.println("Literal caracter detectado");
             
             if (parser.codeGenerationEnabled) {
                 RESULT = val.toString();
             }
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // literal ::= LIT_STRING 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
             RESULT = "STRING"; 
             System.out.println("Literal cadena detectado");
             
             if (parser.codeGenerationEnabled) {
                 RESULT = val.toString();
             }
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // literal ::= TRUE 
            {
              String RESULT =null;
		 
             RESULT = "BOOL"; 
             System.out.println("Literal booleano 'true' detectado");
             
             if (parser.codeGenerationEnabled) {
                 RESULT = "true";
             }
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // literal ::= FALSE 
            {
              String RESULT =null;
		 
             RESULT = "BOOL"; 
             System.out.println("Literal booleano 'false' detectado");
             
             if (parser.codeGenerationEnabled) {
                 RESULT = "false";
             }
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // llamada_fun ::= ID LPAREN arg_list RPAREN 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 
                 if (parser.getSemanticTable() != null) {
                     RESULT = "FUNCTION_CALL"; 
                 }
                 
                 if (parser.codeGenerationEnabled) {
                     List<String> args = new ArrayList<String>(); // TODO: extraer argumentos reales
                     RESULT = parser.getCodeGenerator().generateFunctionCall(id.toString(), args);
                 }
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamada_fun",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // llamada_fun ::= ID LPAREN RPAREN 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 
                 if (parser.getSemanticTable() != null) {
                     RESULT = "FUNCTION_CALL";
                 }
                 
                 if (parser.codeGenerationEnabled) {
                     List<String> noArgs = new ArrayList<String>();
                     RESULT = parser.getCodeGenerator().generateFunctionCall(id.toString(), noArgs);
                 }
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamada_fun",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // exp ::= exp_log 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // exp_log ::= exp_log OR term_log 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
             if (parser.getSemanticTable() != null) {
             }
             RESULT = "BOOL"; 
             
             if (parser.codeGenerationEnabled) {
                 RESULT = parser.getCodeGenerator().generateBinaryOp(e1, "||", e2);
             }
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp_log",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // exp_log ::= term_log 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp_log",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // term_log ::= term_log AND factor_log 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
              if (parser.getSemanticTable() != null) {
              }
              RESULT = "BOOL"; 
              
              if (parser.codeGenerationEnabled) {
                  RESULT = parser.getCodeGenerator().generateBinaryOp(e1, "&&", e2);
              }
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term_log",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // term_log ::= factor_log 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term_log",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // factor_log ::= NOT atom_arit 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                if (parser.getSemanticTable() != null) {
                }
                RESULT = "BOOL"; 
                
                if (parser.codeGenerationEnabled) {
                    RESULT = parser.getCodeGenerator().generateUnaryOp("!", e);
                }
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor_log",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // factor_log ::= exp_rel 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor_log",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // factor_log ::= LPAREN exp_log RPAREN 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor_log",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // exp_rel ::= exp_arit LT exp_arit 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
             RESULT = "BOOL"; 
             
             if (parser.codeGenerationEnabled) {
                 RESULT = parser.getCodeGenerator().generateComparison(e1, "<", e2);
             }
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp_rel",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // exp_rel ::= exp_arit LTE exp_arit 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
             RESULT = "BOOL"; 
             
             if (parser.codeGenerationEnabled) {
                 RESULT = parser.getCodeGenerator().generateComparison(e1, "<=", e2);
             }
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp_rel",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // exp_rel ::= exp_arit GT exp_arit 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
             RESULT = "BOOL"; 
             
             if (parser.codeGenerationEnabled) {
                 RESULT = parser.getCodeGenerator().generateComparison(e1, ">", e2);
             }
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp_rel",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // exp_rel ::= exp_arit GTE exp_arit 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
             RESULT = "BOOL"; 
             
             if (parser.codeGenerationEnabled) {
                 RESULT = parser.getCodeGenerator().generateComparison(e1, ">=", e2);
             }
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp_rel",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // exp_rel ::= exp_arit EQ exp_arit 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
             RESULT = "BOOL"; 
             
             if (parser.codeGenerationEnabled) {
                 RESULT = parser.getCodeGenerator().generateComparison(e1, "==", e2);
             }
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp_rel",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // exp_rel ::= exp_arit NEQ exp_arit 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
             RESULT = "BOOL"; 
             
             if (parser.codeGenerationEnabled) {
                 RESULT = parser.getCodeGenerator().generateComparison(e1, "!=", e2);
             }
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp_rel",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // exp_rel ::= exp_arit 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp_rel",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // exp_arit ::= exp_arit PLUS term_arit 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
              RESULT = "NUMERIC"; 
              if (parser.codeGenerationEnabled) {
                  RESULT = parser.getCodeGenerator().generateBinaryOp(e1, "+", e2);
              }
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp_arit",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // exp_arit ::= exp_arit MINUS term_arit 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
              RESULT = "NUMERIC"; 
              
              if (parser.codeGenerationEnabled) {
                  RESULT = parser.getCodeGenerator().generateBinaryOp(e1, "-", e2);
              }
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp_arit",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // exp_arit ::= term_arit 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp_arit",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // term_arit ::= term_arit TIMES factor_arit 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
               RESULT = "NUMERIC"; 
               
               if (parser.codeGenerationEnabled) {
                   RESULT = parser.getCodeGenerator().generateBinaryOp(e1, "*", e2);
               }
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term_arit",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // term_arit ::= term_arit DIVIDE factor_arit 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
               RESULT = "NUMERIC"; 
               
               if (parser.codeGenerationEnabled) {
                   RESULT = parser.getCodeGenerator().generateBinaryOp(e1, "/", e2);
               }
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term_arit",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // term_arit ::= term_arit MOD factor_arit 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
               RESULT = "INT"; 
               
               if (parser.codeGenerationEnabled) {
                   RESULT = parser.getCodeGenerator().generateBinaryOp(e1, "%", e2);
               }
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term_arit",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // term_arit ::= factor_arit 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term_arit",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // factor_arit ::= factor_arit POW power_arit 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                 RESULT = "NUMERIC"; 
                 
                 if (parser.codeGenerationEnabled) {
                     RESULT = parser.getCodeGenerator().generateBinaryOp(e1, "**", e2);
                 }
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor_arit",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // factor_arit ::= power_arit 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor_arit",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // power_arit ::= unary_exp 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("power_arit",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // power_arit ::= atom_arit 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("power_arit",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // unary_exp ::= MINUS atom_arit 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unary_exp",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // unary_exp ::= INCREMENT ID 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unary_exp",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // unary_exp ::= DECREMENT ID 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unary_exp",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // atom_arit ::= ID 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
               if (parser.getSemanticTable() != null) {
                   parser.getSemanticTable().useVariable(id.toString(), idleft, idright);
               }
               
               if (parser.codeGenerationEnabled) {
                   RESULT = id.toString(); 
               } else {
                   RESULT = "VARIABLE"; 
               }
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atom_arit",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // atom_arit ::= literal 
            {
              String RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atom_arit",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // atom_arit ::= arr_access 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atom_arit",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // atom_arit ::= llamada_fun 
            {
              String RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = f; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atom_arit",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // atom_arit ::= LPAREN exp RPAREN 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atom_arit",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // arg_list ::= exp 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arg_list",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // arg_list ::= exp COMMA arg_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arg_list",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // ctrl ::= if_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ctrl",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // ctrl ::= do_while 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ctrl",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // ctrl ::= for_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ctrl",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // ctrl ::= switch_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ctrl",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // if_stmt ::= IF LPAREN exp RPAREN LBLOCK block RBLOCK 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		 
             parser.enterControlScope("IF");
             parser.exitControlScope();
             
             if (parser.codeGenerationEnabled) {
                 parser.getCodeGenerator().addComment("Estructura IF procesada");
                 parser.getCodeGenerator().addComment("Condicion: " + e);
             }
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stmt",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // if_stmt ::= IF LPAREN exp RPAREN LBLOCK block RBLOCK ELIF LPAREN exp RPAREN LBLOCK block RBLOCK 
            {
              Object RESULT =null;
		 
             parser.enterControlScope("IF");
             parser.exitControlScope();
             
             if (parser.codeGenerationEnabled) {
                 parser.getCodeGenerator().addComment("Estructura IF-ELIF procesada");
             }
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stmt",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // if_stmt ::= IF LPAREN exp RPAREN LBLOCK block RBLOCK ELSE LBLOCK block RBLOCK 
            {
              Object RESULT =null;
		 
             parser.enterControlScope("IF");
             parser.exitControlScope();
             
             if (parser.codeGenerationEnabled) {
                 parser.getCodeGenerator().addComment("Estructura IF-ELSE procesada");
             }
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stmt",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // if_stmt ::= IF LPAREN exp RPAREN LBLOCK block RBLOCK ELIF LPAREN exp RPAREN LBLOCK block RBLOCK ELSE LBLOCK block RBLOCK 
            {
              Object RESULT =null;
		 
             parser.enterControlScope("IF");
             parser.exitControlScope();
             
             if (parser.codeGenerationEnabled) {
                 parser.getCodeGenerator().addComment("Estructura IF-ELIF-ELSE procesada");
             }
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stmt",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-17)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // if_stmt ::= IF LPAREN error RPAREN LBLOCK block RBLOCK 
            {
              Object RESULT =null;
		 System.err.println("Error en condición IF. Continuando..."); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stmt",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // do_while ::= DO LBLOCK block RBLOCK WHILE LPAREN exp RPAREN QUESTION 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 
              parser.enterControlScope("WHILE");
              parser.exitControlScope();
              
              if (parser.codeGenerationEnabled) {
                  parser.getCodeGenerator().addComment("Estructura DO-WHILE procesada");
                  parser.getCodeGenerator().addComment("Condicion: " + e);
              }
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("do_while",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // do_while ::= DO LBLOCK block RBLOCK WHILE LPAREN error RPAREN QUESTION 
            {
              Object RESULT =null;
		 System.err.println("Error en condición WHILE. Continuando..."); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("do_while",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // for_stmt ::= FOR LPAREN decl_var exp QUESTION exp RPAREN LBLOCK block RBLOCK 
            {
              Object RESULT =null;
		 
              parser.enterControlScope("FOR");
              parser.exitControlScope();
              
              if (parser.codeGenerationEnabled) {
                  parser.getCodeGenerator().addComment("Estructura FOR procesada con declaracion");
              }
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_stmt",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // for_stmt ::= FOR LPAREN assign exp QUESTION exp RPAREN LBLOCK block RBLOCK 
            {
              Object RESULT =null;
		 
              parser.enterControlScope("FOR");
              parser.exitControlScope();
              
              if (parser.codeGenerationEnabled) {
                  parser.getCodeGenerator().addComment("Estructura FOR procesada con asignacion");
              }
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_stmt",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // for_stmt ::= FOR LPAREN QUESTION exp QUESTION exp RPAREN LBLOCK block RBLOCK 
            {
              Object RESULT =null;
		 
              parser.enterControlScope("FOR");
              parser.exitControlScope();
              
              if (parser.codeGenerationEnabled) {
                  parser.getCodeGenerator().addComment("Estructura FOR procesada sin inicializacion");
              }
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_stmt",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // for_stmt ::= FOR LPAREN error RPAREN LBLOCK block RBLOCK 
            {
              Object RESULT =null;
		 System.err.println("Error en estructura FOR. Continuando..."); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_stmt",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // switch_stmt ::= SWITCH LPAREN exp RPAREN LBLOCK case_list RBLOCK 
            {
              Object RESULT =null;
		 
                 if (parser.codeGenerationEnabled) {
                     parser.getCodeGenerator().addComment("Estructura SWITCH procesada");
                 }
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("switch_stmt",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // switch_stmt ::= SWITCH LPAREN error RPAREN LBLOCK case_list RBLOCK 
            {
              Object RESULT =null;
		 System.err.println("Error en expresión SWITCH. Continuando..."); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("switch_stmt",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // case_list ::= case_stmt case_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("case_list",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // case_list ::= default_stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("case_list",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // case_list ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("case_list",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // case_stmt ::= CASE exp COLON block 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("case_stmt",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // default_stmt ::= DEFAULT COLON block 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("default_stmt",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // break_stmt ::= BREAK QUESTION 
            {
              Object RESULT =null;
		 
                if (parser.codeGenerationEnabled) {
                    parser.getCodeGenerator().generateBreak();
                }
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("break_stmt",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // return_stmt ::= RETURN exp QUESTION 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                 System.out.println("DEBUG: Return con expresión, función actual: " + parser.getCurrentFunctionName());
                 
                 if (parser.getSemanticTable() != null && parser.getCurrentFunctionName() != null) {
                     parser.getSemanticTable().checkReturnStatement(parser.getCurrentFunctionName(), e, eleft);
                 } else {
                     System.err.println("ERROR: No se puede verificar return - función actual: " + parser.getCurrentFunctionName());
                 }
                 
                 if (parser.codeGenerationEnabled) {
                     parser.getCodeGenerator().generateReturn(e);
                 }
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_stmt",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // return_stmt ::= RETURN QUESTION 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                 System.out.println("DEBUG: Return sin expresión, función actual: " + parser.getCurrentFunctionName());
                 
                 if (parser.getSemanticTable() != null && parser.getCurrentFunctionName() != null) {
                     parser.getSemanticTable().checkReturnStatement(parser.getCurrentFunctionName(), null, rleft);
                 } else {
                     System.err.println("ERROR: No se puede verificar return - función actual: " + parser.getCurrentFunctionName());
                 }
                 
                 if (parser.codeGenerationEnabled) {
                     parser.getCodeGenerator().generateReturn(null);
                 }
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_stmt",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // return_stmt ::= RETURN error QUESTION 
            {
              Object RESULT =null;
		 System.err.println("Error en expresión RETURN. Continuando..."); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_stmt",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // read_stmt ::= READ LPAREN ID RPAREN QUESTION 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 
               if (parser.getSemanticTable() != null) {
                   parser.getSemanticTable().useVariable(id.toString(), idleft, idright);
               }
               
               if (parser.codeGenerationEnabled) {
                   parser.getCodeGenerator().generateRead(id.toString());
               }
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("read_stmt",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // read_stmt ::= READ LPAREN error RPAREN QUESTION 
            {
              Object RESULT =null;
		 System.err.println("Error en función READ. Continuando..."); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("read_stmt",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // write_stmt ::= WRITE LPAREN exp RPAREN QUESTION 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 
                
                if (parser.codeGenerationEnabled) {
                    parser.getCodeGenerator().generateWrite(e);
                }
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("write_stmt",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // write_stmt ::= WRITE LPAREN error RPAREN QUESTION 
            {
              Object RESULT =null;
		 System.err.println("Error en función WRITE. Continuando..."); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("write_stmt",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
