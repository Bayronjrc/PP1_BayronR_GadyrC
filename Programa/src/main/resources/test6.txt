

void main ʃ ʅ \
    @ Probando declaraciones y operaciones básicas
    int x | 10?
    int y | 5?
    float z | 3.14159?
    bool condicion1 | luna?  @ true
    bool condicion2 | sol?   @ false
    char letra | 'A'?
    string mensaje | "Este es un programa de prueba"?
    
    @ Arreglos bidimensionales
    int matriz[3][3] | [[1, 2, 3], [4, 5, 6], [7, 8, 9]]?
    float matrizFloat[2][2]?  @ Solo declaración
    
    @ Asignación a elementos de la matriz
    matriz[0][0] | 99?
    matriz[1][1] | matriz[0][0] * 2?
    
    @ Expresiones complejas con precedencia
    int resultado | ʃx + y ʅ * ʃz // 2.0ʅ ** 2 ~ 3?
    
    @ Bucle for complejo
    ? ʃ int i | 0? i < 10? i++ ʅ \
        if ʃ i ~ 2 == 0 ʅ \
            write ʃ "i es par: " ʅ?
            write ʃ i ʅ?
        / else \
            write ʃ "i es impar: " ʅ?
            write ʃ i ʅ?
            
            @ Bucle anidado
            ? ʃ int j | 0? j < i? j++ ʅ \
                write ʃ "  - j: " ʅ?
                write ʃ j ʅ?
            /
        /
    /
    
    @ Bucle do-while con condición compleja
    int contador | 0?
    do \
        contador++?
        write ʃ "Contador: " ʅ?
        write ʃ contador ʅ?
        
        @ Error deliberado: falta un paréntesis
        if ʃ contador ~ 3 == 0 \
            write ʃ "Múltiplo de 3" ʅ?
        /
    / while ʃ contador < 10 ^ contador > 0 # condicion1 ^ !condicion2 ʅ?
    
    @ Switch anidado y complejo
    int opcion | 2?
    switch ʃ opcion ʅ \
        case 1: 
            write ʃ "Opción 1" ʅ?
            int suboption | 3?
            switch ʃ suboption ʅ \
                case 1:
                    write ʃ "Subopción 1" ʅ?
                    break?
                case 2:
                    write ʃ "Subopción 2" ʅ?
                    break?
                case 3:
                    write ʃ "Subopción 3" ʅ?
                    break?
                default:
                    write ʃ "Subopción desconocida" ʅ?
            /
            break?
        case 2:
            write ʃ "Opción 2" ʅ?
            @ Error deliberado: falta el break
        case 3:
            write ʃ "Opción 3" ʅ?
            break?
        default:
            write ʃ "Opción desconocida" ʅ?
    /
    
    @ Operadores unarios
    int a | 5?
    a++?
    write ʃ "a después de incremento: " ʅ?
    write ʃ a ʅ?
    
    --a?
    write ʃ "a después de decremento: " ʅ?
    write ʃ a ʅ?
    
    int negativo | -a?
    write ʃ "Negativo de a: " ʅ?
    write ʃ negativo ʅ?
    
    @ Operaciones con prioridad de operadores
    int expr1 | 2 + 3 * 4?
    int expr2 | ʃ2 + 3ʅ * 4?
    int expr3 | 2 + 3 * 4 ** 2?
    int expr4 | ʃʃ2 + 3ʅ * 4ʅ ** 2?
    
    write ʃ "Expresión 1: " ʅ?
    write ʃ expr1 ʅ?
    write ʃ "Expresión 2: " ʅ?
    write ʃ expr2 ʅ?
    write ʃ "Expresión 3: " ʅ?
    write ʃ expr3 ʅ?
    write ʃ "Expresión 4: " ʅ?
    write ʃ expr4 ʅ?
    
    @ Llamadas a funciones anidadas
    int fib5 | fibonacci ʃ 5 ʅ?
    write ʃ "Fibonacci de 5: " ʅ?
    write ʃ fib5 ʅ?
    
    int fib10 | fibonacci ʃ fibonacci ʃ 5 ʅ ʅ?
    write ʃ "Fibonacci de fibonacci(5): " ʅ?
    write ʃ fib10 ʅ?
    
    @ Error deliberado: llamada a función con número incorrecto de argumentos
    float stats | calcularEstadisticas ʃ 1.0, 2.0, 3.0 ʅ?
    
    @ Operadores lógicos complejos
    if ʃ !ʃ!condicion1 # condicion2ʅ ^ ʃcondicion1 # !condicion2ʅ ʅ \
        write ʃ "Expresión lógica compleja verdadera" ʅ?
    / else \
        write ʃ "Expresión lógica compleja falsa" ʅ?
    /
    
    @ Acceso a elementos de array en expresiones complejas
    int valor | matriz[1][2] + matriz[2][0] * 2?
    write ʃ "Valor calculado: " ʅ?
    write ʃ valor ʅ?
    
    @ Error deliberado: acceso fuera de límites
    int fueraLimite | matriz[5][5]?
    
    @ Operación de lectura
    int numero?
    write ʃ "Ingrese un número: " ʅ?
    read ʃ numero ʅ?
    write ʃ "Usted ingresó: " ʅ?
    write ʃ numero ʅ?
    
    @ Error sintáctico deliberado (paréntesis mal balanceados)
    if ʃ numero > 0 ^ ʃnumero < 100 \
        write ʃ "Número entre 0 y 100" ʅ?
    /
    
    @ Error semántico deliberado (tipos incompatibles)
    int mixTipos | x + mensaje?
    
    @ Prueba de recursividad extrema
    int fibonacciGrande | fibonacci ʃ 20 ʅ?
    write ʃ "Fibonacci de 20: " ʅ?
    write ʃ fibonacciGrande ʅ?
/

@ --------------- Funciones extra para probar robustez ---------------

@ Función con nombres de variables similares y operaciones complejas
float calculoIntensivo ʃ float val1, float val2 ʅ \
    float val1a | val1 * 2.0?
    float val1b | val1a ** 2.0?
    float val2a | val2 // 2.0?
    float val2b | val2a ** 0.5?
    float resultado | ʃval1a + val1b + val2a + val2bʅ // 4.0?
    
    @ For anidado para prueba de carga
    ? ʃ int i | 0? i < 5? i++ ʅ \
        ? ʃ int j | 0? j < 5? j++ ʅ \
            ? ʃ int k | 0? k < 5? k++ ʅ \
                resultado | resultado + ʃi * j * kʅ // 1000.0?
            /
        /
    /
    
    return resultado?
/

@ Función con errores sintácticos múltiples
int funcionProblematica ʃ int x, int y, { Error deliberado: coma final }
    return x +* y?  @ Error deliberado: operador inválido
/

@ --------------- Código con errores masivos para prueba de recuperación ---------------

void funcionErrorMasivo ʃ ʅ \
    @ Falta de terminadores de sentencia
    int a | 5
    int b | 10
    
    @ Operadores mal escritos
    c | a ++-+ b?
    
    @ Bloques mal cerrados
    if ʃ a > b ʅ \
        a | a + 1?
    / else \
        b | b - 1?
    
    @ Paréntesis mal balanceados
    int resultado | ʃa + b * ʃc - d?
    
    @ Sentencias incompletas
    return?

@ Archivo de prueba monstruoso para el compilador
@ Contiene casos complejos y algunos errores deliberados para probar la recuperación

{ Este es un comentario 
  de múltiples líneas con caracteres especiales:
  !@#$%^&*()_+{}[]:"<>?,./;'
}

@ --------------- Declaraciones de funciones anidadas y complejas ---------------

@ Función recursiva con expresiones complejas
int fibonacci ʃ int n ʅ \
    if ʃ n <= 1 ʅ \
        return n?
    /
    else \
        return fibonacci ʃ n - 1 ʅ + fibonacci ʃ n - 2 ʅ?
    /
/

@ Función con muchos parámetros y expresiones complejas
float calcularEstadisticas ʃ float a, float b, float c, float d, float e ʅ \
    float suma | a + b + c + d + e?
    float promedio | suma // 5.0?
    float varianza | ʃʃa - promedio ʅ ** 2 + ʃb - promedio ʅ ** 2 + ʃc - promedio ʅ ** 2 + ʃd - promedio ʅ ** 2 + ʃe - promedio ʅ ** 2ʅ // 5.0?
    float desviacion | varianza ** 0.5?
    
    @ Expresión condicional compleja
    if ʃ ʃa > b ^ a > c ^ a > d ^ a > eʅ # ʃe < a ^ e < b ^ e < c ^ e < dʅ ʅ \
        return desviacion * 2.0?
    /
    
    return desviacion?
/

@ Función con arreglos bidimensionales
int sumarMatriz ʃ int filas, int columnas ʅ \
    int matriz [5][5] | [[1, 2, 3, 4, 5], [6, 7, 8, 9, 10]]?  @ Inicialización parcial
    int suma | 0?
    
    @ Bucles anidados
    ? ʃ int i | 0? i < filas? i++ ʅ \
        ? ʃ int j | 0? j < columnas? j++ ʅ \
            suma | suma + matriz[i][j]?
        /
    /
    
    return suma?
/

@ Función con errores deliberados para probar recuperación
int funcionConErrores ʃ int a, int b ʅ \
    int resultado
    @ Error: falta el signo de interrogación arriba
    
    if ʃ a > 0 ʅ \
        resultado | a + b?
    / else if ʃ a < 0 ʅ \
        resultado | a - b?
    / else \
        resultado | a * b?
    /
    
    @ Error de tipo deliberado
    resultado | resultado + "cadena"?
    
    return resultado?
/

@ --------------- Programa principal con características avanzadas ---------------